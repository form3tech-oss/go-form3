// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"log"
	"strconv"

	"github.com/form3tech-oss/go-form3/v4/pkg/client"
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// MandateReturn mandate return
// swagger:model MandateReturn
type MandateReturn struct {

	// attributes
	Attributes *MandateReturnAttributes `json:"attributes,omitempty"`

	// created on
	// Format: date-time
	CreatedOn *strfmt.DateTime `json:"created_on,omitempty"`

	// id
	// Format: uuid
	ID strfmt.UUID `json:"id,omitempty"`

	// modified on
	// Format: date-time
	ModifiedOn *strfmt.DateTime `json:"modified_on,omitempty"`

	// organisation id
	// Format: uuid
	OrganisationID strfmt.UUID `json:"organisation_id,omitempty"`

	// relationships
	Relationships *MandateReturnRelationships `json:"relationships,omitempty"`

	// type
	// Pattern: ^[A-Za-z_]*$
	Type string `json:"type,omitempty"`

	// version
	// Minimum: 0
	Version *int64 `json:"version,omitempty"`
}

func MandateReturnWithDefaults(defaults client.Defaults) *MandateReturn {
	return &MandateReturn{

		Attributes: MandateReturnAttributesWithDefaults(defaults),

		CreatedOn: defaults.GetStrfmtDateTimePtr("MandateReturn", "created_on"),

		ID: defaults.GetStrfmtUUID("MandateReturn", "id"),

		ModifiedOn: defaults.GetStrfmtDateTimePtr("MandateReturn", "modified_on"),

		OrganisationID: defaults.GetStrfmtUUID("MandateReturn", "organisation_id"),

		Relationships: MandateReturnRelationshipsWithDefaults(defaults),

		Type: defaults.GetString("MandateReturn", "type"),

		Version: defaults.GetInt64Ptr("MandateReturn", "version"),
	}
}

func (m *MandateReturn) WithAttributes(attributes MandateReturnAttributes) *MandateReturn {

	m.Attributes = &attributes

	return m
}

func (m *MandateReturn) WithoutAttributes() *MandateReturn {
	m.Attributes = nil
	return m
}

func (m *MandateReturn) WithCreatedOn(createdOn strfmt.DateTime) *MandateReturn {

	m.CreatedOn = &createdOn

	return m
}

func (m *MandateReturn) WithoutCreatedOn() *MandateReturn {
	m.CreatedOn = nil
	return m
}

func (m *MandateReturn) WithID(id strfmt.UUID) *MandateReturn {

	m.ID = id

	return m
}

func (m *MandateReturn) WithModifiedOn(modifiedOn strfmt.DateTime) *MandateReturn {

	m.ModifiedOn = &modifiedOn

	return m
}

func (m *MandateReturn) WithoutModifiedOn() *MandateReturn {
	m.ModifiedOn = nil
	return m
}

func (m *MandateReturn) WithOrganisationID(organisationID strfmt.UUID) *MandateReturn {

	m.OrganisationID = organisationID

	return m
}

func (m *MandateReturn) WithRelationships(relationships MandateReturnRelationships) *MandateReturn {

	m.Relationships = &relationships

	return m
}

func (m *MandateReturn) WithoutRelationships() *MandateReturn {
	m.Relationships = nil
	return m
}

func (m *MandateReturn) WithType(typeVar string) *MandateReturn {

	m.Type = typeVar

	return m
}

func (m *MandateReturn) WithVersion(version int64) *MandateReturn {

	m.Version = &version

	return m
}

func (m *MandateReturn) WithoutVersion() *MandateReturn {
	m.Version = nil
	return m
}

// Validate validates this mandate return
func (m *MandateReturn) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAttributes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedOn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateModifiedOn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrganisationID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRelationships(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVersion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MandateReturn) validateAttributes(formats strfmt.Registry) error {

	if swag.IsZero(m.Attributes) { // not required
		return nil
	}

	if m.Attributes != nil {
		if err := m.Attributes.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("attributes")
			}
			return err
		}
	}

	return nil
}

func (m *MandateReturn) validateCreatedOn(formats strfmt.Registry) error {

	if swag.IsZero(m.CreatedOn) { // not required
		return nil
	}

	if err := validate.FormatOf("created_on", "body", "date-time", m.CreatedOn.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *MandateReturn) validateID(formats strfmt.Registry) error {

	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.FormatOf("id", "body", "uuid", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *MandateReturn) validateModifiedOn(formats strfmt.Registry) error {

	if swag.IsZero(m.ModifiedOn) { // not required
		return nil
	}

	if err := validate.FormatOf("modified_on", "body", "date-time", m.ModifiedOn.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *MandateReturn) validateOrganisationID(formats strfmt.Registry) error {

	if swag.IsZero(m.OrganisationID) { // not required
		return nil
	}

	if err := validate.FormatOf("organisation_id", "body", "uuid", m.OrganisationID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *MandateReturn) validateRelationships(formats strfmt.Registry) error {

	if swag.IsZero(m.Relationships) { // not required
		return nil
	}

	if m.Relationships != nil {
		if err := m.Relationships.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("relationships")
			}
			return err
		}
	}

	return nil
}

func (m *MandateReturn) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	if err := validate.Pattern("type", "body", string(m.Type), `^[A-Za-z_]*$`); err != nil {
		return err
	}

	return nil
}

func (m *MandateReturn) validateVersion(formats strfmt.Registry) error {

	if swag.IsZero(m.Version) { // not required
		return nil
	}

	if err := validate.MinimumInt("version", "body", int64(*m.Version), 0, false); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MandateReturn) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MandateReturn) UnmarshalBinary(b []byte) error {
	var res MandateReturn
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
func (m *MandateReturn) Json() string {
	json, err := json.MarshalIndent(m, "  ", "  ")
	if err != nil {
		log.Fatal(err)
	}
	return string(json)
}

// MandateReturnAttributes mandate return attributes
// swagger:model MandateReturnAttributes
type MandateReturnAttributes struct {

	// debtor party
	DebtorParty *MandateReturnAttributesDebtorParty `json:"debtor_party,omitempty"`

	// return code
	ReturnCode string `json:"return_code,omitempty"`
}

func MandateReturnAttributesWithDefaults(defaults client.Defaults) *MandateReturnAttributes {
	return &MandateReturnAttributes{

		DebtorParty: MandateReturnAttributesDebtorPartyWithDefaults(defaults),

		ReturnCode: defaults.GetString("MandateReturnAttributes", "return_code"),
	}
}

func (m *MandateReturnAttributes) WithDebtorParty(debtorParty MandateReturnAttributesDebtorParty) *MandateReturnAttributes {

	m.DebtorParty = &debtorParty

	return m
}

func (m *MandateReturnAttributes) WithoutDebtorParty() *MandateReturnAttributes {
	m.DebtorParty = nil
	return m
}

func (m *MandateReturnAttributes) WithReturnCode(returnCode string) *MandateReturnAttributes {

	m.ReturnCode = returnCode

	return m
}

// Validate validates this mandate return attributes
func (m *MandateReturnAttributes) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDebtorParty(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MandateReturnAttributes) validateDebtorParty(formats strfmt.Registry) error {

	if swag.IsZero(m.DebtorParty) { // not required
		return nil
	}

	if m.DebtorParty != nil {
		if err := m.DebtorParty.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("attributes" + "." + "debtor_party")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MandateReturnAttributes) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MandateReturnAttributes) UnmarshalBinary(b []byte) error {
	var res MandateReturnAttributes
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
func (m *MandateReturnAttributes) Json() string {
	json, err := json.MarshalIndent(m, "  ", "  ")
	if err != nil {
		log.Fatal(err)
	}
	return string(json)
}

// MandateReturnAttributesDebtorParty mandate return attributes debtor party
// swagger:model MandateReturnAttributesDebtorParty
type MandateReturnAttributesDebtorParty struct {

	// new bank details
	NewBankDetails *MandateReturnAttributesDebtorPartyNewBankDetails `json:"new_bank_details,omitempty"`
}

func MandateReturnAttributesDebtorPartyWithDefaults(defaults client.Defaults) *MandateReturnAttributesDebtorParty {
	return &MandateReturnAttributesDebtorParty{

		NewBankDetails: MandateReturnAttributesDebtorPartyNewBankDetailsWithDefaults(defaults),
	}
}

func (m *MandateReturnAttributesDebtorParty) WithNewBankDetails(newBankDetails MandateReturnAttributesDebtorPartyNewBankDetails) *MandateReturnAttributesDebtorParty {

	m.NewBankDetails = &newBankDetails

	return m
}

func (m *MandateReturnAttributesDebtorParty) WithoutNewBankDetails() *MandateReturnAttributesDebtorParty {
	m.NewBankDetails = nil
	return m
}

// Validate validates this mandate return attributes debtor party
func (m *MandateReturnAttributesDebtorParty) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateNewBankDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MandateReturnAttributesDebtorParty) validateNewBankDetails(formats strfmt.Registry) error {

	if swag.IsZero(m.NewBankDetails) { // not required
		return nil
	}

	if m.NewBankDetails != nil {
		if err := m.NewBankDetails.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("attributes" + "." + "debtor_party" + "." + "new_bank_details")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MandateReturnAttributesDebtorParty) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MandateReturnAttributesDebtorParty) UnmarshalBinary(b []byte) error {
	var res MandateReturnAttributesDebtorParty
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
func (m *MandateReturnAttributesDebtorParty) Json() string {
	json, err := json.MarshalIndent(m, "  ", "  ")
	if err != nil {
		log.Fatal(err)
	}
	return string(json)
}

// MandateReturnAttributesDebtorPartyNewBankDetails mandate return attributes debtor party new bank details
// swagger:model MandateReturnAttributesDebtorPartyNewBankDetails
type MandateReturnAttributesDebtorPartyNewBankDetails struct {

	// account number
	AccountNumber string `json:"account_number,omitempty"`

	// account number code
	AccountNumberCode AccountNumberCode `json:"account_number_code,omitempty"`

	// account with
	AccountWith *AccountHoldingEntity `json:"account_with,omitempty"`
}

func MandateReturnAttributesDebtorPartyNewBankDetailsWithDefaults(defaults client.Defaults) *MandateReturnAttributesDebtorPartyNewBankDetails {
	return &MandateReturnAttributesDebtorPartyNewBankDetails{

		AccountNumber: defaults.GetString("MandateReturnAttributesDebtorPartyNewBankDetails", "account_number"),

		// TODO AccountNumberCode: AccountNumberCode,

		AccountWith: AccountHoldingEntityWithDefaults(defaults),
	}
}

func (m *MandateReturnAttributesDebtorPartyNewBankDetails) WithAccountNumber(accountNumber string) *MandateReturnAttributesDebtorPartyNewBankDetails {

	m.AccountNumber = accountNumber

	return m
}

func (m *MandateReturnAttributesDebtorPartyNewBankDetails) WithAccountNumberCode(accountNumberCode AccountNumberCode) *MandateReturnAttributesDebtorPartyNewBankDetails {

	m.AccountNumberCode = accountNumberCode

	return m
}

func (m *MandateReturnAttributesDebtorPartyNewBankDetails) WithAccountWith(accountWith AccountHoldingEntity) *MandateReturnAttributesDebtorPartyNewBankDetails {

	m.AccountWith = &accountWith

	return m
}

func (m *MandateReturnAttributesDebtorPartyNewBankDetails) WithoutAccountWith() *MandateReturnAttributesDebtorPartyNewBankDetails {
	m.AccountWith = nil
	return m
}

// Validate validates this mandate return attributes debtor party new bank details
func (m *MandateReturnAttributesDebtorPartyNewBankDetails) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccountNumberCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAccountWith(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MandateReturnAttributesDebtorPartyNewBankDetails) validateAccountNumberCode(formats strfmt.Registry) error {

	if swag.IsZero(m.AccountNumberCode) { // not required
		return nil
	}

	if err := m.AccountNumberCode.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("attributes" + "." + "debtor_party" + "." + "new_bank_details" + "." + "account_number_code")
		}
		return err
	}

	return nil
}

func (m *MandateReturnAttributesDebtorPartyNewBankDetails) validateAccountWith(formats strfmt.Registry) error {

	if swag.IsZero(m.AccountWith) { // not required
		return nil
	}

	if m.AccountWith != nil {
		if err := m.AccountWith.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("attributes" + "." + "debtor_party" + "." + "new_bank_details" + "." + "account_with")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MandateReturnAttributesDebtorPartyNewBankDetails) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MandateReturnAttributesDebtorPartyNewBankDetails) UnmarshalBinary(b []byte) error {
	var res MandateReturnAttributesDebtorPartyNewBankDetails
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
func (m *MandateReturnAttributesDebtorPartyNewBankDetails) Json() string {
	json, err := json.MarshalIndent(m, "  ", "  ")
	if err != nil {
		log.Fatal(err)
	}
	return string(json)
}

// MandateReturnRelationships mandate return relationships
// swagger:model MandateReturnRelationships
type MandateReturnRelationships struct {

	// mandate
	Mandate *MandateReturnRelationshipsMandate `json:"mandate,omitempty"`

	// mandate return submission
	MandateReturnSubmission *MandateReturnRelationshipsMandateReturnSubmission `json:"mandate_return_submission,omitempty"`
}

func MandateReturnRelationshipsWithDefaults(defaults client.Defaults) *MandateReturnRelationships {
	return &MandateReturnRelationships{

		Mandate: MandateReturnRelationshipsMandateWithDefaults(defaults),

		MandateReturnSubmission: MandateReturnRelationshipsMandateReturnSubmissionWithDefaults(defaults),
	}
}

func (m *MandateReturnRelationships) WithMandate(mandate MandateReturnRelationshipsMandate) *MandateReturnRelationships {

	m.Mandate = &mandate

	return m
}

func (m *MandateReturnRelationships) WithoutMandate() *MandateReturnRelationships {
	m.Mandate = nil
	return m
}

func (m *MandateReturnRelationships) WithMandateReturnSubmission(mandateReturnSubmission MandateReturnRelationshipsMandateReturnSubmission) *MandateReturnRelationships {

	m.MandateReturnSubmission = &mandateReturnSubmission

	return m
}

func (m *MandateReturnRelationships) WithoutMandateReturnSubmission() *MandateReturnRelationships {
	m.MandateReturnSubmission = nil
	return m
}

// Validate validates this mandate return relationships
func (m *MandateReturnRelationships) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMandate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMandateReturnSubmission(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MandateReturnRelationships) validateMandate(formats strfmt.Registry) error {

	if swag.IsZero(m.Mandate) { // not required
		return nil
	}

	if m.Mandate != nil {
		if err := m.Mandate.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("relationships" + "." + "mandate")
			}
			return err
		}
	}

	return nil
}

func (m *MandateReturnRelationships) validateMandateReturnSubmission(formats strfmt.Registry) error {

	if swag.IsZero(m.MandateReturnSubmission) { // not required
		return nil
	}

	if m.MandateReturnSubmission != nil {
		if err := m.MandateReturnSubmission.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("relationships" + "." + "mandate_return_submission")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MandateReturnRelationships) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MandateReturnRelationships) UnmarshalBinary(b []byte) error {
	var res MandateReturnRelationships
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
func (m *MandateReturnRelationships) Json() string {
	json, err := json.MarshalIndent(m, "  ", "  ")
	if err != nil {
		log.Fatal(err)
	}
	return string(json)
}

// MandateReturnRelationshipsMandate mandate return relationships mandate
// swagger:model MandateReturnRelationshipsMandate
type MandateReturnRelationshipsMandate struct {

	// data
	Data []*Mandate `json:"data"`
}

func MandateReturnRelationshipsMandateWithDefaults(defaults client.Defaults) *MandateReturnRelationshipsMandate {
	return &MandateReturnRelationshipsMandate{

		Data: make([]*Mandate, 0),
	}
}

func (m *MandateReturnRelationshipsMandate) WithData(data []*Mandate) *MandateReturnRelationshipsMandate {

	m.Data = data

	return m
}

// Validate validates this mandate return relationships mandate
func (m *MandateReturnRelationshipsMandate) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MandateReturnRelationshipsMandate) validateData(formats strfmt.Registry) error {

	if swag.IsZero(m.Data) { // not required
		return nil
	}

	for i := 0; i < len(m.Data); i++ {
		if swag.IsZero(m.Data[i]) { // not required
			continue
		}

		if m.Data[i] != nil {
			if err := m.Data[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("relationships" + "." + "mandate" + "." + "data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *MandateReturnRelationshipsMandate) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MandateReturnRelationshipsMandate) UnmarshalBinary(b []byte) error {
	var res MandateReturnRelationshipsMandate
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
func (m *MandateReturnRelationshipsMandate) Json() string {
	json, err := json.MarshalIndent(m, "  ", "  ")
	if err != nil {
		log.Fatal(err)
	}
	return string(json)
}

// MandateReturnRelationshipsMandateReturnSubmission mandate return relationships mandate return submission
// swagger:model MandateReturnRelationshipsMandateReturnSubmission
type MandateReturnRelationshipsMandateReturnSubmission struct {

	// data
	Data []*MandateReturnSubmission `json:"data"`
}

func MandateReturnRelationshipsMandateReturnSubmissionWithDefaults(defaults client.Defaults) *MandateReturnRelationshipsMandateReturnSubmission {
	return &MandateReturnRelationshipsMandateReturnSubmission{

		Data: make([]*MandateReturnSubmission, 0),
	}
}

func (m *MandateReturnRelationshipsMandateReturnSubmission) WithData(data []*MandateReturnSubmission) *MandateReturnRelationshipsMandateReturnSubmission {

	m.Data = data

	return m
}

// Validate validates this mandate return relationships mandate return submission
func (m *MandateReturnRelationshipsMandateReturnSubmission) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MandateReturnRelationshipsMandateReturnSubmission) validateData(formats strfmt.Registry) error {

	if swag.IsZero(m.Data) { // not required
		return nil
	}

	for i := 0; i < len(m.Data); i++ {
		if swag.IsZero(m.Data[i]) { // not required
			continue
		}

		if m.Data[i] != nil {
			if err := m.Data[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("relationships" + "." + "mandate_return_submission" + "." + "data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *MandateReturnRelationshipsMandateReturnSubmission) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MandateReturnRelationshipsMandateReturnSubmission) UnmarshalBinary(b []byte) error {
	var res MandateReturnRelationshipsMandateReturnSubmission
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
func (m *MandateReturnRelationshipsMandateReturnSubmission) Json() string {
	json, err := json.MarshalIndent(m, "  ", "  ")
	if err != nil {
		log.Fatal(err)
	}
	return string(json)
}
