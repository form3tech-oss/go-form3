// Code generated by go-swagger; DO NOT EDIT.

package transaction_file_api

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// Client.ListTransactionFiles creates a new ListTransactionFilesRequest object
// with the default values initialized.
func (c *Client) ListTransactionFiles() *ListTransactionFilesRequest {
	var (
		pageSizeDefault = int64(100)
	)
	return &ListTransactionFilesRequest{

		FilterAdmissionAdmissionDateFrom: c.Defaults.GetStrfmtDateTimePtr("ListTransactionFiles", "filter[admission.admission_date_from]"),

		FilterAdmissionAdmissionDateTo: c.Defaults.GetStrfmtDateTimePtr("ListTransactionFiles", "filter[admission.admission_date_to]"),

		FilterAdmissionStatus: c.Defaults.GetStringPtr("ListTransactionFiles", "filter[admission.status]"),

		FilterCreatedOnFrom: c.Defaults.GetStrfmtDatePtr("ListTransactionFiles", "filter[created_on_from]"),

		FilterCreatedOnTo: c.Defaults.GetStrfmtDatePtr("ListTransactionFiles", "filter[created_on_to]"),

		FilterFileFormat: c.Defaults.GetStringPtr("ListTransactionFiles", "filter[file_format]"),

		FilterOrganisationID: make([]strfmt.UUID, 0),

		FilterPaymentScheme: c.Defaults.GetStringPtr("ListTransactionFiles", "filter[payment_scheme]"),

		FilterSubmissionSchemeReferencesClearingID: c.Defaults.GetStringPtr("ListTransactionFiles", "filter[submission.scheme_references.clearing_id]"),

		FilterSubmissionSchemeReferencesFileIdentifier: c.Defaults.GetStringPtr("ListTransactionFiles", "filter[submission.scheme_references.file_identifier]"),

		FilterSubmissionSchemeReferencesFileNumber: c.Defaults.GetStringPtr("ListTransactionFiles", "filter[submission.scheme_references.file_number]"),

		FilterSubmissionStatus: c.Defaults.GetStringPtr("ListTransactionFiles", "filter[submission.status]"),

		FilterSubmissionSubmissionDateFrom: c.Defaults.GetStrfmtDateTimePtr("ListTransactionFiles", "filter[submission.submission_date_from]"),

		FilterSubmissionSubmissionDateTo: c.Defaults.GetStrfmtDateTimePtr("ListTransactionFiles", "filter[submission.submission_date_to]"),

		PageNumber: c.Defaults.GetStringPtr("ListTransactionFiles", "page[number]"),

		PageSize: &pageSizeDefault,

		timeout: cr.DefaultTimeout,

		transport: c.transport,
		formats:   c.formats,
	}
}

type ListTransactionFilesRequest struct {

	/*FilterAdmissionAdmissionDateFrom      Find all File resources admitted from and including this date/time      */

	FilterAdmissionAdmissionDateFrom *strfmt.DateTime

	/*FilterAdmissionAdmissionDateTo      Find all File resources admitted up to and included this date/time      */

	FilterAdmissionAdmissionDateTo *strfmt.DateTime

	/*FilterAdmissionStatus      Find all File resources with a certain admission status      */

	FilterAdmissionStatus *string

	/*FilterCreatedOnFrom      Find all File resources created from this date, in format YYYY-MM-DD      */

	FilterCreatedOnFrom *strfmt.Date

	/*FilterCreatedOnTo      Find all File resources created up to this date, in format YYYY-MM-DD      */

	FilterCreatedOnTo *strfmt.Date

	/*FilterFileFormat      Find File resources by the format of the file      */

	FilterFileFormat *string

	/*FilterOrganisationID      Find all File resources with a given organisation ID      */

	FilterOrganisationID []strfmt.UUID

	/*FilterPaymentScheme      Find File resources by a certain scheme      */

	FilterPaymentScheme *string

	/*FilterSubmissionSchemeReferencesClearingID      Find File resources by the Service User Number (SUN) of the payment originator      */

	FilterSubmissionSchemeReferencesClearingID *string

	/*FilterSubmissionSchemeReferencesFileIdentifier      Find File resources the id of the submission to to the scheme      */

	FilterSubmissionSchemeReferencesFileIdentifier *string

	/*FilterSubmissionSchemeReferencesFileNumber      Find File resources by the id of the file sent to the scheme      */

	FilterSubmissionSchemeReferencesFileNumber *string

	/*FilterSubmissionStatus      Find all File resources with a certain submission status      */

	FilterSubmissionStatus *string

	/*FilterSubmissionSubmissionDateFrom      Find all File resources submitted from and including this date/time      */

	FilterSubmissionSubmissionDateFrom *strfmt.DateTime

	/*FilterSubmissionSubmissionDateTo      Find all File resources submitted up to and included this date/time      */

	FilterSubmissionSubmissionDateTo *strfmt.DateTime

	/*PageNumber      Which page to select      */

	PageNumber *string

	/*PageSize      Number of items to select      */

	PageSize *int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client

	transport runtime.ClientTransport
	formats   strfmt.Registry
}

func (o *ListTransactionFilesRequest) FromJson(j string) (*ListTransactionFilesRequest, error) {

	return o, nil
}

func (o *ListTransactionFilesRequest) WithFilterAdmissionAdmissionDateFrom(filterAdmissionAdmissionDateFrom strfmt.DateTime) *ListTransactionFilesRequest {

	o.FilterAdmissionAdmissionDateFrom = &filterAdmissionAdmissionDateFrom

	return o
}

func (o *ListTransactionFilesRequest) WithoutFilterAdmissionAdmissionDateFrom() *ListTransactionFilesRequest {

	o.FilterAdmissionAdmissionDateFrom = nil

	return o
}

func (o *ListTransactionFilesRequest) WithFilterAdmissionAdmissionDateTo(filterAdmissionAdmissionDateTo strfmt.DateTime) *ListTransactionFilesRequest {

	o.FilterAdmissionAdmissionDateTo = &filterAdmissionAdmissionDateTo

	return o
}

func (o *ListTransactionFilesRequest) WithoutFilterAdmissionAdmissionDateTo() *ListTransactionFilesRequest {

	o.FilterAdmissionAdmissionDateTo = nil

	return o
}

func (o *ListTransactionFilesRequest) WithFilterAdmissionStatus(filterAdmissionStatus string) *ListTransactionFilesRequest {

	o.FilterAdmissionStatus = &filterAdmissionStatus

	return o
}

func (o *ListTransactionFilesRequest) WithoutFilterAdmissionStatus() *ListTransactionFilesRequest {

	o.FilterAdmissionStatus = nil

	return o
}

func (o *ListTransactionFilesRequest) WithFilterCreatedOnFrom(filterCreatedOnFrom strfmt.Date) *ListTransactionFilesRequest {

	o.FilterCreatedOnFrom = &filterCreatedOnFrom

	return o
}

func (o *ListTransactionFilesRequest) WithoutFilterCreatedOnFrom() *ListTransactionFilesRequest {

	o.FilterCreatedOnFrom = nil

	return o
}

func (o *ListTransactionFilesRequest) WithFilterCreatedOnTo(filterCreatedOnTo strfmt.Date) *ListTransactionFilesRequest {

	o.FilterCreatedOnTo = &filterCreatedOnTo

	return o
}

func (o *ListTransactionFilesRequest) WithoutFilterCreatedOnTo() *ListTransactionFilesRequest {

	o.FilterCreatedOnTo = nil

	return o
}

func (o *ListTransactionFilesRequest) WithFilterFileFormat(filterFileFormat string) *ListTransactionFilesRequest {

	o.FilterFileFormat = &filterFileFormat

	return o
}

func (o *ListTransactionFilesRequest) WithoutFilterFileFormat() *ListTransactionFilesRequest {

	o.FilterFileFormat = nil

	return o
}

func (o *ListTransactionFilesRequest) WithFilterOrganisationID(filterOrganisationID []strfmt.UUID) *ListTransactionFilesRequest {

	o.FilterOrganisationID = filterOrganisationID

	return o
}

func (o *ListTransactionFilesRequest) WithoutFilterOrganisationID() *ListTransactionFilesRequest {

	o.FilterOrganisationID = nil

	return o
}

func (o *ListTransactionFilesRequest) WithFilterPaymentScheme(filterPaymentScheme string) *ListTransactionFilesRequest {

	o.FilterPaymentScheme = &filterPaymentScheme

	return o
}

func (o *ListTransactionFilesRequest) WithoutFilterPaymentScheme() *ListTransactionFilesRequest {

	o.FilterPaymentScheme = nil

	return o
}

func (o *ListTransactionFilesRequest) WithFilterSubmissionSchemeReferencesClearingID(filterSubmissionSchemeReferencesClearingID string) *ListTransactionFilesRequest {

	o.FilterSubmissionSchemeReferencesClearingID = &filterSubmissionSchemeReferencesClearingID

	return o
}

func (o *ListTransactionFilesRequest) WithoutFilterSubmissionSchemeReferencesClearingID() *ListTransactionFilesRequest {

	o.FilterSubmissionSchemeReferencesClearingID = nil

	return o
}

func (o *ListTransactionFilesRequest) WithFilterSubmissionSchemeReferencesFileIdentifier(filterSubmissionSchemeReferencesFileIdentifier string) *ListTransactionFilesRequest {

	o.FilterSubmissionSchemeReferencesFileIdentifier = &filterSubmissionSchemeReferencesFileIdentifier

	return o
}

func (o *ListTransactionFilesRequest) WithoutFilterSubmissionSchemeReferencesFileIdentifier() *ListTransactionFilesRequest {

	o.FilterSubmissionSchemeReferencesFileIdentifier = nil

	return o
}

func (o *ListTransactionFilesRequest) WithFilterSubmissionSchemeReferencesFileNumber(filterSubmissionSchemeReferencesFileNumber string) *ListTransactionFilesRequest {

	o.FilterSubmissionSchemeReferencesFileNumber = &filterSubmissionSchemeReferencesFileNumber

	return o
}

func (o *ListTransactionFilesRequest) WithoutFilterSubmissionSchemeReferencesFileNumber() *ListTransactionFilesRequest {

	o.FilterSubmissionSchemeReferencesFileNumber = nil

	return o
}

func (o *ListTransactionFilesRequest) WithFilterSubmissionStatus(filterSubmissionStatus string) *ListTransactionFilesRequest {

	o.FilterSubmissionStatus = &filterSubmissionStatus

	return o
}

func (o *ListTransactionFilesRequest) WithoutFilterSubmissionStatus() *ListTransactionFilesRequest {

	o.FilterSubmissionStatus = nil

	return o
}

func (o *ListTransactionFilesRequest) WithFilterSubmissionSubmissionDateFrom(filterSubmissionSubmissionDateFrom strfmt.DateTime) *ListTransactionFilesRequest {

	o.FilterSubmissionSubmissionDateFrom = &filterSubmissionSubmissionDateFrom

	return o
}

func (o *ListTransactionFilesRequest) WithoutFilterSubmissionSubmissionDateFrom() *ListTransactionFilesRequest {

	o.FilterSubmissionSubmissionDateFrom = nil

	return o
}

func (o *ListTransactionFilesRequest) WithFilterSubmissionSubmissionDateTo(filterSubmissionSubmissionDateTo strfmt.DateTime) *ListTransactionFilesRequest {

	o.FilterSubmissionSubmissionDateTo = &filterSubmissionSubmissionDateTo

	return o
}

func (o *ListTransactionFilesRequest) WithoutFilterSubmissionSubmissionDateTo() *ListTransactionFilesRequest {

	o.FilterSubmissionSubmissionDateTo = nil

	return o
}

func (o *ListTransactionFilesRequest) WithPageNumber(pageNumber string) *ListTransactionFilesRequest {

	o.PageNumber = &pageNumber

	return o
}

func (o *ListTransactionFilesRequest) WithoutPageNumber() *ListTransactionFilesRequest {

	o.PageNumber = nil

	return o
}

func (o *ListTransactionFilesRequest) WithPageSize(pageSize int64) *ListTransactionFilesRequest {

	o.PageSize = &pageSize

	return o
}

func (o *ListTransactionFilesRequest) WithoutPageSize() *ListTransactionFilesRequest {

	o.PageSize = nil

	return o
}

// ////////////////
// WithContext adds the context to the list transaction files Request
func (o *ListTransactionFilesRequest) WithContext(ctx context.Context) *ListTransactionFilesRequest {
	o.Context = ctx
	return o
}

// WithHTTPClient adds the HTTPClient to the list transaction files Request
func (o *ListTransactionFilesRequest) WithHTTPClient(client *http.Client) *ListTransactionFilesRequest {
	o.HTTPClient = client
	return o
}

// WriteToRequest writes these Request to a swagger request
func (o *ListTransactionFilesRequest) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.FilterAdmissionAdmissionDateFrom != nil {

		// query param filter[admission.admission_date_from]
		var qrFilterAdmissionAdmissionDateFrom strfmt.DateTime
		if o.FilterAdmissionAdmissionDateFrom != nil {
			qrFilterAdmissionAdmissionDateFrom = *o.FilterAdmissionAdmissionDateFrom
		}
		qFilterAdmissionAdmissionDateFrom := qrFilterAdmissionAdmissionDateFrom.String()
		if qFilterAdmissionAdmissionDateFrom != "" {
			if err := r.SetQueryParam("filter[admission.admission_date_from]", qFilterAdmissionAdmissionDateFrom); err != nil {
				return err
			}
		}

	}

	if o.FilterAdmissionAdmissionDateTo != nil {

		// query param filter[admission.admission_date_to]
		var qrFilterAdmissionAdmissionDateTo strfmt.DateTime
		if o.FilterAdmissionAdmissionDateTo != nil {
			qrFilterAdmissionAdmissionDateTo = *o.FilterAdmissionAdmissionDateTo
		}
		qFilterAdmissionAdmissionDateTo := qrFilterAdmissionAdmissionDateTo.String()
		if qFilterAdmissionAdmissionDateTo != "" {
			if err := r.SetQueryParam("filter[admission.admission_date_to]", qFilterAdmissionAdmissionDateTo); err != nil {
				return err
			}
		}

	}

	if o.FilterAdmissionStatus != nil {

		// query param filter[admission.status]
		var qrFilterAdmissionStatus string
		if o.FilterAdmissionStatus != nil {
			qrFilterAdmissionStatus = *o.FilterAdmissionStatus
		}
		qFilterAdmissionStatus := qrFilterAdmissionStatus
		if qFilterAdmissionStatus != "" {
			if err := r.SetQueryParam("filter[admission.status]", qFilterAdmissionStatus); err != nil {
				return err
			}
		}

	}

	if o.FilterCreatedOnFrom != nil {

		// query param filter[created_on_from]
		var qrFilterCreatedOnFrom strfmt.Date
		if o.FilterCreatedOnFrom != nil {
			qrFilterCreatedOnFrom = *o.FilterCreatedOnFrom
		}
		qFilterCreatedOnFrom := qrFilterCreatedOnFrom.String()
		if qFilterCreatedOnFrom != "" {
			if err := r.SetQueryParam("filter[created_on_from]", qFilterCreatedOnFrom); err != nil {
				return err
			}
		}

	}

	if o.FilterCreatedOnTo != nil {

		// query param filter[created_on_to]
		var qrFilterCreatedOnTo strfmt.Date
		if o.FilterCreatedOnTo != nil {
			qrFilterCreatedOnTo = *o.FilterCreatedOnTo
		}
		qFilterCreatedOnTo := qrFilterCreatedOnTo.String()
		if qFilterCreatedOnTo != "" {
			if err := r.SetQueryParam("filter[created_on_to]", qFilterCreatedOnTo); err != nil {
				return err
			}
		}

	}

	if o.FilterFileFormat != nil {

		// query param filter[file_format]
		var qrFilterFileFormat string
		if o.FilterFileFormat != nil {
			qrFilterFileFormat = *o.FilterFileFormat
		}
		qFilterFileFormat := qrFilterFileFormat
		if qFilterFileFormat != "" {
			if err := r.SetQueryParam("filter[file_format]", qFilterFileFormat); err != nil {
				return err
			}
		}

	}

	var valuesFilterOrganisationID []string
	for _, v := range o.FilterOrganisationID {
		valuesFilterOrganisationID = append(valuesFilterOrganisationID, v.String())
	}

	joinedFilterOrganisationID := swag.JoinByFormat(valuesFilterOrganisationID, "")
	// query array param filter[organisation_id]
	if err := r.SetQueryParam("filter[organisation_id]", joinedFilterOrganisationID...); err != nil {
		return err
	}

	if o.FilterPaymentScheme != nil {

		// query param filter[payment_scheme]
		var qrFilterPaymentScheme string
		if o.FilterPaymentScheme != nil {
			qrFilterPaymentScheme = *o.FilterPaymentScheme
		}
		qFilterPaymentScheme := qrFilterPaymentScheme
		if qFilterPaymentScheme != "" {
			if err := r.SetQueryParam("filter[payment_scheme]", qFilterPaymentScheme); err != nil {
				return err
			}
		}

	}

	if o.FilterSubmissionSchemeReferencesClearingID != nil {

		// query param filter[submission.scheme_references.clearing_id]
		var qrFilterSubmissionSchemeReferencesClearingID string
		if o.FilterSubmissionSchemeReferencesClearingID != nil {
			qrFilterSubmissionSchemeReferencesClearingID = *o.FilterSubmissionSchemeReferencesClearingID
		}
		qFilterSubmissionSchemeReferencesClearingID := qrFilterSubmissionSchemeReferencesClearingID
		if qFilterSubmissionSchemeReferencesClearingID != "" {
			if err := r.SetQueryParam("filter[submission.scheme_references.clearing_id]", qFilterSubmissionSchemeReferencesClearingID); err != nil {
				return err
			}
		}

	}

	if o.FilterSubmissionSchemeReferencesFileIdentifier != nil {

		// query param filter[submission.scheme_references.file_identifier]
		var qrFilterSubmissionSchemeReferencesFileIdentifier string
		if o.FilterSubmissionSchemeReferencesFileIdentifier != nil {
			qrFilterSubmissionSchemeReferencesFileIdentifier = *o.FilterSubmissionSchemeReferencesFileIdentifier
		}
		qFilterSubmissionSchemeReferencesFileIdentifier := qrFilterSubmissionSchemeReferencesFileIdentifier
		if qFilterSubmissionSchemeReferencesFileIdentifier != "" {
			if err := r.SetQueryParam("filter[submission.scheme_references.file_identifier]", qFilterSubmissionSchemeReferencesFileIdentifier); err != nil {
				return err
			}
		}

	}

	if o.FilterSubmissionSchemeReferencesFileNumber != nil {

		// query param filter[submission.scheme_references.file_number]
		var qrFilterSubmissionSchemeReferencesFileNumber string
		if o.FilterSubmissionSchemeReferencesFileNumber != nil {
			qrFilterSubmissionSchemeReferencesFileNumber = *o.FilterSubmissionSchemeReferencesFileNumber
		}
		qFilterSubmissionSchemeReferencesFileNumber := qrFilterSubmissionSchemeReferencesFileNumber
		if qFilterSubmissionSchemeReferencesFileNumber != "" {
			if err := r.SetQueryParam("filter[submission.scheme_references.file_number]", qFilterSubmissionSchemeReferencesFileNumber); err != nil {
				return err
			}
		}

	}

	if o.FilterSubmissionStatus != nil {

		// query param filter[submission.status]
		var qrFilterSubmissionStatus string
		if o.FilterSubmissionStatus != nil {
			qrFilterSubmissionStatus = *o.FilterSubmissionStatus
		}
		qFilterSubmissionStatus := qrFilterSubmissionStatus
		if qFilterSubmissionStatus != "" {
			if err := r.SetQueryParam("filter[submission.status]", qFilterSubmissionStatus); err != nil {
				return err
			}
		}

	}

	if o.FilterSubmissionSubmissionDateFrom != nil {

		// query param filter[submission.submission_date_from]
		var qrFilterSubmissionSubmissionDateFrom strfmt.DateTime
		if o.FilterSubmissionSubmissionDateFrom != nil {
			qrFilterSubmissionSubmissionDateFrom = *o.FilterSubmissionSubmissionDateFrom
		}
		qFilterSubmissionSubmissionDateFrom := qrFilterSubmissionSubmissionDateFrom.String()
		if qFilterSubmissionSubmissionDateFrom != "" {
			if err := r.SetQueryParam("filter[submission.submission_date_from]", qFilterSubmissionSubmissionDateFrom); err != nil {
				return err
			}
		}

	}

	if o.FilterSubmissionSubmissionDateTo != nil {

		// query param filter[submission.submission_date_to]
		var qrFilterSubmissionSubmissionDateTo strfmt.DateTime
		if o.FilterSubmissionSubmissionDateTo != nil {
			qrFilterSubmissionSubmissionDateTo = *o.FilterSubmissionSubmissionDateTo
		}
		qFilterSubmissionSubmissionDateTo := qrFilterSubmissionSubmissionDateTo.String()
		if qFilterSubmissionSubmissionDateTo != "" {
			if err := r.SetQueryParam("filter[submission.submission_date_to]", qFilterSubmissionSubmissionDateTo); err != nil {
				return err
			}
		}

	}

	if o.PageNumber != nil {

		// query param page[number]
		var qrPageNumber string
		if o.PageNumber != nil {
			qrPageNumber = *o.PageNumber
		}
		qPageNumber := qrPageNumber
		if qPageNumber != "" {
			if err := r.SetQueryParam("page[number]", qPageNumber); err != nil {
				return err
			}
		}

	}

	if o.PageSize != nil {

		// query param page[size]
		var qrPageSize int64
		if o.PageSize != nil {
			qrPageSize = *o.PageSize
		}
		qPageSize := swag.FormatInt64(qrPageSize)
		if qPageSize != "" {
			if err := r.SetQueryParam("page[size]", qPageSize); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
