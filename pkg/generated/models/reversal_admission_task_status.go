// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"log"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ReversalAdmissionTaskStatus status of the task
// swagger:model ReversalAdmissionTaskStatus
type ReversalAdmissionTaskStatus string

const (

	// ReversalAdmissionTaskStatusCompleted captures enum value "completed"
	ReversalAdmissionTaskStatusCompleted ReversalAdmissionTaskStatus = "completed"

	// ReversalAdmissionTaskStatusFailed captures enum value "failed"
	ReversalAdmissionTaskStatusFailed ReversalAdmissionTaskStatus = "failed"

	// ReversalAdmissionTaskStatusPending captures enum value "pending"
	ReversalAdmissionTaskStatusPending ReversalAdmissionTaskStatus = "pending"

	// ReversalAdmissionTaskStatusOnHold captures enum value "on_hold"
	ReversalAdmissionTaskStatusOnHold ReversalAdmissionTaskStatus = "on_hold"
)

// for schema
var reversalAdmissionTaskStatusEnum []interface{}

func init() {
	var res []ReversalAdmissionTaskStatus
	if err := json.Unmarshal([]byte(`["completed","failed","pending","on_hold"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		reversalAdmissionTaskStatusEnum = append(reversalAdmissionTaskStatusEnum, v)
	}
}

func (m ReversalAdmissionTaskStatus) validateReversalAdmissionTaskStatusEnum(path, location string, value ReversalAdmissionTaskStatus) error {
	if err := validate.Enum(path, location, value, reversalAdmissionTaskStatusEnum); err != nil {
		return err
	}
	return nil
}

// Validate validates this reversal admission task status
func (m ReversalAdmissionTaskStatus) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateReversalAdmissionTaskStatusEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ReversalAdmissionTaskStatus) Json() string {
	json, err := json.MarshalIndent(m, "  ", "  ")
	if err != nil {
		log.Fatal(err)
	}
	return string(json)
}
