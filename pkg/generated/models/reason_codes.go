// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"log"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// ReasonCodes Valid reason codes for confirmation of payee
// swagger:model ReasonCodes
type ReasonCodes string

const (

	// ReasonCodesANNM captures enum value "ANNM"
	ReasonCodesANNM ReasonCodes = "ANNM"

	// ReasonCodesAC01 captures enum value "AC01"
	ReasonCodesAC01 ReasonCodes = "AC01"

	// ReasonCodesMBAM captures enum value "MBAM"
	ReasonCodesMBAM ReasonCodes = "MBAM"

	// ReasonCodesOPTO captures enum value "OPTO"
	ReasonCodesOPTO ReasonCodes = "OPTO"

	// ReasonCodesACNS captures enum value "ACNS"
	ReasonCodesACNS ReasonCodes = "ACNS"

	// ReasonCodesIVCR captures enum value "IVCR"
	ReasonCodesIVCR ReasonCodes = "IVCR"

	// ReasonCodesBANM captures enum value "BANM"
	ReasonCodesBANM ReasonCodes = "BANM"

	// ReasonCodesPANM captures enum value "PANM"
	ReasonCodesPANM ReasonCodes = "PANM"

	// ReasonCodesBAMM captures enum value "BAMM"
	ReasonCodesBAMM ReasonCodes = "BAMM"

	// ReasonCodesPAMM captures enum value "PAMM"
	ReasonCodesPAMM ReasonCodes = "PAMM"

	// ReasonCodesCASS captures enum value "CASS"
	ReasonCodesCASS ReasonCodes = "CASS"

	// ReasonCodesSCNS captures enum value "SCNS"
	ReasonCodesSCNS ReasonCodes = "SCNS"
)

// for schema
var reasonCodesEnum []interface{}

func init() {
	var res []ReasonCodes
	if err := json.Unmarshal([]byte(`["ANNM","AC01","MBAM","OPTO","ACNS","IVCR","BANM","PANM","BAMM","PAMM","CASS","SCNS"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		reasonCodesEnum = append(reasonCodesEnum, v)
	}
}

func (m ReasonCodes) validateReasonCodesEnum(path, location string, value ReasonCodes) error {
	if err := validate.Enum(path, location, value, reasonCodesEnum); err != nil {
		return err
	}
	return nil
}

// Validate validates this reason codes
func (m ReasonCodes) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateReasonCodesEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ReasonCodes) Json() string {
	json, err := json.MarshalIndent(m, "  ", "  ")
	if err != nil {
		log.Fatal(err)
	}
	return string(json)
}
