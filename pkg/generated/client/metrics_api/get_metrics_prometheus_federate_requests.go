// Code generated by go-swagger; DO NOT EDIT.

package metrics_api

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// Client.GetMetricsPrometheusFederate creates a new GetMetricsPrometheusFederateRequest object
// with the default values initialized.
func (c *Client) GetMetricsPrometheusFederate() *GetMetricsPrometheusFederateRequest {
	var ()
	return &GetMetricsPrometheusFederateRequest{

		Match: make([]string, 0),

		timeout: cr.DefaultTimeout,

		transport: c.transport,
		formats:   c.formats,
	}
}

type GetMetricsPrometheusFederateRequest struct {

	/*Match      See https://prometheus.io/docs/prometheus/latest/querying/basics/#instant-vector-selectors      */

	Match []string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client

	transport runtime.ClientTransport
	formats   strfmt.Registry
}

func (o *GetMetricsPrometheusFederateRequest) FromJson(j string) (*GetMetricsPrometheusFederateRequest, error) {

	return o, nil
}

func (o *GetMetricsPrometheusFederateRequest) WithMatch(match []string) *GetMetricsPrometheusFederateRequest {

	o.Match = match

	return o
}

//////////////////
// WithContext adds the context to the get metrics prometheus federate Request
func (o *GetMetricsPrometheusFederateRequest) WithContext(ctx context.Context) *GetMetricsPrometheusFederateRequest {
	o.Context = ctx
	return o
}

// WithHTTPClient adds the HTTPClient to the get metrics prometheus federate Request
func (o *GetMetricsPrometheusFederateRequest) WithHTTPClient(client *http.Client) *GetMetricsPrometheusFederateRequest {
	o.HTTPClient = client
	return o
}

// WriteToRequest writes these Request to a swagger request
func (o *GetMetricsPrometheusFederateRequest) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	valuesMatch := o.Match

	joinedMatch := swag.JoinByFormat(valuesMatch, "multi")
	// query array param match[]
	if err := r.SetQueryParam("match[]", joinedMatch...); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
