// Code generated by go-swagger; DO NOT EDIT.

package payment_writes

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"github.com/form3tech-oss/go-form3/v7/pkg/generated/models"
)

// Client.PatchReturnAdmissionTask creates a new PatchReturnAdmissionTaskRequest object
// with the default values initialized.
func (c *Client) PatchReturnAdmissionTask() *PatchReturnAdmissionTaskRequest {
	var ()
	return &PatchReturnAdmissionTaskRequest{

		ReturnAdmissionTaskAmendment: models.ReturnAdmissionTaskAmendmentWithDefaults(c.Defaults),

		PaymentID: c.Defaults.GetStrfmtUUID("PatchReturnAdmissionTask", "paymentId"),

		ReturnAdmissionID: c.Defaults.GetStrfmtUUID("PatchReturnAdmissionTask", "returnAdmissionId"),

		ReturnID: c.Defaults.GetStrfmtUUID("PatchReturnAdmissionTask", "returnId"),

		TaskID: c.Defaults.GetStrfmtUUID("PatchReturnAdmissionTask", "taskId"),

		timeout: cr.DefaultTimeout,

		transport: c.transport,
		formats:   c.formats,
	}
}

type PatchReturnAdmissionTaskRequest struct {

	/*ReturnAdmissionTaskPatchRequest*/

	*models.ReturnAdmissionTaskAmendment

	/*PaymentID      Payment ID      */

	PaymentID strfmt.UUID

	/*ReturnAdmissionID      Return Admission ID      */

	ReturnAdmissionID strfmt.UUID

	/*ReturnID      Return ID      */

	ReturnID strfmt.UUID

	/*TaskID      Return Admission Task Id      */

	TaskID strfmt.UUID

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client

	transport runtime.ClientTransport
	formats   strfmt.Registry
}

func (o *PatchReturnAdmissionTaskRequest) FromJson(j string) (*PatchReturnAdmissionTaskRequest, error) {

	var m models.ReturnAdmissionTaskAmendment
	if err := json.Unmarshal([]byte(j), &m); err != nil {
		return nil, fmt.Errorf("could not unmarshal JSON: %w", err)
	}

	o.ReturnAdmissionTaskAmendment = &m

	return o, nil
}

func (o *PatchReturnAdmissionTaskRequest) WithReturnAdmissionTaskPatchRequest(returnAdmissionTaskPatchRequest models.ReturnAdmissionTaskAmendment) *PatchReturnAdmissionTaskRequest {

	o.ReturnAdmissionTaskAmendment = &returnAdmissionTaskPatchRequest

	return o
}

func (o *PatchReturnAdmissionTaskRequest) WithoutReturnAdmissionTaskPatchRequest() *PatchReturnAdmissionTaskRequest {

	o.ReturnAdmissionTaskAmendment = &models.ReturnAdmissionTaskAmendment{}

	return o
}

func (o *PatchReturnAdmissionTaskRequest) WithPaymentID(paymentID strfmt.UUID) *PatchReturnAdmissionTaskRequest {

	o.PaymentID = paymentID

	return o
}

func (o *PatchReturnAdmissionTaskRequest) WithReturnAdmissionID(returnAdmissionID strfmt.UUID) *PatchReturnAdmissionTaskRequest {

	o.ReturnAdmissionID = returnAdmissionID

	return o
}

func (o *PatchReturnAdmissionTaskRequest) WithReturnID(returnID strfmt.UUID) *PatchReturnAdmissionTaskRequest {

	o.ReturnID = returnID

	return o
}

func (o *PatchReturnAdmissionTaskRequest) WithTaskID(taskID strfmt.UUID) *PatchReturnAdmissionTaskRequest {

	o.TaskID = taskID

	return o
}

// ////////////////
// WithContext adds the context to the patch return admission task Request
func (o *PatchReturnAdmissionTaskRequest) WithContext(ctx context.Context) *PatchReturnAdmissionTaskRequest {
	o.Context = ctx
	return o
}

// WithHTTPClient adds the HTTPClient to the patch return admission task Request
func (o *PatchReturnAdmissionTaskRequest) WithHTTPClient(client *http.Client) *PatchReturnAdmissionTaskRequest {
	o.HTTPClient = client
	return o
}

// WriteToRequest writes these Request to a swagger request
func (o *PatchReturnAdmissionTaskRequest) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// ISBODYPARAM
	if o.ReturnAdmissionTaskAmendment != nil {
		if err := r.SetBodyParam(o.ReturnAdmissionTaskAmendment); err != nil {
			return err
		}
	}

	// path param paymentId
	if err := r.SetPathParam("paymentId", o.PaymentID.String()); err != nil {
		return err
	}

	// path param returnAdmissionId
	if err := r.SetPathParam("returnAdmissionId", o.ReturnAdmissionID.String()); err != nil {
		return err
	}

	// path param returnId
	if err := r.SetPathParam("returnId", o.ReturnID.String()); err != nil {
		return err
	}

	// path param taskId
	if err := r.SetPathParam("taskId", o.TaskID.String()); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
