// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"log"

	"github.com/form3tech-oss/go-form3/v7/pkg/client"
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TransactionFileSubmissionShortRelationship transaction file submission short relationship
// swagger:model TransactionFileSubmissionShortRelationship
type TransactionFileSubmissionShortRelationship struct {

	// id
	// Required: true
	// Format: uuid
	ID *strfmt.UUID `json:"id"`

	// type
	// Enum: ["transaction_file_submissions"]
	Type string `json:"type,omitempty"`

	// attributes
	Attributes *TransactionFileSubmissionShortRelationshipAttributes `json:"attributes,omitempty"`
}

func TransactionFileSubmissionShortRelationshipWithDefaults(defaults client.Defaults) *TransactionFileSubmissionShortRelationship {
	return &TransactionFileSubmissionShortRelationship{

		ID: defaults.GetStrfmtUUIDPtr("TransactionFileSubmissionShortRelationship", "id"),

		Type: defaults.GetString("TransactionFileSubmissionShortRelationship", "type"),

		Attributes: TransactionFileSubmissionShortRelationshipAttributesWithDefaults(defaults),
	}
}

func (m *TransactionFileSubmissionShortRelationship) WithID(id strfmt.UUID) *TransactionFileSubmissionShortRelationship {

	m.ID = &id

	return m
}

func (m *TransactionFileSubmissionShortRelationship) WithoutID() *TransactionFileSubmissionShortRelationship {
	m.ID = nil
	return m
}

func (m *TransactionFileSubmissionShortRelationship) WithType(typeVar string) *TransactionFileSubmissionShortRelationship {

	m.Type = typeVar

	return m
}

func (m *TransactionFileSubmissionShortRelationship) WithAttributes(attributes TransactionFileSubmissionShortRelationshipAttributes) *TransactionFileSubmissionShortRelationship {

	m.Attributes = &attributes

	return m
}

func (m *TransactionFileSubmissionShortRelationship) WithoutAttributes() *TransactionFileSubmissionShortRelationship {
	m.Attributes = nil
	return m
}

// Validate validates this transaction file submission short relationship
func (m *TransactionFileSubmissionShortRelationship) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAttributes(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TransactionFileSubmissionShortRelationship) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	if err := validate.FormatOf("id", "body", "uuid", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

var transactionFileSubmissionShortRelationshipTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["transaction_file_submissions"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		transactionFileSubmissionShortRelationshipTypeTypePropEnum = append(transactionFileSubmissionShortRelationshipTypeTypePropEnum, v)
	}
}

const (

	// TransactionFileSubmissionShortRelationshipTypeTransactionFileSubmissions captures enum value "transaction_file_submissions"
	TransactionFileSubmissionShortRelationshipTypeTransactionFileSubmissions string = "transaction_file_submissions"
)

// prop value enum
func (m *TransactionFileSubmissionShortRelationship) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, transactionFileSubmissionShortRelationshipTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *TransactionFileSubmissionShortRelationship) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

func (m *TransactionFileSubmissionShortRelationship) validateAttributes(formats strfmt.Registry) error {

	if swag.IsZero(m.Attributes) { // not required
		return nil
	}

	if m.Attributes != nil {
		if err := m.Attributes.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("attributes")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TransactionFileSubmissionShortRelationship) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TransactionFileSubmissionShortRelationship) UnmarshalBinary(b []byte) error {
	var res TransactionFileSubmissionShortRelationship
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
func (m *TransactionFileSubmissionShortRelationship) Json() string {
	json, err := json.MarshalIndent(m, "  ", "  ")
	if err != nil {
		log.Fatal(err)
	}
	return string(json)
}

// TransactionFileSubmissionShortRelationshipAttributes transaction file submission short relationship attributes
// swagger:model TransactionFileSubmissionShortRelationshipAttributes
type TransactionFileSubmissionShortRelationshipAttributes struct {

	// status
	Status TransactionFileSubmissionStatus `json:"status,omitempty"`
}

func TransactionFileSubmissionShortRelationshipAttributesWithDefaults(defaults client.Defaults) *TransactionFileSubmissionShortRelationshipAttributes {
	return &TransactionFileSubmissionShortRelationshipAttributes{

		// TODO Status: TransactionFileSubmissionStatus,

	}
}

func (m *TransactionFileSubmissionShortRelationshipAttributes) WithStatus(status TransactionFileSubmissionStatus) *TransactionFileSubmissionShortRelationshipAttributes {

	m.Status = status

	return m
}

// Validate validates this transaction file submission short relationship attributes
func (m *TransactionFileSubmissionShortRelationshipAttributes) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TransactionFileSubmissionShortRelationshipAttributes) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	if err := m.Status.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("attributes" + "." + "status")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TransactionFileSubmissionShortRelationshipAttributes) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TransactionFileSubmissionShortRelationshipAttributes) UnmarshalBinary(b []byte) error {
	var res TransactionFileSubmissionShortRelationshipAttributes
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
func (m *TransactionFileSubmissionShortRelationshipAttributes) Json() string {
	json, err := json.MarshalIndent(m, "  ", "  ")
	if err != nil {
		log.Fatal(err)
	}
	return string(json)
}
