// Code generated by go-swagger; DO NOT EDIT.

package payment_writes

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"github.com/form3tech-oss/go-form3/v7/pkg/generated/models"
)

// Client.PatchPaymentAdmissionTask creates a new PatchPaymentAdmissionTaskRequest object
// with the default values initialized.
func (c *Client) PatchPaymentAdmissionTask() *PatchPaymentAdmissionTaskRequest {
	var ()
	return &PatchPaymentAdmissionTaskRequest{

		PaymentAdmissionTaskAmendment: models.PaymentAdmissionTaskAmendmentWithDefaults(c.Defaults),

		AdmissionID: c.Defaults.GetStrfmtUUID("PatchPaymentAdmissionTask", "admissionId"),

		ID: c.Defaults.GetStrfmtUUID("PatchPaymentAdmissionTask", "id"),

		TaskID: c.Defaults.GetStrfmtUUID("PatchPaymentAdmissionTask", "taskId"),

		timeout: cr.DefaultTimeout,

		transport: c.transport,
		formats:   c.formats,
	}
}

type PatchPaymentAdmissionTaskRequest struct {

	/*PaymentAdmissionTaskPatchRequest*/

	*models.PaymentAdmissionTaskAmendment

	/*AdmissionID      Admission Id      */

	AdmissionID strfmt.UUID

	/*ID      Payment Id      */

	ID strfmt.UUID

	/*TaskID      Payment Admission Task Id      */

	TaskID strfmt.UUID

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client

	transport runtime.ClientTransport
	formats   strfmt.Registry
}

func (o *PatchPaymentAdmissionTaskRequest) FromJson(j string) (*PatchPaymentAdmissionTaskRequest, error) {

	var m models.PaymentAdmissionTaskAmendment
	if err := json.Unmarshal([]byte(j), &m); err != nil {
		return nil, fmt.Errorf("could not unmarshal JSON: %w", err)
	}

	o.PaymentAdmissionTaskAmendment = &m

	return o, nil
}

func (o *PatchPaymentAdmissionTaskRequest) WithPaymentAdmissionTaskPatchRequest(paymentAdmissionTaskPatchRequest models.PaymentAdmissionTaskAmendment) *PatchPaymentAdmissionTaskRequest {

	o.PaymentAdmissionTaskAmendment = &paymentAdmissionTaskPatchRequest

	return o
}

func (o *PatchPaymentAdmissionTaskRequest) WithoutPaymentAdmissionTaskPatchRequest() *PatchPaymentAdmissionTaskRequest {

	o.PaymentAdmissionTaskAmendment = &models.PaymentAdmissionTaskAmendment{}

	return o
}

func (o *PatchPaymentAdmissionTaskRequest) WithAdmissionID(admissionID strfmt.UUID) *PatchPaymentAdmissionTaskRequest {

	o.AdmissionID = admissionID

	return o
}

func (o *PatchPaymentAdmissionTaskRequest) WithID(id strfmt.UUID) *PatchPaymentAdmissionTaskRequest {

	o.ID = id

	return o
}

func (o *PatchPaymentAdmissionTaskRequest) WithTaskID(taskID strfmt.UUID) *PatchPaymentAdmissionTaskRequest {

	o.TaskID = taskID

	return o
}

// ////////////////
// WithContext adds the context to the patch payment admission task Request
func (o *PatchPaymentAdmissionTaskRequest) WithContext(ctx context.Context) *PatchPaymentAdmissionTaskRequest {
	o.Context = ctx
	return o
}

// WithHTTPClient adds the HTTPClient to the patch payment admission task Request
func (o *PatchPaymentAdmissionTaskRequest) WithHTTPClient(client *http.Client) *PatchPaymentAdmissionTaskRequest {
	o.HTTPClient = client
	return o
}

// WriteToRequest writes these Request to a swagger request
func (o *PatchPaymentAdmissionTaskRequest) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// ISBODYPARAM
	if o.PaymentAdmissionTaskAmendment != nil {
		if err := r.SetBodyParam(o.PaymentAdmissionTaskAmendment); err != nil {
			return err
		}
	}

	// path param admissionId
	if err := r.SetPathParam("admissionId", o.AdmissionID.String()); err != nil {
		return err
	}

	// path param id
	if err := r.SetPathParam("id", o.ID.String()); err != nil {
		return err
	}

	// path param taskId
	if err := r.SetPathParam("taskId", o.TaskID.String()); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
