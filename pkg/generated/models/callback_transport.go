// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"log"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// CallbackTransport callback transport
// swagger:model CallbackTransport
type CallbackTransport string

const (

	// CallbackTransportQueue captures enum value "queue"
	CallbackTransportQueue CallbackTransport = "queue"

	// CallbackTransportHTTP captures enum value "http"
	CallbackTransportHTTP CallbackTransport = "http"

	// CallbackTransportHTTPAwsPrivate captures enum value "http_aws_private"
	CallbackTransportHTTPAwsPrivate CallbackTransport = "http_aws_private"

	// CallbackTransportHTTPGcpPrivate captures enum value "http_gcp_private"
	CallbackTransportHTTPGcpPrivate CallbackTransport = "http_gcp_private"

	// CallbackTransportHTTPAzurePrivate captures enum value "http_azure_private"
	CallbackTransportHTTPAzurePrivate CallbackTransport = "http_azure_private"
)

// for schema
var callbackTransportEnum []interface{}

func init() {
	var res []CallbackTransport
	if err := json.Unmarshal([]byte(`["queue","http","http_aws_private","http_gcp_private","http_azure_private"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		callbackTransportEnum = append(callbackTransportEnum, v)
	}
}

func (m CallbackTransport) validateCallbackTransportEnum(path, location string, value CallbackTransport) error {
	if err := validate.Enum(path, location, value, callbackTransportEnum); err != nil {
		return err
	}
	return nil
}

// Validate validates this callback transport
func (m CallbackTransport) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateCallbackTransportEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CallbackTransport) Json() string {
	json, err := json.MarshalIndent(m, "  ", "  ")
	if err != nil {
		log.Fatal(err)
	}
	return string(json)
}
