// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"log"

	"github.com/form3tech-oss/go-form3/v6/pkg/client"
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ReturnSubmissionTaskAttributes return submission task attributes
// swagger:model ReturnSubmissionTaskAttributes
type ReturnSubmissionTaskAttributes struct {

	// assignee
	Assignee ReturnSubmissionTaskAssignee `json:"assignee,omitempty"`

	// Identifies the task group the task belongs to
	Group string `json:"group,omitempty"`

	// Key Value map that contains additional data for executing the task.
	Input map[string]interface{} `json:"input,omitempty"`

	// Identifies the return submission task to be executed
	Name string `json:"name,omitempty"`

	// Key Value map that contains the Task result.
	Output map[string]interface{} `json:"output,omitempty"`

	// status
	Status ReturnSubmissionTaskStatus `json:"status,omitempty"`
}

func ReturnSubmissionTaskAttributesWithDefaults(defaults client.Defaults) *ReturnSubmissionTaskAttributes {
	return &ReturnSubmissionTaskAttributes{

		// TODO Assignee: ReturnSubmissionTaskAssignee,

		Group: defaults.GetString("ReturnSubmissionTaskAttributes", "group"),

		Input: defaults.GetMapStringInterface("ReturnSubmissionTaskAttributes", "input"),

		Name: defaults.GetString("ReturnSubmissionTaskAttributes", "name"),

		Output: defaults.GetMapStringInterface("ReturnSubmissionTaskAttributes", "output"),

		// TODO Status: ReturnSubmissionTaskStatus,

	}
}

func (m *ReturnSubmissionTaskAttributes) WithAssignee(assignee ReturnSubmissionTaskAssignee) *ReturnSubmissionTaskAttributes {

	m.Assignee = assignee

	return m
}

func (m *ReturnSubmissionTaskAttributes) WithGroup(group string) *ReturnSubmissionTaskAttributes {

	m.Group = group

	return m
}

func (m *ReturnSubmissionTaskAttributes) WithInput(input map[string]interface{}) *ReturnSubmissionTaskAttributes {

	m.Input = input

	return m
}

func (m *ReturnSubmissionTaskAttributes) WithName(name string) *ReturnSubmissionTaskAttributes {

	m.Name = name

	return m
}

func (m *ReturnSubmissionTaskAttributes) WithOutput(output map[string]interface{}) *ReturnSubmissionTaskAttributes {

	m.Output = output

	return m
}

func (m *ReturnSubmissionTaskAttributes) WithStatus(status ReturnSubmissionTaskStatus) *ReturnSubmissionTaskAttributes {

	m.Status = status

	return m
}

// Validate validates this return submission task attributes
func (m *ReturnSubmissionTaskAttributes) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAssignee(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ReturnSubmissionTaskAttributes) validateAssignee(formats strfmt.Registry) error {

	if swag.IsZero(m.Assignee) { // not required
		return nil
	}

	if err := m.Assignee.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("assignee")
		}
		return err
	}

	return nil
}

func (m *ReturnSubmissionTaskAttributes) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	if err := m.Status.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("status")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ReturnSubmissionTaskAttributes) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ReturnSubmissionTaskAttributes) UnmarshalBinary(b []byte) error {
	var res ReturnSubmissionTaskAttributes
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
func (m *ReturnSubmissionTaskAttributes) Json() string {
	json, err := json.MarshalIndent(m, "  ", "  ")
	if err != nil {
		log.Fatal(err)
	}
	return string(json)
}
