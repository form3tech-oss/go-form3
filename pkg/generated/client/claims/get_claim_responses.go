// Code generated by go-swagger; DO NOT EDIT.

package claims

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/form3tech-oss/go-form3/v7/pkg/generated/models"
)

// GetClaimReader is a Reader for the GetClaim structure.
type GetClaimReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetClaimReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetClaimOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewGetClaimBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewGetClaimNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetClaimOK creates a GetClaimOK with default headers values
func NewGetClaimOK() *GetClaimOK {
	return &GetClaimOK{}
}

/*
GetClaimOK handles this case with default header values.

Claim details
*/
type GetClaimOK struct {

	//Payload

	// isStream: false
	*models.ClaimDetailsResponse
}

// IsSuccess returns true when this get claim o k response has a 2xx status code
func (o *GetClaimOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get claim o k response has a 3xx status code
func (o *GetClaimOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get claim o k response has a 4xx status code
func (o *GetClaimOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get claim o k response has a 5xx status code
func (o *GetClaimOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get claim o k response a status code equal to that given
func (o *GetClaimOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get claim o k response
func (o *GetClaimOK) Code() int {
	return 200
}

func (o *GetClaimOK) Error() string {
	return fmt.Sprintf("[GET /transaction/claims/{id}][%d] getClaimOK", 200)
}

func (o *GetClaimOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.ClaimDetailsResponse = new(models.ClaimDetailsResponse)

	// response payload

	if err := consumer.Consume(response.Body(), o.ClaimDetailsResponse); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetClaimBadRequest creates a GetClaimBadRequest with default headers values
func NewGetClaimBadRequest() *GetClaimBadRequest {
	return &GetClaimBadRequest{}
}

/*
GetClaimBadRequest handles this case with default header values.

Bad Request
*/
type GetClaimBadRequest struct {

	//Payload

	// isStream: false
	*models.APIError
}

// IsSuccess returns true when this get claim bad request response has a 2xx status code
func (o *GetClaimBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get claim bad request response has a 3xx status code
func (o *GetClaimBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get claim bad request response has a 4xx status code
func (o *GetClaimBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get claim bad request response has a 5xx status code
func (o *GetClaimBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get claim bad request response a status code equal to that given
func (o *GetClaimBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get claim bad request response
func (o *GetClaimBadRequest) Code() int {
	return 400
}

func (o *GetClaimBadRequest) Error() string {
	return fmt.Sprintf("[GET /transaction/claims/{id}][%d] getClaimBadRequest", 400)
}

func (o *GetClaimBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.APIError = new(models.APIError)

	// response payload

	if err := consumer.Consume(response.Body(), o.APIError); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetClaimNotFound creates a GetClaimNotFound with default headers values
func NewGetClaimNotFound() *GetClaimNotFound {
	return &GetClaimNotFound{}
}

/*
GetClaimNotFound handles this case with default header values.

Not Found
*/
type GetClaimNotFound struct {

	//Payload

	// isStream: false
	*models.APIError
}

// IsSuccess returns true when this get claim not found response has a 2xx status code
func (o *GetClaimNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get claim not found response has a 3xx status code
func (o *GetClaimNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get claim not found response has a 4xx status code
func (o *GetClaimNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get claim not found response has a 5xx status code
func (o *GetClaimNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get claim not found response a status code equal to that given
func (o *GetClaimNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get claim not found response
func (o *GetClaimNotFound) Code() int {
	return 404
}

func (o *GetClaimNotFound) Error() string {
	return fmt.Sprintf("[GET /transaction/claims/{id}][%d] getClaimNotFound", 404)
}

func (o *GetClaimNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.APIError = new(models.APIError)

	// response payload

	if err := consumer.Consume(response.Body(), o.APIError); err != nil && err != io.EOF {
		return err
	}

	return nil
}
