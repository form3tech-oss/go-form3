// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"log"

	"github.com/form3tech-oss/go-form3/pkg/client"
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PartyAttributes party attributes
// swagger:model PartyAttributes
type PartyAttributes struct {

	// address
	Address []string `json:"address"`

	// city
	City string `json:"city,omitempty"`

	// contact method
	// Enum: [email]
	ContactMethod string `json:"contact_method,omitempty"`

	// country
	Country string `json:"country,omitempty"`

	// country subdivision
	CountrySubdivision string `json:"country_subdivision,omitempty"`

	// districtname
	Districtname string `json:"districtname,omitempty"`

	// email address
	EmailAddress string `json:"email_address,omitempty"`

	// identification
	Identification []string `json:"identification"`

	// identification type
	// Enum: [CompanyRegNumber]
	IdentificationType string `json:"identification_type,omitempty"`

	// name
	Name []string `json:"name"`

	// party type
	// Enum: [company]
	PartyType string `json:"party_type,omitempty"`

	// postcode
	Postcode string `json:"postcode,omitempty"`

	// telephone number
	TelephoneNumber string `json:"telephone_number,omitempty"`
}

func PartyAttributesWithDefaults(defaults client.Defaults) *PartyAttributes {
	return &PartyAttributes{

		Address: make([]string, 0),

		City: defaults.GetString("PartyAttributes", "city"),

		ContactMethod: defaults.GetString("PartyAttributes", "contact_method"),

		Country: defaults.GetString("PartyAttributes", "country"),

		CountrySubdivision: defaults.GetString("PartyAttributes", "country_subdivision"),

		Districtname: defaults.GetString("PartyAttributes", "districtname"),

		EmailAddress: defaults.GetString("PartyAttributes", "email_address"),

		Identification: make([]string, 0),

		IdentificationType: defaults.GetString("PartyAttributes", "identification_type"),

		Name: make([]string, 0),

		PartyType: defaults.GetString("PartyAttributes", "party_type"),

		Postcode: defaults.GetString("PartyAttributes", "postcode"),

		TelephoneNumber: defaults.GetString("PartyAttributes", "telephone_number"),
	}
}

func (m *PartyAttributes) WithAddress(address []string) *PartyAttributes {

	m.Address = address

	return m
}

func (m *PartyAttributes) WithCity(city string) *PartyAttributes {

	m.City = city

	return m
}

func (m *PartyAttributes) WithContactMethod(contactMethod string) *PartyAttributes {

	m.ContactMethod = contactMethod

	return m
}

func (m *PartyAttributes) WithCountry(country string) *PartyAttributes {

	m.Country = country

	return m
}

func (m *PartyAttributes) WithCountrySubdivision(countrySubdivision string) *PartyAttributes {

	m.CountrySubdivision = countrySubdivision

	return m
}

func (m *PartyAttributes) WithDistrictname(districtname string) *PartyAttributes {

	m.Districtname = districtname

	return m
}

func (m *PartyAttributes) WithEmailAddress(emailAddress string) *PartyAttributes {

	m.EmailAddress = emailAddress

	return m
}

func (m *PartyAttributes) WithIdentification(identification []string) *PartyAttributes {

	m.Identification = identification

	return m
}

func (m *PartyAttributes) WithIdentificationType(identificationType string) *PartyAttributes {

	m.IdentificationType = identificationType

	return m
}

func (m *PartyAttributes) WithName(name []string) *PartyAttributes {

	m.Name = name

	return m
}

func (m *PartyAttributes) WithPartyType(partyType string) *PartyAttributes {

	m.PartyType = partyType

	return m
}

func (m *PartyAttributes) WithPostcode(postcode string) *PartyAttributes {

	m.Postcode = postcode

	return m
}

func (m *PartyAttributes) WithTelephoneNumber(telephoneNumber string) *PartyAttributes {

	m.TelephoneNumber = telephoneNumber

	return m
}

// Validate validates this party attributes
func (m *PartyAttributes) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateContactMethod(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIdentificationType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePartyType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var partyAttributesTypeContactMethodPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["email"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		partyAttributesTypeContactMethodPropEnum = append(partyAttributesTypeContactMethodPropEnum, v)
	}
}

const (

	// PartyAttributesContactMethodEmail captures enum value "email"
	PartyAttributesContactMethodEmail string = "email"
)

// prop value enum
func (m *PartyAttributes) validateContactMethodEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, partyAttributesTypeContactMethodPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *PartyAttributes) validateContactMethod(formats strfmt.Registry) error {

	if swag.IsZero(m.ContactMethod) { // not required
		return nil
	}

	// value enum
	if err := m.validateContactMethodEnum("contact_method", "body", m.ContactMethod); err != nil {
		return err
	}

	return nil
}

var partyAttributesTypeIdentificationTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["CompanyRegNumber"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		partyAttributesTypeIdentificationTypePropEnum = append(partyAttributesTypeIdentificationTypePropEnum, v)
	}
}

const (

	// PartyAttributesIdentificationTypeCompanyRegNumber captures enum value "CompanyRegNumber"
	PartyAttributesIdentificationTypeCompanyRegNumber string = "CompanyRegNumber"
)

// prop value enum
func (m *PartyAttributes) validateIdentificationTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, partyAttributesTypeIdentificationTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *PartyAttributes) validateIdentificationType(formats strfmt.Registry) error {

	if swag.IsZero(m.IdentificationType) { // not required
		return nil
	}

	// value enum
	if err := m.validateIdentificationTypeEnum("identification_type", "body", m.IdentificationType); err != nil {
		return err
	}

	return nil
}

var partyAttributesTypePartyTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["company"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		partyAttributesTypePartyTypePropEnum = append(partyAttributesTypePartyTypePropEnum, v)
	}
}

const (

	// PartyAttributesPartyTypeCompany captures enum value "company"
	PartyAttributesPartyTypeCompany string = "company"
)

// prop value enum
func (m *PartyAttributes) validatePartyTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, partyAttributesTypePartyTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *PartyAttributes) validatePartyType(formats strfmt.Registry) error {

	if swag.IsZero(m.PartyType) { // not required
		return nil
	}

	// value enum
	if err := m.validatePartyTypeEnum("party_type", "body", m.PartyType); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PartyAttributes) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PartyAttributes) UnmarshalBinary(b []byte) error {
	var res PartyAttributes
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
func (m *PartyAttributes) Json() string {
	json, err := json.MarshalIndent(m, "  ", "  ")
	if err != nil {
		log.Fatal(err)
	}
	return string(json)
}
