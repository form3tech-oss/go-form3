// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"log"

	"github.com/form3tech-oss/go-form3/v6/pkg/client"
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// TransactionFileSubmissionRelationships transaction file submission relationships
// swagger:model TransactionFileSubmissionRelationships
type TransactionFileSubmissionRelationships struct {

	// transaction file
	TransactionFile *ThinRelationships `json:"transaction_file,omitempty"`
}

func TransactionFileSubmissionRelationshipsWithDefaults(defaults client.Defaults) *TransactionFileSubmissionRelationships {
	return &TransactionFileSubmissionRelationships{

		TransactionFile: ThinRelationshipsWithDefaults(defaults),
	}
}

func (m *TransactionFileSubmissionRelationships) WithTransactionFile(transactionFile ThinRelationships) *TransactionFileSubmissionRelationships {

	m.TransactionFile = &transactionFile

	return m
}

func (m *TransactionFileSubmissionRelationships) WithoutTransactionFile() *TransactionFileSubmissionRelationships {
	m.TransactionFile = nil
	return m
}

// Validate validates this transaction file submission relationships
func (m *TransactionFileSubmissionRelationships) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateTransactionFile(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TransactionFileSubmissionRelationships) validateTransactionFile(formats strfmt.Registry) error {

	if swag.IsZero(m.TransactionFile) { // not required
		return nil
	}

	if m.TransactionFile != nil {
		if err := m.TransactionFile.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("transaction_file")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TransactionFileSubmissionRelationships) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TransactionFileSubmissionRelationships) UnmarshalBinary(b []byte) error {
	var res TransactionFileSubmissionRelationships
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
func (m *TransactionFileSubmissionRelationships) Json() string {
	json, err := json.MarshalIndent(m, "  ", "  ")
	if err != nil {
		log.Fatal(err)
	}
	return string(json)
}
