// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"log"

	"github.com/form3tech-oss/go-form3/v4/pkg/client"
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SubscriptionDeliveryError subscription delivery error
// swagger:model SubscriptionDeliveryError
type SubscriptionDeliveryError struct {

	// attributes
	Attributes SubscriptionDeliveryErrorAttributes `json:"attributes,omitempty"`

	// created on
	// Read Only: true
	// Format: date-time
	CreatedOn strfmt.DateTime `json:"created_on,omitempty"`

	// id
	// Read Only: true
	// Format: uuid
	ID strfmt.UUID `json:"id,omitempty"`

	// modified on
	// Read Only: true
	// Format: date-time
	ModifiedOn strfmt.DateTime `json:"modified_on,omitempty"`

	// organisation id
	// Read Only: true
	// Format: uuid
	OrganisationID strfmt.UUID `json:"organisation_id,omitempty"`

	// relationships
	Relationships SubscriptionDeliveryErrorRelationships `json:"relationships,omitempty"`

	// type
	// Read Only: true
	Type SubscriptionDeliveryErrorType `json:"type,omitempty"`

	// version
	// Read Only: true
	// Minimum: 0
	Version int64 `json:"version"`
}

func SubscriptionDeliveryErrorWithDefaults(defaults client.Defaults) *SubscriptionDeliveryError {
	return &SubscriptionDeliveryError{

		Attributes: *SubscriptionDeliveryErrorAttributesWithDefaults(defaults),

		CreatedOn: defaults.GetStrfmtDateTime("SubscriptionDeliveryError", "created_on"),

		ID: defaults.GetStrfmtUUID("SubscriptionDeliveryError", "id"),

		ModifiedOn: defaults.GetStrfmtDateTime("SubscriptionDeliveryError", "modified_on"),

		OrganisationID: defaults.GetStrfmtUUID("SubscriptionDeliveryError", "organisation_id"),

		Relationships: *SubscriptionDeliveryErrorRelationshipsWithDefaults(defaults),

		// TODO Type: SubscriptionDeliveryErrorType,

		Version: defaults.GetInt64("SubscriptionDeliveryError", "version"),
	}
}

func (m *SubscriptionDeliveryError) WithAttributes(attributes *SubscriptionDeliveryErrorAttributes) *SubscriptionDeliveryError {

	m.Attributes = *attributes

	return m
}

func (m *SubscriptionDeliveryError) WithCreatedOn(createdOn strfmt.DateTime) *SubscriptionDeliveryError {

	m.CreatedOn = createdOn

	return m
}

func (m *SubscriptionDeliveryError) WithID(id strfmt.UUID) *SubscriptionDeliveryError {

	m.ID = id

	return m
}

func (m *SubscriptionDeliveryError) WithModifiedOn(modifiedOn strfmt.DateTime) *SubscriptionDeliveryError {

	m.ModifiedOn = modifiedOn

	return m
}

func (m *SubscriptionDeliveryError) WithOrganisationID(organisationID strfmt.UUID) *SubscriptionDeliveryError {

	m.OrganisationID = organisationID

	return m
}

func (m *SubscriptionDeliveryError) WithRelationships(relationships *SubscriptionDeliveryErrorRelationships) *SubscriptionDeliveryError {

	m.Relationships = *relationships

	return m
}

func (m *SubscriptionDeliveryError) WithType(typeVar SubscriptionDeliveryErrorType) *SubscriptionDeliveryError {

	m.Type = typeVar

	return m
}

func (m *SubscriptionDeliveryError) WithVersion(version int64) *SubscriptionDeliveryError {

	m.Version = version

	return m
}

// Validate validates this subscription delivery error
func (m *SubscriptionDeliveryError) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAttributes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedOn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateModifiedOn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrganisationID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRelationships(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVersion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SubscriptionDeliveryError) validateAttributes(formats strfmt.Registry) error {

	if swag.IsZero(m.Attributes) { // not required
		return nil
	}

	if err := m.Attributes.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("attributes")
		}
		return err
	}

	return nil
}

func (m *SubscriptionDeliveryError) validateCreatedOn(formats strfmt.Registry) error {

	if swag.IsZero(m.CreatedOn) { // not required
		return nil
	}

	if err := validate.FormatOf("created_on", "body", "date-time", m.CreatedOn.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *SubscriptionDeliveryError) validateID(formats strfmt.Registry) error {

	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.FormatOf("id", "body", "uuid", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *SubscriptionDeliveryError) validateModifiedOn(formats strfmt.Registry) error {

	if swag.IsZero(m.ModifiedOn) { // not required
		return nil
	}

	if err := validate.FormatOf("modified_on", "body", "date-time", m.ModifiedOn.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *SubscriptionDeliveryError) validateOrganisationID(formats strfmt.Registry) error {

	if swag.IsZero(m.OrganisationID) { // not required
		return nil
	}

	if err := validate.FormatOf("organisation_id", "body", "uuid", m.OrganisationID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *SubscriptionDeliveryError) validateRelationships(formats strfmt.Registry) error {

	if swag.IsZero(m.Relationships) { // not required
		return nil
	}

	if err := m.Relationships.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("relationships")
		}
		return err
	}

	return nil
}

func (m *SubscriptionDeliveryError) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	if err := m.Type.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("type")
		}
		return err
	}

	return nil
}

func (m *SubscriptionDeliveryError) validateVersion(formats strfmt.Registry) error {

	if swag.IsZero(m.Version) { // not required
		return nil
	}

	if err := validate.MinimumInt("version", "body", int64(m.Version), 0, false); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SubscriptionDeliveryError) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SubscriptionDeliveryError) UnmarshalBinary(b []byte) error {
	var res SubscriptionDeliveryError
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
func (m *SubscriptionDeliveryError) Json() string {
	json, err := json.MarshalIndent(m, "  ", "  ")
	if err != nil {
		log.Fatal(err)
	}
	return string(json)
}

// SubscriptionDeliveryErrorAttributes subscription delivery error attributes
// swagger:model SubscriptionDeliveryErrorAttributes
type SubscriptionDeliveryErrorAttributes struct {

	// error category
	// Read Only: true
	ErrorCategory string `json:"error_category,omitempty"`

	// error message
	// Read Only: true
	ErrorMessage string `json:"error_message,omitempty"`

	// occurred on
	// Read Only: true
	// Format: date-time
	OccurredOn strfmt.DateTime `json:"occurred_on,omitempty"`
}

func SubscriptionDeliveryErrorAttributesWithDefaults(defaults client.Defaults) *SubscriptionDeliveryErrorAttributes {
	return &SubscriptionDeliveryErrorAttributes{

		ErrorCategory: defaults.GetString("SubscriptionDeliveryErrorAttributes", "error_category"),

		ErrorMessage: defaults.GetString("SubscriptionDeliveryErrorAttributes", "error_message"),

		OccurredOn: defaults.GetStrfmtDateTime("SubscriptionDeliveryErrorAttributes", "occurred_on"),
	}
}

func (m *SubscriptionDeliveryErrorAttributes) WithErrorCategory(errorCategory string) *SubscriptionDeliveryErrorAttributes {

	m.ErrorCategory = errorCategory

	return m
}

func (m *SubscriptionDeliveryErrorAttributes) WithErrorMessage(errorMessage string) *SubscriptionDeliveryErrorAttributes {

	m.ErrorMessage = errorMessage

	return m
}

func (m *SubscriptionDeliveryErrorAttributes) WithOccurredOn(occurredOn strfmt.DateTime) *SubscriptionDeliveryErrorAttributes {

	m.OccurredOn = occurredOn

	return m
}

// Validate validates this subscription delivery error attributes
func (m *SubscriptionDeliveryErrorAttributes) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateOccurredOn(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SubscriptionDeliveryErrorAttributes) validateOccurredOn(formats strfmt.Registry) error {

	if swag.IsZero(m.OccurredOn) { // not required
		return nil
	}

	if err := validate.FormatOf("attributes"+"."+"occurred_on", "body", "date-time", m.OccurredOn.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SubscriptionDeliveryErrorAttributes) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SubscriptionDeliveryErrorAttributes) UnmarshalBinary(b []byte) error {
	var res SubscriptionDeliveryErrorAttributes
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
func (m *SubscriptionDeliveryErrorAttributes) Json() string {
	json, err := json.MarshalIndent(m, "  ", "  ")
	if err != nil {
		log.Fatal(err)
	}
	return string(json)
}

// SubscriptionDeliveryErrorRelationships subscription delivery error relationships
// swagger:model SubscriptionDeliveryErrorRelationships
type SubscriptionDeliveryErrorRelationships struct {

	// subscription
	Subscription SubscriptionRelationship `json:"subscription,omitempty"`
}

func SubscriptionDeliveryErrorRelationshipsWithDefaults(defaults client.Defaults) *SubscriptionDeliveryErrorRelationships {
	return &SubscriptionDeliveryErrorRelationships{

		Subscription: *SubscriptionRelationshipWithDefaults(defaults),
	}
}

func (m *SubscriptionDeliveryErrorRelationships) WithSubscription(subscription *SubscriptionRelationship) *SubscriptionDeliveryErrorRelationships {

	m.Subscription = *subscription

	return m
}

// Validate validates this subscription delivery error relationships
func (m *SubscriptionDeliveryErrorRelationships) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSubscription(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SubscriptionDeliveryErrorRelationships) validateSubscription(formats strfmt.Registry) error {

	if swag.IsZero(m.Subscription) { // not required
		return nil
	}

	if err := m.Subscription.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("relationships" + "." + "subscription")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SubscriptionDeliveryErrorRelationships) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SubscriptionDeliveryErrorRelationships) UnmarshalBinary(b []byte) error {
	var res SubscriptionDeliveryErrorRelationships
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
func (m *SubscriptionDeliveryErrorRelationships) Json() string {
	json, err := json.MarshalIndent(m, "  ", "  ")
	if err != nil {
		log.Fatal(err)
	}
	return string(json)
}
