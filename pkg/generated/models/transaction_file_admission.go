// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"log"

	"github.com/form3tech-oss/go-form3/v7/pkg/client"
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TransactionFileAdmission transaction file admission
// swagger:model TransactionFileAdmission
type TransactionFileAdmission struct {

	// id
	// Required: true
	// Format: uuid
	ID *strfmt.UUID `json:"id"`

	// type
	// Enum: ["transaction_file_admissions"]
	Type string `json:"type,omitempty"`

	// Unique ID of the organisation this resource is created by
	// Required: true
	// Format: uuid
	OrganisationID *strfmt.UUID `json:"organisation_id"`

	// Version number
	// Minimum: 0
	Version *int64 `json:"version,omitempty"`

	// created on
	// Read Only: true
	// Format: date-time
	CreatedOn strfmt.DateTime `json:"created_on,omitempty"`

	// modified on
	// Read Only: true
	// Format: date-time
	ModifiedOn strfmt.DateTime `json:"modified_on,omitempty"`

	// attributes
	Attributes *TransactionFileAdmissionAttributes `json:"attributes,omitempty"`

	// relationships
	// Read Only: true
	Relationships *TransactionFileAdmissionRelationships `json:"relationships,omitempty"`
}

func TransactionFileAdmissionWithDefaults(defaults client.Defaults) *TransactionFileAdmission {
	return &TransactionFileAdmission{

		ID: defaults.GetStrfmtUUIDPtr("TransactionFileAdmission", "id"),

		Type: defaults.GetString("TransactionFileAdmission", "type"),

		OrganisationID: defaults.GetStrfmtUUIDPtr("TransactionFileAdmission", "organisation_id"),

		Version: defaults.GetInt64Ptr("TransactionFileAdmission", "version"),

		CreatedOn: defaults.GetStrfmtDateTime("TransactionFileAdmission", "created_on"),

		ModifiedOn: defaults.GetStrfmtDateTime("TransactionFileAdmission", "modified_on"),

		Attributes: TransactionFileAdmissionAttributesWithDefaults(defaults),

		Relationships: TransactionFileAdmissionRelationshipsWithDefaults(defaults),
	}
}

func (m *TransactionFileAdmission) WithID(id strfmt.UUID) *TransactionFileAdmission {

	m.ID = &id

	return m
}

func (m *TransactionFileAdmission) WithoutID() *TransactionFileAdmission {
	m.ID = nil
	return m
}

func (m *TransactionFileAdmission) WithType(typeVar string) *TransactionFileAdmission {

	m.Type = typeVar

	return m
}

func (m *TransactionFileAdmission) WithOrganisationID(organisationID strfmt.UUID) *TransactionFileAdmission {

	m.OrganisationID = &organisationID

	return m
}

func (m *TransactionFileAdmission) WithoutOrganisationID() *TransactionFileAdmission {
	m.OrganisationID = nil
	return m
}

func (m *TransactionFileAdmission) WithVersion(version int64) *TransactionFileAdmission {

	m.Version = &version

	return m
}

func (m *TransactionFileAdmission) WithoutVersion() *TransactionFileAdmission {
	m.Version = nil
	return m
}

func (m *TransactionFileAdmission) WithCreatedOn(createdOn strfmt.DateTime) *TransactionFileAdmission {

	m.CreatedOn = createdOn

	return m
}

func (m *TransactionFileAdmission) WithModifiedOn(modifiedOn strfmt.DateTime) *TransactionFileAdmission {

	m.ModifiedOn = modifiedOn

	return m
}

func (m *TransactionFileAdmission) WithAttributes(attributes TransactionFileAdmissionAttributes) *TransactionFileAdmission {

	m.Attributes = &attributes

	return m
}

func (m *TransactionFileAdmission) WithoutAttributes() *TransactionFileAdmission {
	m.Attributes = nil
	return m
}

func (m *TransactionFileAdmission) WithRelationships(relationships TransactionFileAdmissionRelationships) *TransactionFileAdmission {

	m.Relationships = &relationships

	return m
}

func (m *TransactionFileAdmission) WithoutRelationships() *TransactionFileAdmission {
	m.Relationships = nil
	return m
}

// Validate validates this transaction file admission
func (m *TransactionFileAdmission) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrganisationID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVersion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedOn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateModifiedOn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAttributes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRelationships(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TransactionFileAdmission) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	if err := validate.FormatOf("id", "body", "uuid", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

var transactionFileAdmissionTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["transaction_file_admissions"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		transactionFileAdmissionTypeTypePropEnum = append(transactionFileAdmissionTypeTypePropEnum, v)
	}
}

const (

	// TransactionFileAdmissionTypeTransactionFileAdmissions captures enum value "transaction_file_admissions"
	TransactionFileAdmissionTypeTransactionFileAdmissions string = "transaction_file_admissions"
)

// prop value enum
func (m *TransactionFileAdmission) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, transactionFileAdmissionTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *TransactionFileAdmission) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

func (m *TransactionFileAdmission) validateOrganisationID(formats strfmt.Registry) error {

	if err := validate.Required("organisation_id", "body", m.OrganisationID); err != nil {
		return err
	}

	if err := validate.FormatOf("organisation_id", "body", "uuid", m.OrganisationID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *TransactionFileAdmission) validateVersion(formats strfmt.Registry) error {

	if swag.IsZero(m.Version) { // not required
		return nil
	}

	if err := validate.MinimumInt("version", "body", int64(*m.Version), 0, false); err != nil {
		return err
	}

	return nil
}

func (m *TransactionFileAdmission) validateCreatedOn(formats strfmt.Registry) error {

	if swag.IsZero(m.CreatedOn) { // not required
		return nil
	}

	if err := validate.FormatOf("created_on", "body", "date-time", m.CreatedOn.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *TransactionFileAdmission) validateModifiedOn(formats strfmt.Registry) error {

	if swag.IsZero(m.ModifiedOn) { // not required
		return nil
	}

	if err := validate.FormatOf("modified_on", "body", "date-time", m.ModifiedOn.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *TransactionFileAdmission) validateAttributes(formats strfmt.Registry) error {

	if swag.IsZero(m.Attributes) { // not required
		return nil
	}

	if m.Attributes != nil {
		if err := m.Attributes.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("attributes")
			}
			return err
		}
	}

	return nil
}

func (m *TransactionFileAdmission) validateRelationships(formats strfmt.Registry) error {

	if swag.IsZero(m.Relationships) { // not required
		return nil
	}

	if m.Relationships != nil {
		if err := m.Relationships.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("relationships")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TransactionFileAdmission) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TransactionFileAdmission) UnmarshalBinary(b []byte) error {
	var res TransactionFileAdmission
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
func (m *TransactionFileAdmission) Json() string {
	json, err := json.MarshalIndent(m, "  ", "  ")
	if err != nil {
		log.Fatal(err)
	}
	return string(json)
}

// TransactionFileAdmissionAttributes transaction file admission attributes
// swagger:model TransactionFileAdmissionAttributes
type TransactionFileAdmissionAttributes struct {

	// Time when the Form3 system begins processing of the admission
	// Read Only: true
	// Format: date-time
	AdmissionDatetime strfmt.DateTime `json:"admission_datetime,omitempty"`

	// status
	Status TransactionFileAdmissionStatus `json:"status,omitempty"`

	// Plain-text description of the status attribute
	// Read Only: true
	StatusReason string `json:"status_reason,omitempty"`

	// Time the admission request was received by Form3. Used to compute the total transaction time
	// Read Only: true
	// Format: date-time
	TransactionStartDatetime strfmt.DateTime `json:"transaction_start_datetime,omitempty"`
}

func TransactionFileAdmissionAttributesWithDefaults(defaults client.Defaults) *TransactionFileAdmissionAttributes {
	return &TransactionFileAdmissionAttributes{

		AdmissionDatetime: defaults.GetStrfmtDateTime("TransactionFileAdmissionAttributes", "admission_datetime"),

		// TODO Status: TransactionFileAdmissionStatus,

		StatusReason: defaults.GetString("TransactionFileAdmissionAttributes", "status_reason"),

		TransactionStartDatetime: defaults.GetStrfmtDateTime("TransactionFileAdmissionAttributes", "transaction_start_datetime"),
	}
}

func (m *TransactionFileAdmissionAttributes) WithAdmissionDatetime(admissionDatetime strfmt.DateTime) *TransactionFileAdmissionAttributes {

	m.AdmissionDatetime = admissionDatetime

	return m
}

func (m *TransactionFileAdmissionAttributes) WithStatus(status TransactionFileAdmissionStatus) *TransactionFileAdmissionAttributes {

	m.Status = status

	return m
}

func (m *TransactionFileAdmissionAttributes) WithStatusReason(statusReason string) *TransactionFileAdmissionAttributes {

	m.StatusReason = statusReason

	return m
}

func (m *TransactionFileAdmissionAttributes) WithTransactionStartDatetime(transactionStartDatetime strfmt.DateTime) *TransactionFileAdmissionAttributes {

	m.TransactionStartDatetime = transactionStartDatetime

	return m
}

// Validate validates this transaction file admission attributes
func (m *TransactionFileAdmissionAttributes) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAdmissionDatetime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTransactionStartDatetime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TransactionFileAdmissionAttributes) validateAdmissionDatetime(formats strfmt.Registry) error {

	if swag.IsZero(m.AdmissionDatetime) { // not required
		return nil
	}

	if err := validate.FormatOf("attributes"+"."+"admission_datetime", "body", "date-time", m.AdmissionDatetime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *TransactionFileAdmissionAttributes) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	if err := m.Status.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("attributes" + "." + "status")
		}
		return err
	}

	return nil
}

func (m *TransactionFileAdmissionAttributes) validateTransactionStartDatetime(formats strfmt.Registry) error {

	if swag.IsZero(m.TransactionStartDatetime) { // not required
		return nil
	}

	if err := validate.FormatOf("attributes"+"."+"transaction_start_datetime", "body", "date-time", m.TransactionStartDatetime.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TransactionFileAdmissionAttributes) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TransactionFileAdmissionAttributes) UnmarshalBinary(b []byte) error {
	var res TransactionFileAdmissionAttributes
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
func (m *TransactionFileAdmissionAttributes) Json() string {
	json, err := json.MarshalIndent(m, "  ", "  ")
	if err != nil {
		log.Fatal(err)
	}
	return string(json)
}
