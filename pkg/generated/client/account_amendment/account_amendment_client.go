// Code generated by go-swagger; DO NOT EDIT.

// :Form3: Testing!

package account_amendment

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/form3tech-oss/go-form3/v2/pkg/client"
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new account amendment API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry, defaults client.Defaults) *Client {
	return &Client{transport: transport, formats: formats, Defaults: defaults}
}

/*
Client for account amendment API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
	Defaults  client.Defaults
}

// range of operations

/*
create account amendment API
*/
func (a *CreateAccountAmendmentRequest) Do() (*CreateAccountAmendmentCreated, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CreateAccountAmendment",
		Method:             "POST",
		PathPattern:        "/organisation/accountamendments",
		ProducesMediaTypes: []string{"application/json", "application/vnd.api+json"},
		ConsumesMediaTypes: []string{"application/json", "application/vnd.api+json"},
		Schemes:            []string{"https"},
		Params:             a,
		Reader:             &CreateAccountAmendmentReader{formats: a.formats},
		//AuthInfo: authInfo,
		Context: a.Context,
		Client:  a.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateAccountAmendmentCreated), nil

}

func (a *CreateAccountAmendmentRequest) MustDo() *CreateAccountAmendmentCreated {
	r0, err := a.Do()
	if err != nil {
		panic(err)
	}
	return r0
}

/*
create account amendment submission API
*/
func (a *CreateAccountAmendmentSubmissionRequest) Do() (*CreateAccountAmendmentSubmissionCreated, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CreateAccountAmendmentSubmission",
		Method:             "POST",
		PathPattern:        "/organisation/accountamendments/{id}/submissions",
		ProducesMediaTypes: []string{"application/json", "application/vnd.api+json"},
		ConsumesMediaTypes: []string{"application/json", "application/vnd.api+json"},
		Schemes:            []string{"https"},
		Params:             a,
		Reader:             &CreateAccountAmendmentSubmissionReader{formats: a.formats},
		//AuthInfo: authInfo,
		Context: a.Context,
		Client:  a.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateAccountAmendmentSubmissionCreated), nil

}

func (a *CreateAccountAmendmentSubmissionRequest) MustDo() *CreateAccountAmendmentSubmissionCreated {
	r0, err := a.Do()
	if err != nil {
		panic(err)
	}
	return r0
}

/*
get account amendment API
*/
func (a *GetAccountAmendmentRequest) Do() (*GetAccountAmendmentOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAccountAmendment",
		Method:             "GET",
		PathPattern:        "/organisation/accountamendments/{id}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.api+json"},
		ConsumesMediaTypes: []string{"application/json", "application/vnd.api+json"},
		Schemes:            []string{"https"},
		Params:             a,
		Reader:             &GetAccountAmendmentReader{formats: a.formats},
		//AuthInfo: authInfo,
		Context: a.Context,
		Client:  a.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAccountAmendmentOK), nil

}

func (a *GetAccountAmendmentRequest) MustDo() *GetAccountAmendmentOK {
	r0, err := a.Do()
	if err != nil {
		panic(err)
	}
	return r0
}

/*
get account amendment submission API
*/
func (a *GetAccountAmendmentSubmissionRequest) Do() (*GetAccountAmendmentSubmissionOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAccountAmendmentSubmission",
		Method:             "GET",
		PathPattern:        "/organisation/accountamendments/{id}/submissions/{submissionId}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.api+json"},
		ConsumesMediaTypes: []string{"application/json", "application/vnd.api+json"},
		Schemes:            []string{"https"},
		Params:             a,
		Reader:             &GetAccountAmendmentSubmissionReader{formats: a.formats},
		//AuthInfo: authInfo,
		Context: a.Context,
		Client:  a.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAccountAmendmentSubmissionOK), nil

}

func (a *GetAccountAmendmentSubmissionRequest) MustDo() *GetAccountAmendmentSubmissionOK {
	r0, err := a.Do()
	if err != nil {
		panic(err)
	}
	return r0
}

/*
list account amendments API
*/
func (a *ListAccountAmendmentsRequest) Do() (*ListAccountAmendmentsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ListAccountAmendments",
		Method:             "GET",
		PathPattern:        "/organisation/accountamendments",
		ProducesMediaTypes: []string{"application/json", "application/vnd.api+json"},
		ConsumesMediaTypes: []string{"application/json", "application/vnd.api+json"},
		Schemes:            []string{"https"},
		Params:             a,
		Reader:             &ListAccountAmendmentsReader{formats: a.formats},
		//AuthInfo: authInfo,
		Context: a.Context,
		Client:  a.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListAccountAmendmentsOK), nil

}

func (a *ListAccountAmendmentsRequest) MustDo() *ListAccountAmendmentsOK {
	r0, err := a.Do()
	if err != nil {
		panic(err)
	}
	return r0
}

/////////

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
