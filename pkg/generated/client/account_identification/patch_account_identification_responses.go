// Code generated by go-swagger; DO NOT EDIT.

package account_identification

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/form3tech-oss/go-form3/v7/pkg/generated/models"
)

// PatchAccountIdentificationReader is a Reader for the PatchAccountIdentification structure.
type PatchAccountIdentificationReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchAccountIdentificationReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewPatchAccountIdentificationOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 409:
		result := NewPatchAccountIdentificationConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewPatchAccountIdentificationOK creates a PatchAccountIdentificationOK with default headers values
func NewPatchAccountIdentificationOK() *PatchAccountIdentificationOK {
	return &PatchAccountIdentificationOK{}
}

/*
PatchAccountIdentificationOK handles this case with default header values.

Account Identification updated
*/
type PatchAccountIdentificationOK struct {

	//Payload

	// isStream: false
	*models.AccountIdentificationResponse
}

// IsSuccess returns true when this patch account identification o k response has a 2xx status code
func (o *PatchAccountIdentificationOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this patch account identification o k response has a 3xx status code
func (o *PatchAccountIdentificationOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch account identification o k response has a 4xx status code
func (o *PatchAccountIdentificationOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch account identification o k response has a 5xx status code
func (o *PatchAccountIdentificationOK) IsServerError() bool {
	return false
}

// IsCode returns true when this patch account identification o k response a status code equal to that given
func (o *PatchAccountIdentificationOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the patch account identification o k response
func (o *PatchAccountIdentificationOK) Code() int {
	return 200
}

func (o *PatchAccountIdentificationOK) Error() string {
	return fmt.Sprintf("[PATCH /organisation/accounts/{account_id}/identifications/{identification_id}][%d] patchAccountIdentificationOK", 200)
}

func (o *PatchAccountIdentificationOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.AccountIdentificationResponse = new(models.AccountIdentificationResponse)

	// response payload

	if err := consumer.Consume(response.Body(), o.AccountIdentificationResponse); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchAccountIdentificationConflict creates a PatchAccountIdentificationConflict with default headers values
func NewPatchAccountIdentificationConflict() *PatchAccountIdentificationConflict {
	return &PatchAccountIdentificationConflict{}
}

/*
PatchAccountIdentificationConflict handles this case with default header values.

Account Identification update error, constraint violation of secondary identification
*/
type PatchAccountIdentificationConflict struct {

	//Payload

	// isStream: false
	*models.APIError
}

// IsSuccess returns true when this patch account identification conflict response has a 2xx status code
func (o *PatchAccountIdentificationConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch account identification conflict response has a 3xx status code
func (o *PatchAccountIdentificationConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch account identification conflict response has a 4xx status code
func (o *PatchAccountIdentificationConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch account identification conflict response has a 5xx status code
func (o *PatchAccountIdentificationConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this patch account identification conflict response a status code equal to that given
func (o *PatchAccountIdentificationConflict) IsCode(code int) bool {
	return code == 409
}

// Code gets the status code for the patch account identification conflict response
func (o *PatchAccountIdentificationConflict) Code() int {
	return 409
}

func (o *PatchAccountIdentificationConflict) Error() string {
	return fmt.Sprintf("[PATCH /organisation/accounts/{account_id}/identifications/{identification_id}][%d] patchAccountIdentificationConflict", 409)
}

func (o *PatchAccountIdentificationConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.APIError = new(models.APIError)

	// response payload

	if err := consumer.Consume(response.Body(), o.APIError); err != nil && err != io.EOF {
		return err
	}

	return nil
}
