// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"log"
	"strconv"

	"github.com/form3tech-oss/go-form3/v7/pkg/client"
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ReturnAdmissionBeneficiaryBranch return admission beneficiary branch
// swagger:model ReturnAdmissionBeneficiaryBranch
type ReturnAdmissionBeneficiaryBranch struct {

	// attributes
	Attributes *ReturnAdmissionBeneficiaryBranchAttributes `json:"attributes,omitempty"`

	// id
	// Format: uuid
	ID strfmt.UUID `json:"id,omitempty"`

	// Name of the resource type
	// Pattern: ^[A-Za-z_]*$
	Type string `json:"type,omitempty"`
}

func ReturnAdmissionBeneficiaryBranchWithDefaults(defaults client.Defaults) *ReturnAdmissionBeneficiaryBranch {
	return &ReturnAdmissionBeneficiaryBranch{

		Attributes: ReturnAdmissionBeneficiaryBranchAttributesWithDefaults(defaults),

		ID: defaults.GetStrfmtUUID("ReturnAdmissionBeneficiaryBranch", "id"),

		Type: defaults.GetString("ReturnAdmissionBeneficiaryBranch", "type"),
	}
}

func (m *ReturnAdmissionBeneficiaryBranch) WithAttributes(attributes ReturnAdmissionBeneficiaryBranchAttributes) *ReturnAdmissionBeneficiaryBranch {

	m.Attributes = &attributes

	return m
}

func (m *ReturnAdmissionBeneficiaryBranch) WithoutAttributes() *ReturnAdmissionBeneficiaryBranch {
	m.Attributes = nil
	return m
}

func (m *ReturnAdmissionBeneficiaryBranch) WithID(id strfmt.UUID) *ReturnAdmissionBeneficiaryBranch {

	m.ID = id

	return m
}

func (m *ReturnAdmissionBeneficiaryBranch) WithType(typeVar string) *ReturnAdmissionBeneficiaryBranch {

	m.Type = typeVar

	return m
}

// Validate validates this return admission beneficiary branch
func (m *ReturnAdmissionBeneficiaryBranch) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAttributes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ReturnAdmissionBeneficiaryBranch) validateAttributes(formats strfmt.Registry) error {

	if swag.IsZero(m.Attributes) { // not required
		return nil
	}

	if m.Attributes != nil {
		if err := m.Attributes.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("attributes")
			}
			return err
		}
	}

	return nil
}

func (m *ReturnAdmissionBeneficiaryBranch) validateID(formats strfmt.Registry) error {

	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.FormatOf("id", "body", "uuid", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ReturnAdmissionBeneficiaryBranch) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	if err := validate.Pattern("type", "body", string(m.Type), `^[A-Za-z_]*$`); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ReturnAdmissionBeneficiaryBranch) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ReturnAdmissionBeneficiaryBranch) UnmarshalBinary(b []byte) error {
	var res ReturnAdmissionBeneficiaryBranch
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
func (m *ReturnAdmissionBeneficiaryBranch) Json() string {
	json, err := json.MarshalIndent(m, "  ", "  ")
	if err != nil {
		log.Fatal(err)
	}
	return string(json)
}

// ReturnAdmissionBeneficiaryBranchAttributes return admission beneficiary branch attributes
// swagger:model ReturnAdmissionBeneficiaryBranchAttributes
type ReturnAdmissionBeneficiaryBranchAttributes struct {

	// All purpose list of key-value pairs specific data stored on the associated beneficiary branch
	// Max Items: 5
	UserDefinedData []*UserDefinedData `json:"user_defined_data"`
}

func ReturnAdmissionBeneficiaryBranchAttributesWithDefaults(defaults client.Defaults) *ReturnAdmissionBeneficiaryBranchAttributes {
	return &ReturnAdmissionBeneficiaryBranchAttributes{

		UserDefinedData: make([]*UserDefinedData, 0),
	}
}

func (m *ReturnAdmissionBeneficiaryBranchAttributes) WithUserDefinedData(userDefinedData []*UserDefinedData) *ReturnAdmissionBeneficiaryBranchAttributes {

	m.UserDefinedData = userDefinedData

	return m
}

// Validate validates this return admission beneficiary branch attributes
func (m *ReturnAdmissionBeneficiaryBranchAttributes) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateUserDefinedData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ReturnAdmissionBeneficiaryBranchAttributes) validateUserDefinedData(formats strfmt.Registry) error {

	if swag.IsZero(m.UserDefinedData) { // not required
		return nil
	}

	iUserDefinedDataSize := int64(len(m.UserDefinedData))

	if err := validate.MaxItems("attributes"+"."+"user_defined_data", "body", iUserDefinedDataSize, 5); err != nil {
		return err
	}

	for i := 0; i < len(m.UserDefinedData); i++ {
		if swag.IsZero(m.UserDefinedData[i]) { // not required
			continue
		}

		if m.UserDefinedData[i] != nil {
			if err := m.UserDefinedData[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("attributes" + "." + "user_defined_data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ReturnAdmissionBeneficiaryBranchAttributes) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ReturnAdmissionBeneficiaryBranchAttributes) UnmarshalBinary(b []byte) error {
	var res ReturnAdmissionBeneficiaryBranchAttributes
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
func (m *ReturnAdmissionBeneficiaryBranchAttributes) Json() string {
	json, err := json.MarshalIndent(m, "  ", "  ")
	if err != nil {
		log.Fatal(err)
	}
	return string(json)
}
