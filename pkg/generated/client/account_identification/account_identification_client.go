// Code generated by go-swagger; DO NOT EDIT.

// :Form3: Testing!

package account_identification

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/form3tech-oss/go-form3/v4/pkg/client"
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new account identification API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry, defaults client.Defaults) *Client {
	return &Client{transport: transport, formats: formats, Defaults: defaults}
}

/*
Client for account identification API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
	Defaults  client.Defaults
}

// range of operations

/*
delete organisation accounts account ID identifications identification ID API
*/
func (a *DeleteOrganisationAccountsAccountIDIdentificationsIdentificationIDRequest) Do() (*DeleteOrganisationAccountsAccountIDIdentificationsIdentificationIDNoContent, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteOrganisationAccountsAccountIDIdentificationsIdentificationID",
		Method:             "DELETE",
		PathPattern:        "/organisation/accounts/{account_id}/identifications/{identification_id}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.api+json"},
		ConsumesMediaTypes: []string{"application/json", "application/vnd.api+json"},
		Schemes:            []string{"https"},
		Params:             a,
		Reader:             &DeleteOrganisationAccountsAccountIDIdentificationsIdentificationIDReader{formats: a.formats},
		//AuthInfo: authInfo,
		Context: a.Context,
		Client:  a.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteOrganisationAccountsAccountIDIdentificationsIdentificationIDNoContent), nil

}

func (a *DeleteOrganisationAccountsAccountIDIdentificationsIdentificationIDRequest) MustDo() *DeleteOrganisationAccountsAccountIDIdentificationsIdentificationIDNoContent {
	r0, err := a.Do()
	if err != nil {
		panic(err)
	}
	return r0
}

/*
get organisation accounts account ID identifications API
*/
func (a *GetOrganisationAccountsAccountIDIdentificationsRequest) Do() (*GetOrganisationAccountsAccountIDIdentificationsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetOrganisationAccountsAccountIDIdentifications",
		Method:             "GET",
		PathPattern:        "/organisation/accounts/{account_id}/identifications",
		ProducesMediaTypes: []string{"application/json", "application/vnd.api+json"},
		ConsumesMediaTypes: []string{"application/json", "application/vnd.api+json"},
		Schemes:            []string{"https"},
		Params:             a,
		Reader:             &GetOrganisationAccountsAccountIDIdentificationsReader{formats: a.formats},
		//AuthInfo: authInfo,
		Context: a.Context,
		Client:  a.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetOrganisationAccountsAccountIDIdentificationsOK), nil

}

func (a *GetOrganisationAccountsAccountIDIdentificationsRequest) MustDo() *GetOrganisationAccountsAccountIDIdentificationsOK {
	r0, err := a.Do()
	if err != nil {
		panic(err)
	}
	return r0
}

/*
get organisation accounts account ID identifications identification ID API
*/
func (a *GetOrganisationAccountsAccountIDIdentificationsIdentificationIDRequest) Do() (*GetOrganisationAccountsAccountIDIdentificationsIdentificationIDOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetOrganisationAccountsAccountIDIdentificationsIdentificationID",
		Method:             "GET",
		PathPattern:        "/organisation/accounts/{account_id}/identifications/{identification_id}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.api+json"},
		ConsumesMediaTypes: []string{"application/json", "application/vnd.api+json"},
		Schemes:            []string{"https"},
		Params:             a,
		Reader:             &GetOrganisationAccountsAccountIDIdentificationsIdentificationIDReader{formats: a.formats},
		//AuthInfo: authInfo,
		Context: a.Context,
		Client:  a.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetOrganisationAccountsAccountIDIdentificationsIdentificationIDOK), nil

}

func (a *GetOrganisationAccountsAccountIDIdentificationsIdentificationIDRequest) MustDo() *GetOrganisationAccountsAccountIDIdentificationsIdentificationIDOK {
	r0, err := a.Do()
	if err != nil {
		panic(err)
	}
	return r0
}

/*
patch organisation accounts account ID identifications identification ID API
*/
func (a *PatchOrganisationAccountsAccountIDIdentificationsIdentificationIDRequest) Do() (*PatchOrganisationAccountsAccountIDIdentificationsIdentificationIDOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PatchOrganisationAccountsAccountIDIdentificationsIdentificationID",
		Method:             "PATCH",
		PathPattern:        "/organisation/accounts/{account_id}/identifications/{identification_id}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.api+json"},
		ConsumesMediaTypes: []string{"application/json", "application/vnd.api+json"},
		Schemes:            []string{"https"},
		Params:             a,
		Reader:             &PatchOrganisationAccountsAccountIDIdentificationsIdentificationIDReader{formats: a.formats},
		//AuthInfo: authInfo,
		Context: a.Context,
		Client:  a.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PatchOrganisationAccountsAccountIDIdentificationsIdentificationIDOK), nil

}

func (a *PatchOrganisationAccountsAccountIDIdentificationsIdentificationIDRequest) MustDo() *PatchOrganisationAccountsAccountIDIdentificationsIdentificationIDOK {
	r0, err := a.Do()
	if err != nil {
		panic(err)
	}
	return r0
}

/*
post organisation accounts account ID identifications API
*/
func (a *PostOrganisationAccountsAccountIDIdentificationsRequest) Do() (*PostOrganisationAccountsAccountIDIdentificationsCreated, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostOrganisationAccountsAccountIDIdentifications",
		Method:             "POST",
		PathPattern:        "/organisation/accounts/{account_id}/identifications",
		ProducesMediaTypes: []string{"application/json", "application/vnd.api+json"},
		ConsumesMediaTypes: []string{"application/json", "application/vnd.api+json"},
		Schemes:            []string{"https"},
		Params:             a,
		Reader:             &PostOrganisationAccountsAccountIDIdentificationsReader{formats: a.formats},
		//AuthInfo: authInfo,
		Context: a.Context,
		Client:  a.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostOrganisationAccountsAccountIDIdentificationsCreated), nil

}

func (a *PostOrganisationAccountsAccountIDIdentificationsRequest) MustDo() *PostOrganisationAccountsAccountIDIdentificationsCreated {
	r0, err := a.Do()
	if err != nil {
		panic(err)
	}
	return r0
}

/////////

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
