// Code generated by go-swagger; DO NOT EDIT.

package branches

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// Client.ListBranches creates a new ListBranchesRequest object
// with the default values initialized.
func (c *Client) ListBranches() *ListBranchesRequest {
	var ()
	return &ListBranchesRequest{

		FilterAcceptanceQualifier: make([]string, 0),

		FilterBankID: make([]string, 0),

		FilterBankIDCode: make([]string, 0),

		FilterOrganisationID: make([]strfmt.UUID, 0),

		FilterReferenceMask: make([]string, 0),

		FilterValidationType: make([]string, 0),

		PageNumber: c.Defaults.GetStringPtr("ListBranches", "page[number]"),

		PageSize: c.Defaults.GetInt64Ptr("ListBranches", "page[size]"),

		timeout: cr.DefaultTimeout,

		transport: c.transport,
		formats:   c.formats,
	}
}

type ListBranchesRequest struct {

	/*FilterAcceptanceQualifier      Filter by acceptance qualifier      */

	FilterAcceptanceQualifier []string

	/*FilterBankID      Filter by bank id e.g. sort code or bic      */

	FilterBankID []string

	/*FilterBankIDCode      Filter by type of bank id e.g. "GBDSC"      */

	FilterBankIDCode []string

	/*FilterOrganisationID      Filter by organisation id      */

	FilterOrganisationID []strfmt.UUID

	/*FilterReferenceMask      Filter by reference mask      */

	FilterReferenceMask []string

	/*FilterValidationType      Filter by validation type e.g. card      */

	FilterValidationType []string

	/*PageNumber      Which page to select      */

	PageNumber *string

	/*PageSize      Number of items to select      */

	PageSize *int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client

	transport runtime.ClientTransport
	formats   strfmt.Registry
}

func (o *ListBranchesRequest) FromJson(j string) (*ListBranchesRequest, error) {

	return o, nil
}

func (o *ListBranchesRequest) WithFilterAcceptanceQualifier(filterAcceptanceQualifier []string) *ListBranchesRequest {

	o.FilterAcceptanceQualifier = filterAcceptanceQualifier

	return o
}

func (o *ListBranchesRequest) WithoutFilterAcceptanceQualifier() *ListBranchesRequest {

	o.FilterAcceptanceQualifier = nil

	return o
}

func (o *ListBranchesRequest) WithFilterBankID(filterBankID []string) *ListBranchesRequest {

	o.FilterBankID = filterBankID

	return o
}

func (o *ListBranchesRequest) WithoutFilterBankID() *ListBranchesRequest {

	o.FilterBankID = nil

	return o
}

func (o *ListBranchesRequest) WithFilterBankIDCode(filterBankIDCode []string) *ListBranchesRequest {

	o.FilterBankIDCode = filterBankIDCode

	return o
}

func (o *ListBranchesRequest) WithoutFilterBankIDCode() *ListBranchesRequest {

	o.FilterBankIDCode = nil

	return o
}

func (o *ListBranchesRequest) WithFilterOrganisationID(filterOrganisationID []strfmt.UUID) *ListBranchesRequest {

	o.FilterOrganisationID = filterOrganisationID

	return o
}

func (o *ListBranchesRequest) WithoutFilterOrganisationID() *ListBranchesRequest {

	o.FilterOrganisationID = nil

	return o
}

func (o *ListBranchesRequest) WithFilterReferenceMask(filterReferenceMask []string) *ListBranchesRequest {

	o.FilterReferenceMask = filterReferenceMask

	return o
}

func (o *ListBranchesRequest) WithoutFilterReferenceMask() *ListBranchesRequest {

	o.FilterReferenceMask = nil

	return o
}

func (o *ListBranchesRequest) WithFilterValidationType(filterValidationType []string) *ListBranchesRequest {

	o.FilterValidationType = filterValidationType

	return o
}

func (o *ListBranchesRequest) WithoutFilterValidationType() *ListBranchesRequest {

	o.FilterValidationType = nil

	return o
}

func (o *ListBranchesRequest) WithPageNumber(pageNumber string) *ListBranchesRequest {

	o.PageNumber = &pageNumber

	return o
}

func (o *ListBranchesRequest) WithoutPageNumber() *ListBranchesRequest {

	o.PageNumber = nil

	return o
}

func (o *ListBranchesRequest) WithPageSize(pageSize int64) *ListBranchesRequest {

	o.PageSize = &pageSize

	return o
}

func (o *ListBranchesRequest) WithoutPageSize() *ListBranchesRequest {

	o.PageSize = nil

	return o
}

// ////////////////
// WithContext adds the context to the list branches Request
func (o *ListBranchesRequest) WithContext(ctx context.Context) *ListBranchesRequest {
	o.Context = ctx
	return o
}

// WithHTTPClient adds the HTTPClient to the list branches Request
func (o *ListBranchesRequest) WithHTTPClient(client *http.Client) *ListBranchesRequest {
	o.HTTPClient = client
	return o
}

// WriteToRequest writes these Request to a swagger request
func (o *ListBranchesRequest) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	valuesFilterAcceptanceQualifier := o.FilterAcceptanceQualifier

	joinedFilterAcceptanceQualifier := swag.JoinByFormat(valuesFilterAcceptanceQualifier, "csv")
	// query array param filter[acceptance_qualifier]
	if err := r.SetQueryParam("filter[acceptance_qualifier]", joinedFilterAcceptanceQualifier...); err != nil {
		return err
	}

	valuesFilterBankID := o.FilterBankID

	joinedFilterBankID := swag.JoinByFormat(valuesFilterBankID, "csv")
	// query array param filter[bank_id]
	if err := r.SetQueryParam("filter[bank_id]", joinedFilterBankID...); err != nil {
		return err
	}

	valuesFilterBankIDCode := o.FilterBankIDCode

	joinedFilterBankIDCode := swag.JoinByFormat(valuesFilterBankIDCode, "csv")
	// query array param filter[bank_id_code]
	if err := r.SetQueryParam("filter[bank_id_code]", joinedFilterBankIDCode...); err != nil {
		return err
	}

	var valuesFilterOrganisationID []string
	for _, v := range o.FilterOrganisationID {
		valuesFilterOrganisationID = append(valuesFilterOrganisationID, v.String())
	}

	joinedFilterOrganisationID := swag.JoinByFormat(valuesFilterOrganisationID, "csv")
	// query array param filter[organisation_id]
	if err := r.SetQueryParam("filter[organisation_id]", joinedFilterOrganisationID...); err != nil {
		return err
	}

	valuesFilterReferenceMask := o.FilterReferenceMask

	joinedFilterReferenceMask := swag.JoinByFormat(valuesFilterReferenceMask, "csv")
	// query array param filter[reference_mask]
	if err := r.SetQueryParam("filter[reference_mask]", joinedFilterReferenceMask...); err != nil {
		return err
	}

	valuesFilterValidationType := o.FilterValidationType

	joinedFilterValidationType := swag.JoinByFormat(valuesFilterValidationType, "csv")
	// query array param filter[validation_type]
	if err := r.SetQueryParam("filter[validation_type]", joinedFilterValidationType...); err != nil {
		return err
	}

	if o.PageNumber != nil {

		// query param page[number]
		var qrPageNumber string
		if o.PageNumber != nil {
			qrPageNumber = *o.PageNumber
		}
		qPageNumber := qrPageNumber
		if qPageNumber != "" {
			if err := r.SetQueryParam("page[number]", qPageNumber); err != nil {
				return err
			}
		}

	}

	if o.PageSize != nil {

		// query param page[size]
		var qrPageSize int64
		if o.PageSize != nil {
			qrPageSize = *o.PageSize
		}
		qPageSize := swag.FormatInt64(qrPageSize)
		if qPageSize != "" {
			if err := r.SetQueryParam("page[size]", qPageSize); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
