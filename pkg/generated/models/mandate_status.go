// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"log"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// MandateStatus mandate status
// swagger:model MandateStatus
type MandateStatus string

const (

	// MandateStatusLive captures enum value "live"
	MandateStatusLive MandateStatus = "live"

	// MandateStatusInvalid captures enum value "invalid"
	MandateStatusInvalid MandateStatus = "invalid"

	// MandateStatusExpired captures enum value "expired"
	MandateStatusExpired MandateStatus = "expired"

	// MandateStatusCancelled captures enum value "cancelled"
	MandateStatusCancelled MandateStatus = "cancelled"
)

// for schema
var mandateStatusEnum []interface{}

func init() {
	var res []MandateStatus
	if err := json.Unmarshal([]byte(`["live","invalid","expired","cancelled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		mandateStatusEnum = append(mandateStatusEnum, v)
	}
}

func (m MandateStatus) validateMandateStatusEnum(path, location string, value MandateStatus) error {
	if err := validate.Enum(path, location, value, mandateStatusEnum); err != nil {
		return err
	}
	return nil
}

// Validate validates this mandate status
func (m MandateStatus) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateMandateStatusEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MandateStatus) Json() string {
	json, err := json.MarshalIndent(m, "  ", "  ")
	if err != nil {
		log.Fatal(err)
	}
	return string(json)
}
