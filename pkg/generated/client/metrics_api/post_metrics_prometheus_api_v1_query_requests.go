// Code generated by go-swagger; DO NOT EDIT.

package metrics_api

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// Client.PostMetricsPrometheusAPIV1Query creates a new PostMetricsPrometheusAPIV1QueryRequest object
// with the default values initialized.
func (c *Client) PostMetricsPrometheusAPIV1Query() *PostMetricsPrometheusAPIV1QueryRequest {
	var ()
	return &PostMetricsPrometheusAPIV1QueryRequest{

		Query: c.Defaults.GetString("PostMetricsPrometheusAPIV1Query", "query"),

		Time: c.Defaults.GetStringPtr("PostMetricsPrometheusAPIV1Query", "time"),

		Timeout: c.Defaults.GetStringPtr("PostMetricsPrometheusAPIV1Query", "timeout"),

		requestTimeout: cr.DefaultTimeout,

		transport: c.transport,
		formats:   c.formats,
	}
}

type PostMetricsPrometheusAPIV1QueryRequest struct {

	/*Query      Query to Execute      */

	Query string

	/*Time      RFC3339 or unix_timestamp      */

	Time *string

	/*Timeout      See https://prometheus.io/docs/prometheus/latest/querying/basics/#time-durations      */

	Timeout *string

	requestTimeout time.Duration
	Context        context.Context
	HTTPClient     *http.Client

	transport runtime.ClientTransport
	formats   strfmt.Registry
}

func (o *PostMetricsPrometheusAPIV1QueryRequest) FromJson(j string) (*PostMetricsPrometheusAPIV1QueryRequest, error) {

	return o, nil
}

func (o *PostMetricsPrometheusAPIV1QueryRequest) WithQuery(query string) *PostMetricsPrometheusAPIV1QueryRequest {

	o.Query = query

	return o
}

func (o *PostMetricsPrometheusAPIV1QueryRequest) WithTime(time string) *PostMetricsPrometheusAPIV1QueryRequest {

	o.Time = &time

	return o
}

func (o *PostMetricsPrometheusAPIV1QueryRequest) WithoutTime() *PostMetricsPrometheusAPIV1QueryRequest {

	o.Time = nil

	return o
}

func (o *PostMetricsPrometheusAPIV1QueryRequest) WithTimeout(timeout string) *PostMetricsPrometheusAPIV1QueryRequest {

	o.Timeout = &timeout

	return o
}

func (o *PostMetricsPrometheusAPIV1QueryRequest) WithoutTimeout() *PostMetricsPrometheusAPIV1QueryRequest {

	o.Timeout = nil

	return o
}

//////////////////
// WithContext adds the context to the post metrics prometheus API v1 query Request
func (o *PostMetricsPrometheusAPIV1QueryRequest) WithContext(ctx context.Context) *PostMetricsPrometheusAPIV1QueryRequest {
	o.Context = ctx
	return o
}

// WithHTTPClient adds the HTTPClient to the post metrics prometheus API v1 query Request
func (o *PostMetricsPrometheusAPIV1QueryRequest) WithHTTPClient(client *http.Client) *PostMetricsPrometheusAPIV1QueryRequest {
	o.HTTPClient = client
	return o
}

// WriteToRequest writes these Request to a swagger request
func (o *PostMetricsPrometheusAPIV1QueryRequest) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.requestTimeout); err != nil {
		return err
	}
	var res []error

	// form param query
	frQuery := o.Query
	fQuery := frQuery
	if fQuery != "" {
		if err := r.SetFormParam("query", fQuery); err != nil {
			return err
		}
	}

	if o.Time != nil {

		// form param time
		var frTime string
		if o.Time != nil {
			frTime = *o.Time
		}
		fTime := frTime
		if fTime != "" {
			if err := r.SetFormParam("time", fTime); err != nil {
				return err
			}
		}

	}

	if o.Timeout != nil {

		// form param timeout
		var frTimeout string
		if o.Timeout != nil {
			frTimeout = *o.Timeout
		}
		fTimeout := frTimeout
		if fTimeout != "" {
			if err := r.SetFormParam("timeout", fTimeout); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
