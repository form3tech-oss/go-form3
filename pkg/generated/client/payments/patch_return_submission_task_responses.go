// Code generated by go-swagger; DO NOT EDIT.

package payments

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/form3tech-oss/go-form3/v6/pkg/generated/models"
)

// PatchReturnSubmissionTaskReader is a Reader for the PatchReturnSubmissionTask structure.
type PatchReturnSubmissionTaskReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchReturnSubmissionTaskReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewPatchReturnSubmissionTaskOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewPatchReturnSubmissionTaskBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 409:
		result := NewPatchReturnSubmissionTaskConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewPatchReturnSubmissionTaskOK creates a PatchReturnSubmissionTaskOK with default headers values
func NewPatchReturnSubmissionTaskOK() *PatchReturnSubmissionTaskOK {
	return &PatchReturnSubmissionTaskOK{}
}

/*PatchReturnSubmissionTaskOK handles this case with default header values.

Return Submission Task update response
*/
type PatchReturnSubmissionTaskOK struct {

	//Payload

	// isStream: false
	*models.ReturnSubmissionTaskDetailsResponse
}

func (o *PatchReturnSubmissionTaskOK) Error() string {
	return fmt.Sprintf("[PATCH /transaction/payments/{paymentId}/returns/{returnId}/submissions/{returnSubmissionId}/tasks/{taskId}][%d] patchReturnSubmissionTaskOK", 200)
}

func (o *PatchReturnSubmissionTaskOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.ReturnSubmissionTaskDetailsResponse = new(models.ReturnSubmissionTaskDetailsResponse)

	// response payload

	if err := consumer.Consume(response.Body(), o.ReturnSubmissionTaskDetailsResponse); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchReturnSubmissionTaskBadRequest creates a PatchReturnSubmissionTaskBadRequest with default headers values
func NewPatchReturnSubmissionTaskBadRequest() *PatchReturnSubmissionTaskBadRequest {
	return &PatchReturnSubmissionTaskBadRequest{}
}

/*PatchReturnSubmissionTaskBadRequest handles this case with default header values.

Error
*/
type PatchReturnSubmissionTaskBadRequest struct {

	//Payload

	// isStream: false
	*models.APIError
}

func (o *PatchReturnSubmissionTaskBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /transaction/payments/{paymentId}/returns/{returnId}/submissions/{returnSubmissionId}/tasks/{taskId}][%d] patchReturnSubmissionTaskBadRequest", 400)
}

func (o *PatchReturnSubmissionTaskBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.APIError = new(models.APIError)

	// response payload

	if err := consumer.Consume(response.Body(), o.APIError); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchReturnSubmissionTaskConflict creates a PatchReturnSubmissionTaskConflict with default headers values
func NewPatchReturnSubmissionTaskConflict() *PatchReturnSubmissionTaskConflict {
	return &PatchReturnSubmissionTaskConflict{}
}

/*PatchReturnSubmissionTaskConflict handles this case with default header values.

Conflict
*/
type PatchReturnSubmissionTaskConflict struct {

	//Payload

	// isStream: false
	*models.APIError
}

func (o *PatchReturnSubmissionTaskConflict) Error() string {
	return fmt.Sprintf("[PATCH /transaction/payments/{paymentId}/returns/{returnId}/submissions/{returnSubmissionId}/tasks/{taskId}][%d] patchReturnSubmissionTaskConflict", 409)
}

func (o *PatchReturnSubmissionTaskConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.APIError = new(models.APIError)

	// response payload

	if err := consumer.Consume(response.Body(), o.APIError); err != nil && err != io.EOF {
		return err
	}

	return nil
}
