// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"log"

	"github.com/form3tech-oss/go-form3/v6/pkg/client"
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// QueryPrivateIdentification query private identification
// swagger:model QueryPrivateIdentification
type QueryPrivateIdentification struct {

	// Private Identification of an debtor/beneficiary or ultimate debtor/beneficiary
	// Max Length: 35
	Identification string `json:"identification,omitempty"`

	// Issuer of the `identification`
	// Max Length: 35
	IdentificationIssuer string `json:"identification_issuer,omitempty"`

	// Scheme of the `identification`
	// Max Length: 35
	IdentificationScheme string `json:"identification_scheme,omitempty"`

	// The code that specifies the type of `identification`
	IdentificationSchemeCode string `json:"identification_scheme_code,omitempty"`
}

func QueryPrivateIdentificationWithDefaults(defaults client.Defaults) *QueryPrivateIdentification {
	return &QueryPrivateIdentification{

		Identification: defaults.GetString("QueryPrivateIdentification", "identification"),

		IdentificationIssuer: defaults.GetString("QueryPrivateIdentification", "identification_issuer"),

		IdentificationScheme: defaults.GetString("QueryPrivateIdentification", "identification_scheme"),

		IdentificationSchemeCode: defaults.GetString("QueryPrivateIdentification", "identification_scheme_code"),
	}
}

func (m *QueryPrivateIdentification) WithIdentification(identification string) *QueryPrivateIdentification {

	m.Identification = identification

	return m
}

func (m *QueryPrivateIdentification) WithIdentificationIssuer(identificationIssuer string) *QueryPrivateIdentification {

	m.IdentificationIssuer = identificationIssuer

	return m
}

func (m *QueryPrivateIdentification) WithIdentificationScheme(identificationScheme string) *QueryPrivateIdentification {

	m.IdentificationScheme = identificationScheme

	return m
}

func (m *QueryPrivateIdentification) WithIdentificationSchemeCode(identificationSchemeCode string) *QueryPrivateIdentification {

	m.IdentificationSchemeCode = identificationSchemeCode

	return m
}

// Validate validates this query private identification
func (m *QueryPrivateIdentification) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateIdentification(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIdentificationIssuer(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIdentificationScheme(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *QueryPrivateIdentification) validateIdentification(formats strfmt.Registry) error {

	if swag.IsZero(m.Identification) { // not required
		return nil
	}

	if err := validate.MaxLength("identification", "body", string(m.Identification), 35); err != nil {
		return err
	}

	return nil
}

func (m *QueryPrivateIdentification) validateIdentificationIssuer(formats strfmt.Registry) error {

	if swag.IsZero(m.IdentificationIssuer) { // not required
		return nil
	}

	if err := validate.MaxLength("identification_issuer", "body", string(m.IdentificationIssuer), 35); err != nil {
		return err
	}

	return nil
}

func (m *QueryPrivateIdentification) validateIdentificationScheme(formats strfmt.Registry) error {

	if swag.IsZero(m.IdentificationScheme) { // not required
		return nil
	}

	if err := validate.MaxLength("identification_scheme", "body", string(m.IdentificationScheme), 35); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *QueryPrivateIdentification) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *QueryPrivateIdentification) UnmarshalBinary(b []byte) error {
	var res QueryPrivateIdentification
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
func (m *QueryPrivateIdentification) Json() string {
	json, err := json.MarshalIndent(m, "  ", "  ")
	if err != nil {
		log.Fatal(err)
	}
	return string(json)
}
