// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"log"

	"github.com/form3tech-oss/go-form3/v6/pkg/client"
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ReportRequest report request
// swagger:model ReportRequest
type ReportRequest struct {

	// attributes
	// Required: true
	Attributes *ReportRequestAttributes `json:"attributes"`

	// created on
	// Read Only: true
	// Format: date-time
	CreatedOn strfmt.DateTime `json:"created_on,omitempty"`

	// id
	// Required: true
	// Format: uuid
	ID strfmt.UUID `json:"id"`

	// modified on
	// Read Only: true
	// Format: date-time
	ModifiedOn strfmt.DateTime `json:"modified_on,omitempty"`

	// organisation id
	// Required: true
	// Format: uuid
	OrganisationID strfmt.UUID `json:"organisation_id"`

	// relationships
	Relationships *ReportRequestRelationships `json:"relationships,omitempty"`

	// type
	// Enum: [report_requests]
	Type string `json:"type,omitempty"`

	// version
	// Minimum: 0
	Version *int64 `json:"version,omitempty"`
}

func ReportRequestWithDefaults(defaults client.Defaults) *ReportRequest {
	return &ReportRequest{

		Attributes: ReportRequestAttributesWithDefaults(defaults),

		CreatedOn: defaults.GetStrfmtDateTime("ReportRequest", "created_on"),

		ID: defaults.GetStrfmtUUID("ReportRequest", "id"),

		ModifiedOn: defaults.GetStrfmtDateTime("ReportRequest", "modified_on"),

		OrganisationID: defaults.GetStrfmtUUID("ReportRequest", "organisation_id"),

		Relationships: ReportRequestRelationshipsWithDefaults(defaults),

		Type: defaults.GetString("ReportRequest", "type"),

		Version: defaults.GetInt64Ptr("ReportRequest", "version"),
	}
}

func (m *ReportRequest) WithAttributes(attributes ReportRequestAttributes) *ReportRequest {

	m.Attributes = &attributes

	return m
}

func (m *ReportRequest) WithoutAttributes() *ReportRequest {
	m.Attributes = nil
	return m
}

func (m *ReportRequest) WithCreatedOn(createdOn strfmt.DateTime) *ReportRequest {

	m.CreatedOn = createdOn

	return m
}

func (m *ReportRequest) WithID(id strfmt.UUID) *ReportRequest {

	m.ID = id

	return m
}

func (m *ReportRequest) WithModifiedOn(modifiedOn strfmt.DateTime) *ReportRequest {

	m.ModifiedOn = modifiedOn

	return m
}

func (m *ReportRequest) WithOrganisationID(organisationID strfmt.UUID) *ReportRequest {

	m.OrganisationID = organisationID

	return m
}

func (m *ReportRequest) WithRelationships(relationships ReportRequestRelationships) *ReportRequest {

	m.Relationships = &relationships

	return m
}

func (m *ReportRequest) WithoutRelationships() *ReportRequest {
	m.Relationships = nil
	return m
}

func (m *ReportRequest) WithType(typeVar string) *ReportRequest {

	m.Type = typeVar

	return m
}

func (m *ReportRequest) WithVersion(version int64) *ReportRequest {

	m.Version = &version

	return m
}

func (m *ReportRequest) WithoutVersion() *ReportRequest {
	m.Version = nil
	return m
}

// Validate validates this report request
func (m *ReportRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAttributes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedOn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateModifiedOn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrganisationID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRelationships(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVersion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ReportRequest) validateAttributes(formats strfmt.Registry) error {

	if err := validate.Required("attributes", "body", m.Attributes); err != nil {
		return err
	}

	if m.Attributes != nil {
		if err := m.Attributes.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("attributes")
			}
			return err
		}
	}

	return nil
}

func (m *ReportRequest) validateCreatedOn(formats strfmt.Registry) error {

	if swag.IsZero(m.CreatedOn) { // not required
		return nil
	}

	if err := validate.FormatOf("created_on", "body", "date-time", m.CreatedOn.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ReportRequest) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", strfmt.UUID(m.ID)); err != nil {
		return err
	}

	if err := validate.FormatOf("id", "body", "uuid", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ReportRequest) validateModifiedOn(formats strfmt.Registry) error {

	if swag.IsZero(m.ModifiedOn) { // not required
		return nil
	}

	if err := validate.FormatOf("modified_on", "body", "date-time", m.ModifiedOn.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ReportRequest) validateOrganisationID(formats strfmt.Registry) error {

	if err := validate.Required("organisation_id", "body", strfmt.UUID(m.OrganisationID)); err != nil {
		return err
	}

	if err := validate.FormatOf("organisation_id", "body", "uuid", m.OrganisationID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ReportRequest) validateRelationships(formats strfmt.Registry) error {

	if swag.IsZero(m.Relationships) { // not required
		return nil
	}

	if m.Relationships != nil {
		if err := m.Relationships.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("relationships")
			}
			return err
		}
	}

	return nil
}

var reportRequestTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["report_requests"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		reportRequestTypeTypePropEnum = append(reportRequestTypeTypePropEnum, v)
	}
}

const (

	// ReportRequestTypeReportRequests captures enum value "report_requests"
	ReportRequestTypeReportRequests string = "report_requests"
)

// prop value enum
func (m *ReportRequest) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, reportRequestTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ReportRequest) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

func (m *ReportRequest) validateVersion(formats strfmt.Registry) error {

	if swag.IsZero(m.Version) { // not required
		return nil
	}

	if err := validate.MinimumInt("version", "body", int64(*m.Version), 0, false); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ReportRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ReportRequest) UnmarshalBinary(b []byte) error {
	var res ReportRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
func (m *ReportRequest) Json() string {
	json, err := json.MarshalIndent(m, "  ", "  ")
	if err != nil {
		log.Fatal(err)
	}
	return string(json)
}
