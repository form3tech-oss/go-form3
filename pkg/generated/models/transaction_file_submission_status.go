// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"log"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// TransactionFileSubmissionStatus Status of the transaction file submission
// swagger:model TransactionFileSubmissionStatus
type TransactionFileSubmissionStatus string

const (

	// TransactionFileSubmissionStatusAccepted captures enum value "accepted"
	TransactionFileSubmissionStatusAccepted TransactionFileSubmissionStatus = "accepted"

	// TransactionFileSubmissionStatusValidationPending captures enum value "validation_pending"
	TransactionFileSubmissionStatusValidationPending TransactionFileSubmissionStatus = "validation_pending"

	// TransactionFileSubmissionStatusValidationPassed captures enum value "validation_passed"
	TransactionFileSubmissionStatusValidationPassed TransactionFileSubmissionStatus = "validation_passed"

	// TransactionFileSubmissionStatusReleasedToGateway captures enum value "released_to_gateway"
	TransactionFileSubmissionStatusReleasedToGateway TransactionFileSubmissionStatus = "released_to_gateway"

	// TransactionFileSubmissionStatusDeliveryFailed captures enum value "delivery_failed"
	TransactionFileSubmissionStatusDeliveryFailed TransactionFileSubmissionStatus = "delivery_failed"

	// TransactionFileSubmissionStatusDeliveryConfirmed captures enum value "delivery_confirmed"
	TransactionFileSubmissionStatusDeliveryConfirmed TransactionFileSubmissionStatus = "delivery_confirmed"
)

// for schema
var transactionFileSubmissionStatusEnum []interface{}

func init() {
	var res []TransactionFileSubmissionStatus
	if err := json.Unmarshal([]byte(`["accepted","validation_pending","validation_passed","released_to_gateway","delivery_failed","delivery_confirmed"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		transactionFileSubmissionStatusEnum = append(transactionFileSubmissionStatusEnum, v)
	}
}

func (m TransactionFileSubmissionStatus) validateTransactionFileSubmissionStatusEnum(path, location string, value TransactionFileSubmissionStatus) error {
	if err := validate.Enum(path, location, value, transactionFileSubmissionStatusEnum); err != nil {
		return err
	}
	return nil
}

// Validate validates this transaction file submission status
func (m TransactionFileSubmissionStatus) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateTransactionFileSubmissionStatusEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TransactionFileSubmissionStatus) Json() string {
	json, err := json.MarshalIndent(m, "  ", "  ")
	if err != nil {
		log.Fatal(err)
	}
	return string(json)
}
