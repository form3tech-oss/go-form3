// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"log"
	"strconv"

	"github.com/form3tech-oss/go-form3/v6/pkg/client"
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// QueryResponseInformation query response information
// swagger:model QueryResponseInformation
type QueryResponseInformation struct {

	// beneficiary party
	BeneficiaryParty *QueryBeneficiaryDebtorParty `json:"beneficiary_party,omitempty"`

	// correction transaction information
	CorrectionTransactionInformation *CorrectionTransactionInformation `json:"correction_transaction_information,omitempty"`

	// debtor party
	DebtorParty *QueryBeneficiaryDebtorParty `json:"debtor_party,omitempty"`

	// duplicate transaction information
	DuplicateTransactionInformation *DuplicateTransactionInformation `json:"duplicate_transaction_information,omitempty"`

	// payment type information
	PaymentTypeInformation *PaymentTypeInformation `json:"payment_type_information,omitempty"`

	// Reference for the case ID associated to this Exception and Investigation case.
	References []*QueryReference `json:"references,omitempty"`

	// ultimate beneficiary party
	UltimateBeneficiaryParty *QueryUltimateEntity `json:"ultimate_beneficiary_party,omitempty"`

	// ultimate debtor party
	UltimateDebtorParty *QueryUltimateEntity `json:"ultimate_debtor_party,omitempty"`
}

func QueryResponseInformationWithDefaults(defaults client.Defaults) *QueryResponseInformation {
	return &QueryResponseInformation{

		BeneficiaryParty: QueryBeneficiaryDebtorPartyWithDefaults(defaults),

		CorrectionTransactionInformation: CorrectionTransactionInformationWithDefaults(defaults),

		DebtorParty: QueryBeneficiaryDebtorPartyWithDefaults(defaults),

		DuplicateTransactionInformation: DuplicateTransactionInformationWithDefaults(defaults),

		PaymentTypeInformation: PaymentTypeInformationWithDefaults(defaults),

		References: make([]*QueryReference, 0),

		UltimateBeneficiaryParty: QueryUltimateEntityWithDefaults(defaults),

		UltimateDebtorParty: QueryUltimateEntityWithDefaults(defaults),
	}
}

func (m *QueryResponseInformation) WithBeneficiaryParty(beneficiaryParty QueryBeneficiaryDebtorParty) *QueryResponseInformation {

	m.BeneficiaryParty = &beneficiaryParty

	return m
}

func (m *QueryResponseInformation) WithoutBeneficiaryParty() *QueryResponseInformation {
	m.BeneficiaryParty = nil
	return m
}

func (m *QueryResponseInformation) WithCorrectionTransactionInformation(correctionTransactionInformation CorrectionTransactionInformation) *QueryResponseInformation {

	m.CorrectionTransactionInformation = &correctionTransactionInformation

	return m
}

func (m *QueryResponseInformation) WithoutCorrectionTransactionInformation() *QueryResponseInformation {
	m.CorrectionTransactionInformation = nil
	return m
}

func (m *QueryResponseInformation) WithDebtorParty(debtorParty QueryBeneficiaryDebtorParty) *QueryResponseInformation {

	m.DebtorParty = &debtorParty

	return m
}

func (m *QueryResponseInformation) WithoutDebtorParty() *QueryResponseInformation {
	m.DebtorParty = nil
	return m
}

func (m *QueryResponseInformation) WithDuplicateTransactionInformation(duplicateTransactionInformation DuplicateTransactionInformation) *QueryResponseInformation {

	m.DuplicateTransactionInformation = &duplicateTransactionInformation

	return m
}

func (m *QueryResponseInformation) WithoutDuplicateTransactionInformation() *QueryResponseInformation {
	m.DuplicateTransactionInformation = nil
	return m
}

func (m *QueryResponseInformation) WithPaymentTypeInformation(paymentTypeInformation PaymentTypeInformation) *QueryResponseInformation {

	m.PaymentTypeInformation = &paymentTypeInformation

	return m
}

func (m *QueryResponseInformation) WithoutPaymentTypeInformation() *QueryResponseInformation {
	m.PaymentTypeInformation = nil
	return m
}

func (m *QueryResponseInformation) WithReferences(references []*QueryReference) *QueryResponseInformation {

	m.References = references

	return m
}

func (m *QueryResponseInformation) WithUltimateBeneficiaryParty(ultimateBeneficiaryParty QueryUltimateEntity) *QueryResponseInformation {

	m.UltimateBeneficiaryParty = &ultimateBeneficiaryParty

	return m
}

func (m *QueryResponseInformation) WithoutUltimateBeneficiaryParty() *QueryResponseInformation {
	m.UltimateBeneficiaryParty = nil
	return m
}

func (m *QueryResponseInformation) WithUltimateDebtorParty(ultimateDebtorParty QueryUltimateEntity) *QueryResponseInformation {

	m.UltimateDebtorParty = &ultimateDebtorParty

	return m
}

func (m *QueryResponseInformation) WithoutUltimateDebtorParty() *QueryResponseInformation {
	m.UltimateDebtorParty = nil
	return m
}

// Validate validates this query response information
func (m *QueryResponseInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBeneficiaryParty(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCorrectionTransactionInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDebtorParty(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDuplicateTransactionInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePaymentTypeInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReferences(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUltimateBeneficiaryParty(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUltimateDebtorParty(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *QueryResponseInformation) validateBeneficiaryParty(formats strfmt.Registry) error {

	if swag.IsZero(m.BeneficiaryParty) { // not required
		return nil
	}

	if m.BeneficiaryParty != nil {
		if err := m.BeneficiaryParty.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("beneficiary_party")
			}
			return err
		}
	}

	return nil
}

func (m *QueryResponseInformation) validateCorrectionTransactionInformation(formats strfmt.Registry) error {

	if swag.IsZero(m.CorrectionTransactionInformation) { // not required
		return nil
	}

	if m.CorrectionTransactionInformation != nil {
		if err := m.CorrectionTransactionInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("correction_transaction_information")
			}
			return err
		}
	}

	return nil
}

func (m *QueryResponseInformation) validateDebtorParty(formats strfmt.Registry) error {

	if swag.IsZero(m.DebtorParty) { // not required
		return nil
	}

	if m.DebtorParty != nil {
		if err := m.DebtorParty.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("debtor_party")
			}
			return err
		}
	}

	return nil
}

func (m *QueryResponseInformation) validateDuplicateTransactionInformation(formats strfmt.Registry) error {

	if swag.IsZero(m.DuplicateTransactionInformation) { // not required
		return nil
	}

	if m.DuplicateTransactionInformation != nil {
		if err := m.DuplicateTransactionInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("duplicate_transaction_information")
			}
			return err
		}
	}

	return nil
}

func (m *QueryResponseInformation) validatePaymentTypeInformation(formats strfmt.Registry) error {

	if swag.IsZero(m.PaymentTypeInformation) { // not required
		return nil
	}

	if m.PaymentTypeInformation != nil {
		if err := m.PaymentTypeInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("payment_type_information")
			}
			return err
		}
	}

	return nil
}

func (m *QueryResponseInformation) validateReferences(formats strfmt.Registry) error {

	if swag.IsZero(m.References) { // not required
		return nil
	}

	for i := 0; i < len(m.References); i++ {
		if swag.IsZero(m.References[i]) { // not required
			continue
		}

		if m.References[i] != nil {
			if err := m.References[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("references" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *QueryResponseInformation) validateUltimateBeneficiaryParty(formats strfmt.Registry) error {

	if swag.IsZero(m.UltimateBeneficiaryParty) { // not required
		return nil
	}

	if m.UltimateBeneficiaryParty != nil {
		if err := m.UltimateBeneficiaryParty.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ultimate_beneficiary_party")
			}
			return err
		}
	}

	return nil
}

func (m *QueryResponseInformation) validateUltimateDebtorParty(formats strfmt.Registry) error {

	if swag.IsZero(m.UltimateDebtorParty) { // not required
		return nil
	}

	if m.UltimateDebtorParty != nil {
		if err := m.UltimateDebtorParty.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ultimate_debtor_party")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *QueryResponseInformation) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *QueryResponseInformation) UnmarshalBinary(b []byte) error {
	var res QueryResponseInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
func (m *QueryResponseInformation) Json() string {
	json, err := json.MarshalIndent(m, "  ", "  ")
	if err != nil {
		log.Fatal(err)
	}
	return string(json)
}
