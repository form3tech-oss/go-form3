// Code generated by go-swagger; DO NOT EDIT.

package oauth2

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/form3tech-oss/go-form3/v7/pkg/generated/models"
)

// CreateOauthTokenReader is a Reader for the CreateOauthToken structure.
type CreateOauthTokenReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateOauthTokenReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewCreateOauthTokenOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 403:
		result := NewCreateOauthTokenForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewCreateOauthTokenOK creates a CreateOauthTokenOK with default headers values
func NewCreateOauthTokenOK() *CreateOauthTokenOK {
	return &CreateOauthTokenOK{}
}

/*
CreateOauthTokenOK handles this case with default header values.

Authorisation token (Bearer)
*/
type CreateOauthTokenOK struct {

	//Payload

	// isStream: false
	*models.Token
}

// IsSuccess returns true when this create oauth token o k response has a 2xx status code
func (o *CreateOauthTokenOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this create oauth token o k response has a 3xx status code
func (o *CreateOauthTokenOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create oauth token o k response has a 4xx status code
func (o *CreateOauthTokenOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this create oauth token o k response has a 5xx status code
func (o *CreateOauthTokenOK) IsServerError() bool {
	return false
}

// IsCode returns true when this create oauth token o k response a status code equal to that given
func (o *CreateOauthTokenOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the create oauth token o k response
func (o *CreateOauthTokenOK) Code() int {
	return 200
}

func (o *CreateOauthTokenOK) Error() string {
	return fmt.Sprintf("[POST /oauth2/token][%d] createOauthTokenOK", 200)
}

func (o *CreateOauthTokenOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Token = new(models.Token)

	// response payload

	if err := consumer.Consume(response.Body(), o.Token); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateOauthTokenForbidden creates a CreateOauthTokenForbidden with default headers values
func NewCreateOauthTokenForbidden() *CreateOauthTokenForbidden {
	return &CreateOauthTokenForbidden{}
}

/*
CreateOauthTokenForbidden handles this case with default header values.

Authentication failed
*/
type CreateOauthTokenForbidden struct {
}

// IsSuccess returns true when this create oauth token forbidden response has a 2xx status code
func (o *CreateOauthTokenForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create oauth token forbidden response has a 3xx status code
func (o *CreateOauthTokenForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create oauth token forbidden response has a 4xx status code
func (o *CreateOauthTokenForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this create oauth token forbidden response has a 5xx status code
func (o *CreateOauthTokenForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this create oauth token forbidden response a status code equal to that given
func (o *CreateOauthTokenForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the create oauth token forbidden response
func (o *CreateOauthTokenForbidden) Code() int {
	return 403
}

func (o *CreateOauthTokenForbidden) Error() string {
	return fmt.Sprintf("[POST /oauth2/token][%d] createOauthTokenForbidden", 403)
}

func (o *CreateOauthTokenForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
