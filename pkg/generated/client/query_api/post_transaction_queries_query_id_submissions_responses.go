// Code generated by go-swagger; DO NOT EDIT.

package query_api

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/form3tech-oss/go-form3/v4/pkg/generated/models"
)

// PostTransactionQueriesQueryIDSubmissionsReader is a Reader for the PostTransactionQueriesQueryIDSubmissions structure.
type PostTransactionQueriesQueryIDSubmissionsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostTransactionQueriesQueryIDSubmissionsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 201:
		result := NewPostTransactionQueriesQueryIDSubmissionsCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewPostTransactionQueriesQueryIDSubmissionsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewPostTransactionQueriesQueryIDSubmissionsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 502:
		result := NewPostTransactionQueriesQueryIDSubmissionsBadGateway()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewPostTransactionQueriesQueryIDSubmissionsCreated creates a PostTransactionQueriesQueryIDSubmissionsCreated with default headers values
func NewPostTransactionQueriesQueryIDSubmissionsCreated() *PostTransactionQueriesQueryIDSubmissionsCreated {
	return &PostTransactionQueriesQueryIDSubmissionsCreated{}
}

/*PostTransactionQueriesQueryIDSubmissionsCreated handles this case with default header values.

creation response
*/
type PostTransactionQueriesQueryIDSubmissionsCreated struct {

	//Payload

	// isStream: false
	*models.QuerySubmissionResponse
}

func (o *PostTransactionQueriesQueryIDSubmissionsCreated) Error() string {
	return fmt.Sprintf("[POST /transaction/queries/{query_id}/submissions][%d] postTransactionQueriesQueryIdSubmissionsCreated", 201)
}

func (o *PostTransactionQueriesQueryIDSubmissionsCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.QuerySubmissionResponse = new(models.QuerySubmissionResponse)

	// response payload

	if err := consumer.Consume(response.Body(), o.QuerySubmissionResponse); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostTransactionQueriesQueryIDSubmissionsBadRequest creates a PostTransactionQueriesQueryIDSubmissionsBadRequest with default headers values
func NewPostTransactionQueriesQueryIDSubmissionsBadRequest() *PostTransactionQueriesQueryIDSubmissionsBadRequest {
	return &PostTransactionQueriesQueryIDSubmissionsBadRequest{}
}

/*PostTransactionQueriesQueryIDSubmissionsBadRequest handles this case with default header values.

bad request
*/
type PostTransactionQueriesQueryIDSubmissionsBadRequest struct {

	//Payload

	// isStream: false
	*models.APIError
}

func (o *PostTransactionQueriesQueryIDSubmissionsBadRequest) Error() string {
	return fmt.Sprintf("[POST /transaction/queries/{query_id}/submissions][%d] postTransactionQueriesQueryIdSubmissionsBadRequest", 400)
}

func (o *PostTransactionQueriesQueryIDSubmissionsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.APIError = new(models.APIError)

	// response payload

	if err := consumer.Consume(response.Body(), o.APIError); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostTransactionQueriesQueryIDSubmissionsForbidden creates a PostTransactionQueriesQueryIDSubmissionsForbidden with default headers values
func NewPostTransactionQueriesQueryIDSubmissionsForbidden() *PostTransactionQueriesQueryIDSubmissionsForbidden {
	return &PostTransactionQueriesQueryIDSubmissionsForbidden{}
}

/*PostTransactionQueriesQueryIDSubmissionsForbidden handles this case with default header values.

forbidden
*/
type PostTransactionQueriesQueryIDSubmissionsForbidden struct {

	//Payload

	// isStream: false
	*models.APIError
}

func (o *PostTransactionQueriesQueryIDSubmissionsForbidden) Error() string {
	return fmt.Sprintf("[POST /transaction/queries/{query_id}/submissions][%d] postTransactionQueriesQueryIdSubmissionsForbidden", 403)
}

func (o *PostTransactionQueriesQueryIDSubmissionsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.APIError = new(models.APIError)

	// response payload

	if err := consumer.Consume(response.Body(), o.APIError); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostTransactionQueriesQueryIDSubmissionsBadGateway creates a PostTransactionQueriesQueryIDSubmissionsBadGateway with default headers values
func NewPostTransactionQueriesQueryIDSubmissionsBadGateway() *PostTransactionQueriesQueryIDSubmissionsBadGateway {
	return &PostTransactionQueriesQueryIDSubmissionsBadGateway{}
}

/*PostTransactionQueriesQueryIDSubmissionsBadGateway handles this case with default header values.

gateway issue
*/
type PostTransactionQueriesQueryIDSubmissionsBadGateway struct {

	//Payload

	// isStream: false
	*models.APIError
}

func (o *PostTransactionQueriesQueryIDSubmissionsBadGateway) Error() string {
	return fmt.Sprintf("[POST /transaction/queries/{query_id}/submissions][%d] postTransactionQueriesQueryIdSubmissionsBadGateway", 502)
}

func (o *PostTransactionQueriesQueryIDSubmissionsBadGateway) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.APIError = new(models.APIError)

	// response payload

	if err := consumer.Consume(response.Body(), o.APIError); err != nil && err != io.EOF {
		return err
	}

	return nil
}
