// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"log"
	"strconv"

	"github.com/form3tech-oss/go-form3/v4/pkg/client"
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DirectDebitRecallAdmission direct debit recall admission
// swagger:model DirectDebitRecallAdmission
type DirectDebitRecallAdmission struct {

	// attributes
	Attributes *DirectDebitRecallAdmissionAttributes `json:"attributes,omitempty"`

	// created on
	// Format: date-time
	CreatedOn *strfmt.DateTime `json:"created_on,omitempty"`

	// Unique resource ID
	// Required: true
	// Format: uuid
	ID *strfmt.UUID `json:"id"`

	// modified on
	// Format: date-time
	ModifiedOn *strfmt.DateTime `json:"modified_on,omitempty"`

	// organisation id
	// Format: uuid
	OrganisationID strfmt.UUID `json:"organisation_id,omitempty"`

	// relationships
	Relationships *DirectDebitRecallAdmissionRelationships `json:"relationships,omitempty"`

	// Name of the resource type
	// Pattern: ^[A-Za-z_]*$
	Type string `json:"type,omitempty"`

	// Version number
	// Minimum: 0
	Version *int64 `json:"version,omitempty"`
}

func DirectDebitRecallAdmissionWithDefaults(defaults client.Defaults) *DirectDebitRecallAdmission {
	return &DirectDebitRecallAdmission{

		Attributes: DirectDebitRecallAdmissionAttributesWithDefaults(defaults),

		CreatedOn: defaults.GetStrfmtDateTimePtr("DirectDebitRecallAdmission", "created_on"),

		ID: defaults.GetStrfmtUUIDPtr("DirectDebitRecallAdmission", "id"),

		ModifiedOn: defaults.GetStrfmtDateTimePtr("DirectDebitRecallAdmission", "modified_on"),

		OrganisationID: defaults.GetStrfmtUUID("DirectDebitRecallAdmission", "organisation_id"),

		Relationships: DirectDebitRecallAdmissionRelationshipsWithDefaults(defaults),

		Type: defaults.GetString("DirectDebitRecallAdmission", "type"),

		Version: defaults.GetInt64Ptr("DirectDebitRecallAdmission", "version"),
	}
}

func (m *DirectDebitRecallAdmission) WithAttributes(attributes DirectDebitRecallAdmissionAttributes) *DirectDebitRecallAdmission {

	m.Attributes = &attributes

	return m
}

func (m *DirectDebitRecallAdmission) WithoutAttributes() *DirectDebitRecallAdmission {
	m.Attributes = nil
	return m
}

func (m *DirectDebitRecallAdmission) WithCreatedOn(createdOn strfmt.DateTime) *DirectDebitRecallAdmission {

	m.CreatedOn = &createdOn

	return m
}

func (m *DirectDebitRecallAdmission) WithoutCreatedOn() *DirectDebitRecallAdmission {
	m.CreatedOn = nil
	return m
}

func (m *DirectDebitRecallAdmission) WithID(id strfmt.UUID) *DirectDebitRecallAdmission {

	m.ID = &id

	return m
}

func (m *DirectDebitRecallAdmission) WithoutID() *DirectDebitRecallAdmission {
	m.ID = nil
	return m
}

func (m *DirectDebitRecallAdmission) WithModifiedOn(modifiedOn strfmt.DateTime) *DirectDebitRecallAdmission {

	m.ModifiedOn = &modifiedOn

	return m
}

func (m *DirectDebitRecallAdmission) WithoutModifiedOn() *DirectDebitRecallAdmission {
	m.ModifiedOn = nil
	return m
}

func (m *DirectDebitRecallAdmission) WithOrganisationID(organisationID strfmt.UUID) *DirectDebitRecallAdmission {

	m.OrganisationID = organisationID

	return m
}

func (m *DirectDebitRecallAdmission) WithRelationships(relationships DirectDebitRecallAdmissionRelationships) *DirectDebitRecallAdmission {

	m.Relationships = &relationships

	return m
}

func (m *DirectDebitRecallAdmission) WithoutRelationships() *DirectDebitRecallAdmission {
	m.Relationships = nil
	return m
}

func (m *DirectDebitRecallAdmission) WithType(typeVar string) *DirectDebitRecallAdmission {

	m.Type = typeVar

	return m
}

func (m *DirectDebitRecallAdmission) WithVersion(version int64) *DirectDebitRecallAdmission {

	m.Version = &version

	return m
}

func (m *DirectDebitRecallAdmission) WithoutVersion() *DirectDebitRecallAdmission {
	m.Version = nil
	return m
}

// Validate validates this direct debit recall admission
func (m *DirectDebitRecallAdmission) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAttributes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedOn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateModifiedOn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrganisationID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRelationships(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVersion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DirectDebitRecallAdmission) validateAttributes(formats strfmt.Registry) error {

	if swag.IsZero(m.Attributes) { // not required
		return nil
	}

	if m.Attributes != nil {
		if err := m.Attributes.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("attributes")
			}
			return err
		}
	}

	return nil
}

func (m *DirectDebitRecallAdmission) validateCreatedOn(formats strfmt.Registry) error {

	if swag.IsZero(m.CreatedOn) { // not required
		return nil
	}

	if err := validate.FormatOf("created_on", "body", "date-time", m.CreatedOn.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *DirectDebitRecallAdmission) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	if err := validate.FormatOf("id", "body", "uuid", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *DirectDebitRecallAdmission) validateModifiedOn(formats strfmt.Registry) error {

	if swag.IsZero(m.ModifiedOn) { // not required
		return nil
	}

	if err := validate.FormatOf("modified_on", "body", "date-time", m.ModifiedOn.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *DirectDebitRecallAdmission) validateOrganisationID(formats strfmt.Registry) error {

	if swag.IsZero(m.OrganisationID) { // not required
		return nil
	}

	if err := validate.FormatOf("organisation_id", "body", "uuid", m.OrganisationID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *DirectDebitRecallAdmission) validateRelationships(formats strfmt.Registry) error {

	if swag.IsZero(m.Relationships) { // not required
		return nil
	}

	if m.Relationships != nil {
		if err := m.Relationships.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("relationships")
			}
			return err
		}
	}

	return nil
}

func (m *DirectDebitRecallAdmission) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	if err := validate.Pattern("type", "body", string(m.Type), `^[A-Za-z_]*$`); err != nil {
		return err
	}

	return nil
}

func (m *DirectDebitRecallAdmission) validateVersion(formats strfmt.Registry) error {

	if swag.IsZero(m.Version) { // not required
		return nil
	}

	if err := validate.MinimumInt("version", "body", int64(*m.Version), 0, false); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DirectDebitRecallAdmission) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DirectDebitRecallAdmission) UnmarshalBinary(b []byte) error {
	var res DirectDebitRecallAdmission
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
func (m *DirectDebitRecallAdmission) Json() string {
	json, err := json.MarshalIndent(m, "  ", "  ")
	if err != nil {
		log.Fatal(err)
	}
	return string(json)
}

// DirectDebitRecallAdmissionAttributes direct debit recall admission attributes
// swagger:model DirectDebitRecallAdmissionAttributes
type DirectDebitRecallAdmissionAttributes struct {

	// Date and time the recall admission was created
	// Read Only: true
	// Format: date-time
	AdmissionDatetime *strfmt.DateTime `json:"admission_datetime,omitempty"`

	// source gateway
	SourceGateway string `json:"source_gateway,omitempty"`

	// status
	Status DirectDebitRecallAdmissionStatus `json:"status,omitempty"`

	// Human-readable reason for failure if admission status is failed
	StatusReason string `json:"status_reason,omitempty"`
}

func DirectDebitRecallAdmissionAttributesWithDefaults(defaults client.Defaults) *DirectDebitRecallAdmissionAttributes {
	return &DirectDebitRecallAdmissionAttributes{

		AdmissionDatetime: defaults.GetStrfmtDateTimePtr("DirectDebitRecallAdmissionAttributes", "admission_datetime"),

		SourceGateway: defaults.GetString("DirectDebitRecallAdmissionAttributes", "source_gateway"),

		// TODO Status: DirectDebitRecallAdmissionStatus,

		StatusReason: defaults.GetString("DirectDebitRecallAdmissionAttributes", "status_reason"),
	}
}

func (m *DirectDebitRecallAdmissionAttributes) WithAdmissionDatetime(admissionDatetime strfmt.DateTime) *DirectDebitRecallAdmissionAttributes {

	m.AdmissionDatetime = &admissionDatetime

	return m
}

func (m *DirectDebitRecallAdmissionAttributes) WithoutAdmissionDatetime() *DirectDebitRecallAdmissionAttributes {
	m.AdmissionDatetime = nil
	return m
}

func (m *DirectDebitRecallAdmissionAttributes) WithSourceGateway(sourceGateway string) *DirectDebitRecallAdmissionAttributes {

	m.SourceGateway = sourceGateway

	return m
}

func (m *DirectDebitRecallAdmissionAttributes) WithStatus(status DirectDebitRecallAdmissionStatus) *DirectDebitRecallAdmissionAttributes {

	m.Status = status

	return m
}

func (m *DirectDebitRecallAdmissionAttributes) WithStatusReason(statusReason string) *DirectDebitRecallAdmissionAttributes {

	m.StatusReason = statusReason

	return m
}

// Validate validates this direct debit recall admission attributes
func (m *DirectDebitRecallAdmissionAttributes) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAdmissionDatetime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DirectDebitRecallAdmissionAttributes) validateAdmissionDatetime(formats strfmt.Registry) error {

	if swag.IsZero(m.AdmissionDatetime) { // not required
		return nil
	}

	if err := validate.FormatOf("attributes"+"."+"admission_datetime", "body", "date-time", m.AdmissionDatetime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *DirectDebitRecallAdmissionAttributes) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	if err := m.Status.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("attributes" + "." + "status")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DirectDebitRecallAdmissionAttributes) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DirectDebitRecallAdmissionAttributes) UnmarshalBinary(b []byte) error {
	var res DirectDebitRecallAdmissionAttributes
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
func (m *DirectDebitRecallAdmissionAttributes) Json() string {
	json, err := json.MarshalIndent(m, "  ", "  ")
	if err != nil {
		log.Fatal(err)
	}
	return string(json)
}

// DirectDebitRecallAdmissionRelationships direct debit recall admission relationships
// swagger:model DirectDebitRecallAdmissionRelationships
type DirectDebitRecallAdmissionRelationships struct {

	// direct debit
	DirectDebit *DirectDebitRecallAdmissionRelationshipsDirectDebit `json:"direct_debit,omitempty"`

	// direct debit recall
	DirectDebitRecall *DirectDebitRecallAdmissionRelationshipsDirectDebitRecall `json:"direct_debit_recall,omitempty"`
}

func DirectDebitRecallAdmissionRelationshipsWithDefaults(defaults client.Defaults) *DirectDebitRecallAdmissionRelationships {
	return &DirectDebitRecallAdmissionRelationships{

		DirectDebit: DirectDebitRecallAdmissionRelationshipsDirectDebitWithDefaults(defaults),

		DirectDebitRecall: DirectDebitRecallAdmissionRelationshipsDirectDebitRecallWithDefaults(defaults),
	}
}

func (m *DirectDebitRecallAdmissionRelationships) WithDirectDebit(directDebit DirectDebitRecallAdmissionRelationshipsDirectDebit) *DirectDebitRecallAdmissionRelationships {

	m.DirectDebit = &directDebit

	return m
}

func (m *DirectDebitRecallAdmissionRelationships) WithoutDirectDebit() *DirectDebitRecallAdmissionRelationships {
	m.DirectDebit = nil
	return m
}

func (m *DirectDebitRecallAdmissionRelationships) WithDirectDebitRecall(directDebitRecall DirectDebitRecallAdmissionRelationshipsDirectDebitRecall) *DirectDebitRecallAdmissionRelationships {

	m.DirectDebitRecall = &directDebitRecall

	return m
}

func (m *DirectDebitRecallAdmissionRelationships) WithoutDirectDebitRecall() *DirectDebitRecallAdmissionRelationships {
	m.DirectDebitRecall = nil
	return m
}

// Validate validates this direct debit recall admission relationships
func (m *DirectDebitRecallAdmissionRelationships) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDirectDebit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDirectDebitRecall(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DirectDebitRecallAdmissionRelationships) validateDirectDebit(formats strfmt.Registry) error {

	if swag.IsZero(m.DirectDebit) { // not required
		return nil
	}

	if m.DirectDebit != nil {
		if err := m.DirectDebit.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("relationships" + "." + "direct_debit")
			}
			return err
		}
	}

	return nil
}

func (m *DirectDebitRecallAdmissionRelationships) validateDirectDebitRecall(formats strfmt.Registry) error {

	if swag.IsZero(m.DirectDebitRecall) { // not required
		return nil
	}

	if m.DirectDebitRecall != nil {
		if err := m.DirectDebitRecall.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("relationships" + "." + "direct_debit_recall")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DirectDebitRecallAdmissionRelationships) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DirectDebitRecallAdmissionRelationships) UnmarshalBinary(b []byte) error {
	var res DirectDebitRecallAdmissionRelationships
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
func (m *DirectDebitRecallAdmissionRelationships) Json() string {
	json, err := json.MarshalIndent(m, "  ", "  ")
	if err != nil {
		log.Fatal(err)
	}
	return string(json)
}

// DirectDebitRecallAdmissionRelationshipsDirectDebit direct debit recall admission relationships direct debit
// swagger:model DirectDebitRecallAdmissionRelationshipsDirectDebit
type DirectDebitRecallAdmissionRelationshipsDirectDebit struct {

	// data
	Data []*DirectDebit `json:"data"`
}

func DirectDebitRecallAdmissionRelationshipsDirectDebitWithDefaults(defaults client.Defaults) *DirectDebitRecallAdmissionRelationshipsDirectDebit {
	return &DirectDebitRecallAdmissionRelationshipsDirectDebit{

		Data: make([]*DirectDebit, 0),
	}
}

func (m *DirectDebitRecallAdmissionRelationshipsDirectDebit) WithData(data []*DirectDebit) *DirectDebitRecallAdmissionRelationshipsDirectDebit {

	m.Data = data

	return m
}

// Validate validates this direct debit recall admission relationships direct debit
func (m *DirectDebitRecallAdmissionRelationshipsDirectDebit) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DirectDebitRecallAdmissionRelationshipsDirectDebit) validateData(formats strfmt.Registry) error {

	if swag.IsZero(m.Data) { // not required
		return nil
	}

	for i := 0; i < len(m.Data); i++ {
		if swag.IsZero(m.Data[i]) { // not required
			continue
		}

		if m.Data[i] != nil {
			if err := m.Data[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("relationships" + "." + "direct_debit" + "." + "data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *DirectDebitRecallAdmissionRelationshipsDirectDebit) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DirectDebitRecallAdmissionRelationshipsDirectDebit) UnmarshalBinary(b []byte) error {
	var res DirectDebitRecallAdmissionRelationshipsDirectDebit
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
func (m *DirectDebitRecallAdmissionRelationshipsDirectDebit) Json() string {
	json, err := json.MarshalIndent(m, "  ", "  ")
	if err != nil {
		log.Fatal(err)
	}
	return string(json)
}

// DirectDebitRecallAdmissionRelationshipsDirectDebitRecall direct debit recall admission relationships direct debit recall
// swagger:model DirectDebitRecallAdmissionRelationshipsDirectDebitRecall
type DirectDebitRecallAdmissionRelationshipsDirectDebitRecall struct {

	// data
	Data []*DirectDebitRecall `json:"data"`
}

func DirectDebitRecallAdmissionRelationshipsDirectDebitRecallWithDefaults(defaults client.Defaults) *DirectDebitRecallAdmissionRelationshipsDirectDebitRecall {
	return &DirectDebitRecallAdmissionRelationshipsDirectDebitRecall{

		Data: make([]*DirectDebitRecall, 0),
	}
}

func (m *DirectDebitRecallAdmissionRelationshipsDirectDebitRecall) WithData(data []*DirectDebitRecall) *DirectDebitRecallAdmissionRelationshipsDirectDebitRecall {

	m.Data = data

	return m
}

// Validate validates this direct debit recall admission relationships direct debit recall
func (m *DirectDebitRecallAdmissionRelationshipsDirectDebitRecall) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DirectDebitRecallAdmissionRelationshipsDirectDebitRecall) validateData(formats strfmt.Registry) error {

	if swag.IsZero(m.Data) { // not required
		return nil
	}

	for i := 0; i < len(m.Data); i++ {
		if swag.IsZero(m.Data[i]) { // not required
			continue
		}

		if m.Data[i] != nil {
			if err := m.Data[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("relationships" + "." + "direct_debit_recall" + "." + "data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *DirectDebitRecallAdmissionRelationshipsDirectDebitRecall) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DirectDebitRecallAdmissionRelationshipsDirectDebitRecall) UnmarshalBinary(b []byte) error {
	var res DirectDebitRecallAdmissionRelationshipsDirectDebitRecall
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
func (m *DirectDebitRecallAdmissionRelationshipsDirectDebitRecall) Json() string {
	json, err := json.MarshalIndent(m, "  ", "  ")
	if err != nil {
		log.Fatal(err)
	}
	return string(json)
}
