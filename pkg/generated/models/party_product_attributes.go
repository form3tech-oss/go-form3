// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"log"

	"github.com/form3tech-oss/go-form3/pkg/client"
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// PartyProductAttributes party product attributes
// swagger:model PartyProductAttributes
type PartyProductAttributes struct {

	// product
	Product string `json:"product,omitempty"`

	// status
	Status PartyProductStatus `json:"status,omitempty"`
}

func PartyProductAttributesWithDefaults(defaults client.Defaults) *PartyProductAttributes {
	return &PartyProductAttributes{

		Product: defaults.GetString("PartyProductAttributes", "product"),

		// TODO Status: PartyProductStatus,

	}
}

func (m *PartyProductAttributes) WithProduct(product string) *PartyProductAttributes {

	m.Product = product

	return m
}

func (m *PartyProductAttributes) WithStatus(status PartyProductStatus) *PartyProductAttributes {

	m.Status = status

	return m
}

// Validate validates this party product attributes
func (m *PartyProductAttributes) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PartyProductAttributes) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	if err := m.Status.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("status")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PartyProductAttributes) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PartyProductAttributes) UnmarshalBinary(b []byte) error {
	var res PartyProductAttributes
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
func (m *PartyProductAttributes) Json() string {
	json, err := json.MarshalIndent(m, "  ", "  ")
	if err != nil {
		log.Fatal(err)
	}
	return string(json)
}
