// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"log"

	"github.com/form3tech-oss/go-form3/v6/pkg/client"
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TransactionFile transaction file
// swagger:model TransactionFile
type TransactionFile struct {

	// id
	// Required: true
	// Format: uuid
	ID *strfmt.UUID `json:"id"`

	// type
	// Enum: [transaction_files]
	Type string `json:"type,omitempty"`

	// Unique ID of the organisation this resource is created by
	// Required: true
	// Format: uuid
	OrganisationID *strfmt.UUID `json:"organisation_id"`

	// Version number
	// Minimum: 0
	Version *int64 `json:"version,omitempty"`

	// created on
	// Read Only: true
	// Format: date-time
	CreatedOn strfmt.DateTime `json:"created_on,omitempty"`

	// modified on
	// Read Only: true
	// Format: date-time
	ModifiedOn strfmt.DateTime `json:"modified_on,omitempty"`

	// attributes
	// Required: true
	Attributes *TransactionFileAttributes `json:"attributes"`

	// relationships
	Relationships *TransactionFileRelationships `json:"relationships,omitempty"`
}

func TransactionFileWithDefaults(defaults client.Defaults) *TransactionFile {
	return &TransactionFile{

		ID: defaults.GetStrfmtUUIDPtr("TransactionFile", "id"),

		Type: defaults.GetString("TransactionFile", "type"),

		OrganisationID: defaults.GetStrfmtUUIDPtr("TransactionFile", "organisation_id"),

		Version: defaults.GetInt64Ptr("TransactionFile", "version"),

		CreatedOn: defaults.GetStrfmtDateTime("TransactionFile", "created_on"),

		ModifiedOn: defaults.GetStrfmtDateTime("TransactionFile", "modified_on"),

		Attributes: TransactionFileAttributesWithDefaults(defaults),

		Relationships: TransactionFileRelationshipsWithDefaults(defaults),
	}
}

func (m *TransactionFile) WithID(id strfmt.UUID) *TransactionFile {

	m.ID = &id

	return m
}

func (m *TransactionFile) WithoutID() *TransactionFile {
	m.ID = nil
	return m
}

func (m *TransactionFile) WithType(typeVar string) *TransactionFile {

	m.Type = typeVar

	return m
}

func (m *TransactionFile) WithOrganisationID(organisationID strfmt.UUID) *TransactionFile {

	m.OrganisationID = &organisationID

	return m
}

func (m *TransactionFile) WithoutOrganisationID() *TransactionFile {
	m.OrganisationID = nil
	return m
}

func (m *TransactionFile) WithVersion(version int64) *TransactionFile {

	m.Version = &version

	return m
}

func (m *TransactionFile) WithoutVersion() *TransactionFile {
	m.Version = nil
	return m
}

func (m *TransactionFile) WithCreatedOn(createdOn strfmt.DateTime) *TransactionFile {

	m.CreatedOn = createdOn

	return m
}

func (m *TransactionFile) WithModifiedOn(modifiedOn strfmt.DateTime) *TransactionFile {

	m.ModifiedOn = modifiedOn

	return m
}

func (m *TransactionFile) WithAttributes(attributes TransactionFileAttributes) *TransactionFile {

	m.Attributes = &attributes

	return m
}

func (m *TransactionFile) WithoutAttributes() *TransactionFile {
	m.Attributes = nil
	return m
}

func (m *TransactionFile) WithRelationships(relationships TransactionFileRelationships) *TransactionFile {

	m.Relationships = &relationships

	return m
}

func (m *TransactionFile) WithoutRelationships() *TransactionFile {
	m.Relationships = nil
	return m
}

// Validate validates this transaction file
func (m *TransactionFile) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrganisationID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVersion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedOn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateModifiedOn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAttributes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRelationships(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TransactionFile) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	if err := validate.FormatOf("id", "body", "uuid", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

var transactionFileTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["transaction_files"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		transactionFileTypeTypePropEnum = append(transactionFileTypeTypePropEnum, v)
	}
}

const (

	// TransactionFileTypeTransactionFiles captures enum value "transaction_files"
	TransactionFileTypeTransactionFiles string = "transaction_files"
)

// prop value enum
func (m *TransactionFile) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, transactionFileTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *TransactionFile) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

func (m *TransactionFile) validateOrganisationID(formats strfmt.Registry) error {

	if err := validate.Required("organisation_id", "body", m.OrganisationID); err != nil {
		return err
	}

	if err := validate.FormatOf("organisation_id", "body", "uuid", m.OrganisationID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *TransactionFile) validateVersion(formats strfmt.Registry) error {

	if swag.IsZero(m.Version) { // not required
		return nil
	}

	if err := validate.MinimumInt("version", "body", int64(*m.Version), 0, false); err != nil {
		return err
	}

	return nil
}

func (m *TransactionFile) validateCreatedOn(formats strfmt.Registry) error {

	if swag.IsZero(m.CreatedOn) { // not required
		return nil
	}

	if err := validate.FormatOf("created_on", "body", "date-time", m.CreatedOn.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *TransactionFile) validateModifiedOn(formats strfmt.Registry) error {

	if swag.IsZero(m.ModifiedOn) { // not required
		return nil
	}

	if err := validate.FormatOf("modified_on", "body", "date-time", m.ModifiedOn.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *TransactionFile) validateAttributes(formats strfmt.Registry) error {

	if err := validate.Required("attributes", "body", m.Attributes); err != nil {
		return err
	}

	if m.Attributes != nil {
		if err := m.Attributes.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("attributes")
			}
			return err
		}
	}

	return nil
}

func (m *TransactionFile) validateRelationships(formats strfmt.Registry) error {

	if swag.IsZero(m.Relationships) { // not required
		return nil
	}

	if m.Relationships != nil {
		if err := m.Relationships.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("relationships")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TransactionFile) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TransactionFile) UnmarshalBinary(b []byte) error {
	var res TransactionFile
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
func (m *TransactionFile) Json() string {
	json, err := json.MarshalIndent(m, "  ", "  ")
	if err != nil {
		log.Fatal(err)
	}
	return string(json)
}

// TransactionFileAttributes transaction file attributes
// swagger:model TransactionFileAttributes
type TransactionFileAttributes struct {

	// The format of the file that will be submitted to Form3
	// Required: true
	// Enum: [ndjson]
	FileFormat *string `json:"file_format"`

	// Hashed content of the file
	// Required: true
	// Min Length: 1
	FileHash *string `json:"file_hash"`

	// The size of the file to be uploaded - number of bytes. Max size is 77MB
	// Required: true
	// Maximum: 8.0740352e+07
	FileSize *int64 `json:"file_size"`

	// The algorithm used to generate the signature
	// Required: true
	// Enum: [SHA256]
	HashingAlgorithm *string `json:"hashing_algorithm"`

	// The count of chunks to be uploaded to the resource
	// Required: true
	// Minimum: 1
	NumberOfParts *int64 `json:"number_of_parts"`

	// Scheme/gateway that the file is to be processed by
	// Required: true
	// Enum: [BACS]
	PaymentScheme *string `json:"payment_scheme"`

	// The count of transactions that will be submitted in the file
	// Required: true
	// Maximum: 75000
	TransactionCount *int64 `json:"transaction_count"`

	// The sum value of the transactions will be submitted in the file
	// Pattern: ^[0-9.]{0,20}$
	TransactionSum string `json:"transaction_sum,omitempty"`
}

func TransactionFileAttributesWithDefaults(defaults client.Defaults) *TransactionFileAttributes {
	return &TransactionFileAttributes{

		FileFormat: defaults.GetStringPtr("TransactionFileAttributes", "file_format"),

		FileHash: defaults.GetStringPtr("TransactionFileAttributes", "file_hash"),

		FileSize: defaults.GetInt64Ptr("TransactionFileAttributes", "file_size"),

		HashingAlgorithm: defaults.GetStringPtr("TransactionFileAttributes", "hashing_algorithm"),

		NumberOfParts: defaults.GetInt64Ptr("TransactionFileAttributes", "number_of_parts"),

		PaymentScheme: defaults.GetStringPtr("TransactionFileAttributes", "payment_scheme"),

		TransactionCount: defaults.GetInt64Ptr("TransactionFileAttributes", "transaction_count"),

		TransactionSum: defaults.GetString("TransactionFileAttributes", "transaction_sum"),
	}
}

func (m *TransactionFileAttributes) WithFileFormat(fileFormat string) *TransactionFileAttributes {

	m.FileFormat = &fileFormat

	return m
}

func (m *TransactionFileAttributes) WithoutFileFormat() *TransactionFileAttributes {
	m.FileFormat = nil
	return m
}

func (m *TransactionFileAttributes) WithFileHash(fileHash string) *TransactionFileAttributes {

	m.FileHash = &fileHash

	return m
}

func (m *TransactionFileAttributes) WithoutFileHash() *TransactionFileAttributes {
	m.FileHash = nil
	return m
}

func (m *TransactionFileAttributes) WithFileSize(fileSize int64) *TransactionFileAttributes {

	m.FileSize = &fileSize

	return m
}

func (m *TransactionFileAttributes) WithoutFileSize() *TransactionFileAttributes {
	m.FileSize = nil
	return m
}

func (m *TransactionFileAttributes) WithHashingAlgorithm(hashingAlgorithm string) *TransactionFileAttributes {

	m.HashingAlgorithm = &hashingAlgorithm

	return m
}

func (m *TransactionFileAttributes) WithoutHashingAlgorithm() *TransactionFileAttributes {
	m.HashingAlgorithm = nil
	return m
}

func (m *TransactionFileAttributes) WithNumberOfParts(numberOfParts int64) *TransactionFileAttributes {

	m.NumberOfParts = &numberOfParts

	return m
}

func (m *TransactionFileAttributes) WithoutNumberOfParts() *TransactionFileAttributes {
	m.NumberOfParts = nil
	return m
}

func (m *TransactionFileAttributes) WithPaymentScheme(paymentScheme string) *TransactionFileAttributes {

	m.PaymentScheme = &paymentScheme

	return m
}

func (m *TransactionFileAttributes) WithoutPaymentScheme() *TransactionFileAttributes {
	m.PaymentScheme = nil
	return m
}

func (m *TransactionFileAttributes) WithTransactionCount(transactionCount int64) *TransactionFileAttributes {

	m.TransactionCount = &transactionCount

	return m
}

func (m *TransactionFileAttributes) WithoutTransactionCount() *TransactionFileAttributes {
	m.TransactionCount = nil
	return m
}

func (m *TransactionFileAttributes) WithTransactionSum(transactionSum string) *TransactionFileAttributes {

	m.TransactionSum = transactionSum

	return m
}

// Validate validates this transaction file attributes
func (m *TransactionFileAttributes) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFileFormat(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFileHash(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFileSize(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHashingAlgorithm(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNumberOfParts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePaymentScheme(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTransactionCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTransactionSum(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var transactionFileAttributesTypeFileFormatPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ndjson"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		transactionFileAttributesTypeFileFormatPropEnum = append(transactionFileAttributesTypeFileFormatPropEnum, v)
	}
}

const (

	// TransactionFileAttributesFileFormatNdjson captures enum value "ndjson"
	TransactionFileAttributesFileFormatNdjson string = "ndjson"
)

// prop value enum
func (m *TransactionFileAttributes) validateFileFormatEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, transactionFileAttributesTypeFileFormatPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *TransactionFileAttributes) validateFileFormat(formats strfmt.Registry) error {

	if err := validate.Required("attributes"+"."+"file_format", "body", m.FileFormat); err != nil {
		return err
	}

	// value enum
	if err := m.validateFileFormatEnum("attributes"+"."+"file_format", "body", *m.FileFormat); err != nil {
		return err
	}

	return nil
}

func (m *TransactionFileAttributes) validateFileHash(formats strfmt.Registry) error {

	if err := validate.Required("attributes"+"."+"file_hash", "body", m.FileHash); err != nil {
		return err
	}

	if err := validate.MinLength("attributes"+"."+"file_hash", "body", string(*m.FileHash), 1); err != nil {
		return err
	}

	return nil
}

func (m *TransactionFileAttributes) validateFileSize(formats strfmt.Registry) error {

	if err := validate.Required("attributes"+"."+"file_size", "body", m.FileSize); err != nil {
		return err
	}

	if err := validate.MaximumInt("attributes"+"."+"file_size", "body", int64(*m.FileSize), 8.0740352e+07, false); err != nil {
		return err
	}

	return nil
}

var transactionFileAttributesTypeHashingAlgorithmPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["SHA256"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		transactionFileAttributesTypeHashingAlgorithmPropEnum = append(transactionFileAttributesTypeHashingAlgorithmPropEnum, v)
	}
}

const (

	// TransactionFileAttributesHashingAlgorithmSHA256 captures enum value "SHA256"
	TransactionFileAttributesHashingAlgorithmSHA256 string = "SHA256"
)

// prop value enum
func (m *TransactionFileAttributes) validateHashingAlgorithmEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, transactionFileAttributesTypeHashingAlgorithmPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *TransactionFileAttributes) validateHashingAlgorithm(formats strfmt.Registry) error {

	if err := validate.Required("attributes"+"."+"hashing_algorithm", "body", m.HashingAlgorithm); err != nil {
		return err
	}

	// value enum
	if err := m.validateHashingAlgorithmEnum("attributes"+"."+"hashing_algorithm", "body", *m.HashingAlgorithm); err != nil {
		return err
	}

	return nil
}

func (m *TransactionFileAttributes) validateNumberOfParts(formats strfmt.Registry) error {

	if err := validate.Required("attributes"+"."+"number_of_parts", "body", m.NumberOfParts); err != nil {
		return err
	}

	if err := validate.MinimumInt("attributes"+"."+"number_of_parts", "body", int64(*m.NumberOfParts), 1, false); err != nil {
		return err
	}

	return nil
}

var transactionFileAttributesTypePaymentSchemePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["BACS"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		transactionFileAttributesTypePaymentSchemePropEnum = append(transactionFileAttributesTypePaymentSchemePropEnum, v)
	}
}

const (

	// TransactionFileAttributesPaymentSchemeBACS captures enum value "BACS"
	TransactionFileAttributesPaymentSchemeBACS string = "BACS"
)

// prop value enum
func (m *TransactionFileAttributes) validatePaymentSchemeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, transactionFileAttributesTypePaymentSchemePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *TransactionFileAttributes) validatePaymentScheme(formats strfmt.Registry) error {

	if err := validate.Required("attributes"+"."+"payment_scheme", "body", m.PaymentScheme); err != nil {
		return err
	}

	// value enum
	if err := m.validatePaymentSchemeEnum("attributes"+"."+"payment_scheme", "body", *m.PaymentScheme); err != nil {
		return err
	}

	return nil
}

func (m *TransactionFileAttributes) validateTransactionCount(formats strfmt.Registry) error {

	if err := validate.Required("attributes"+"."+"transaction_count", "body", m.TransactionCount); err != nil {
		return err
	}

	if err := validate.MaximumInt("attributes"+"."+"transaction_count", "body", int64(*m.TransactionCount), 75000, false); err != nil {
		return err
	}

	return nil
}

func (m *TransactionFileAttributes) validateTransactionSum(formats strfmt.Registry) error {

	if swag.IsZero(m.TransactionSum) { // not required
		return nil
	}

	if err := validate.Pattern("attributes"+"."+"transaction_sum", "body", string(m.TransactionSum), `^[0-9.]{0,20}$`); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TransactionFileAttributes) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TransactionFileAttributes) UnmarshalBinary(b []byte) error {
	var res TransactionFileAttributes
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
func (m *TransactionFileAttributes) Json() string {
	json, err := json.MarshalIndent(m, "  ", "  ")
	if err != nil {
		log.Fatal(err)
	}
	return string(json)
}
