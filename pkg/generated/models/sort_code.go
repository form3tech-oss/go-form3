// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"log"
	"strconv"

	"github.com/form3tech-oss/go-form3/v2/pkg/client"
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SortCode sort code
// swagger:model SortCode
type SortCode struct {

	// attributes
	Attributes *SortCodeAttributes `json:"attributes,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// type
	// Pattern: ^[A-Za-z_]*$
	Type string `json:"type,omitempty"`
}

func SortCodeWithDefaults(defaults client.Defaults) *SortCode {
	return &SortCode{

		Attributes: SortCodeAttributesWithDefaults(defaults),

		ID: defaults.GetString("SortCode", "id"),

		Type: defaults.GetString("SortCode", "type"),
	}
}

func (m *SortCode) WithAttributes(attributes SortCodeAttributes) *SortCode {

	m.Attributes = &attributes

	return m
}

func (m *SortCode) WithoutAttributes() *SortCode {
	m.Attributes = nil
	return m
}

func (m *SortCode) WithID(id string) *SortCode {

	m.ID = id

	return m
}

func (m *SortCode) WithType(typeVar string) *SortCode {

	m.Type = typeVar

	return m
}

// Validate validates this sort code
func (m *SortCode) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAttributes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SortCode) validateAttributes(formats strfmt.Registry) error {

	if swag.IsZero(m.Attributes) { // not required
		return nil
	}

	if m.Attributes != nil {
		if err := m.Attributes.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("attributes")
			}
			return err
		}
	}

	return nil
}

func (m *SortCode) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	if err := validate.Pattern("type", "body", string(m.Type), `^[A-Za-z_]*$`); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SortCode) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SortCode) UnmarshalBinary(b []byte) error {
	var res SortCode
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
func (m *SortCode) Json() string {
	json, err := json.MarshalIndent(m, "  ", "  ")
	if err != nil {
		log.Fatal(err)
	}
	return string(json)
}

// SortCodeAttributes sort code attributes
// swagger:model SortCodeAttributes
type SortCodeAttributes struct {

	// bank code
	BankCode string `json:"bank_code,omitempty"`

	// bank name
	BankName string `json:"bank_name,omitempty"`

	// bank office title
	BankOfficeTitle string `json:"bank_office_title,omitempty"`

	// supported schemes
	SupportedSchemes *SortCodeAttributesSupportedSchemes `json:"supported_schemes,omitempty"`
}

func SortCodeAttributesWithDefaults(defaults client.Defaults) *SortCodeAttributes {
	return &SortCodeAttributes{

		BankCode: defaults.GetString("SortCodeAttributes", "bank_code"),

		BankName: defaults.GetString("SortCodeAttributes", "bank_name"),

		BankOfficeTitle: defaults.GetString("SortCodeAttributes", "bank_office_title"),

		SupportedSchemes: SortCodeAttributesSupportedSchemesWithDefaults(defaults),
	}
}

func (m *SortCodeAttributes) WithBankCode(bankCode string) *SortCodeAttributes {

	m.BankCode = bankCode

	return m
}

func (m *SortCodeAttributes) WithBankName(bankName string) *SortCodeAttributes {

	m.BankName = bankName

	return m
}

func (m *SortCodeAttributes) WithBankOfficeTitle(bankOfficeTitle string) *SortCodeAttributes {

	m.BankOfficeTitle = bankOfficeTitle

	return m
}

func (m *SortCodeAttributes) WithSupportedSchemes(supportedSchemes SortCodeAttributesSupportedSchemes) *SortCodeAttributes {

	m.SupportedSchemes = &supportedSchemes

	return m
}

func (m *SortCodeAttributes) WithoutSupportedSchemes() *SortCodeAttributes {
	m.SupportedSchemes = nil
	return m
}

// Validate validates this sort code attributes
func (m *SortCodeAttributes) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSupportedSchemes(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SortCodeAttributes) validateSupportedSchemes(formats strfmt.Registry) error {

	if swag.IsZero(m.SupportedSchemes) { // not required
		return nil
	}

	if m.SupportedSchemes != nil {
		if err := m.SupportedSchemes.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("attributes" + "." + "supported_schemes")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SortCodeAttributes) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SortCodeAttributes) UnmarshalBinary(b []byte) error {
	var res SortCodeAttributes
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
func (m *SortCodeAttributes) Json() string {
	json, err := json.MarshalIndent(m, "  ", "  ")
	if err != nil {
		log.Fatal(err)
	}
	return string(json)
}

// SortCodeAttributesSupportedSchemes sort code attributes supported schemes
// swagger:model SortCodeAttributesSupportedSchemes
type SortCodeAttributesSupportedSchemes struct {

	// b a c s
	BACS *SortCodeAttributesSupportedSchemesBACS `json:"BACS,omitempty"`

	// c c c
	CCC *SortCodeAttributesSupportedSchemesCCC `json:"CCC,omitempty"`

	// c h a p s
	CHAPS *SortCodeAttributesSupportedSchemesCHAPS `json:"CHAPS,omitempty"`

	// f p s
	FPS *SortCodeAttributesSupportedSchemesFPS `json:"FPS,omitempty"`
}

func SortCodeAttributesSupportedSchemesWithDefaults(defaults client.Defaults) *SortCodeAttributesSupportedSchemes {
	return &SortCodeAttributesSupportedSchemes{

		BACS: SortCodeAttributesSupportedSchemesBACSWithDefaults(defaults),

		CCC: SortCodeAttributesSupportedSchemesCCCWithDefaults(defaults),

		CHAPS: SortCodeAttributesSupportedSchemesCHAPSWithDefaults(defaults),

		FPS: SortCodeAttributesSupportedSchemesFPSWithDefaults(defaults),
	}
}

func (m *SortCodeAttributesSupportedSchemes) WithBACS(bACS SortCodeAttributesSupportedSchemesBACS) *SortCodeAttributesSupportedSchemes {

	m.BACS = &bACS

	return m
}

func (m *SortCodeAttributesSupportedSchemes) WithoutBACS() *SortCodeAttributesSupportedSchemes {
	m.BACS = nil
	return m
}

func (m *SortCodeAttributesSupportedSchemes) WithCCC(cCC SortCodeAttributesSupportedSchemesCCC) *SortCodeAttributesSupportedSchemes {

	m.CCC = &cCC

	return m
}

func (m *SortCodeAttributesSupportedSchemes) WithoutCCC() *SortCodeAttributesSupportedSchemes {
	m.CCC = nil
	return m
}

func (m *SortCodeAttributesSupportedSchemes) WithCHAPS(cHAPS SortCodeAttributesSupportedSchemesCHAPS) *SortCodeAttributesSupportedSchemes {

	m.CHAPS = &cHAPS

	return m
}

func (m *SortCodeAttributesSupportedSchemes) WithoutCHAPS() *SortCodeAttributesSupportedSchemes {
	m.CHAPS = nil
	return m
}

func (m *SortCodeAttributesSupportedSchemes) WithFPS(fPS SortCodeAttributesSupportedSchemesFPS) *SortCodeAttributesSupportedSchemes {

	m.FPS = &fPS

	return m
}

func (m *SortCodeAttributesSupportedSchemes) WithoutFPS() *SortCodeAttributesSupportedSchemes {
	m.FPS = nil
	return m
}

// Validate validates this sort code attributes supported schemes
func (m *SortCodeAttributesSupportedSchemes) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBACS(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCCC(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCHAPS(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFPS(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SortCodeAttributesSupportedSchemes) validateBACS(formats strfmt.Registry) error {

	if swag.IsZero(m.BACS) { // not required
		return nil
	}

	if m.BACS != nil {
		if err := m.BACS.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("attributes" + "." + "supported_schemes" + "." + "BACS")
			}
			return err
		}
	}

	return nil
}

func (m *SortCodeAttributesSupportedSchemes) validateCCC(formats strfmt.Registry) error {

	if swag.IsZero(m.CCC) { // not required
		return nil
	}

	if m.CCC != nil {
		if err := m.CCC.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("attributes" + "." + "supported_schemes" + "." + "CCC")
			}
			return err
		}
	}

	return nil
}

func (m *SortCodeAttributesSupportedSchemes) validateCHAPS(formats strfmt.Registry) error {

	if swag.IsZero(m.CHAPS) { // not required
		return nil
	}

	if m.CHAPS != nil {
		if err := m.CHAPS.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("attributes" + "." + "supported_schemes" + "." + "CHAPS")
			}
			return err
		}
	}

	return nil
}

func (m *SortCodeAttributesSupportedSchemes) validateFPS(formats strfmt.Registry) error {

	if swag.IsZero(m.FPS) { // not required
		return nil
	}

	if m.FPS != nil {
		if err := m.FPS.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("attributes" + "." + "supported_schemes" + "." + "FPS")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SortCodeAttributesSupportedSchemes) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SortCodeAttributesSupportedSchemes) UnmarshalBinary(b []byte) error {
	var res SortCodeAttributesSupportedSchemes
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
func (m *SortCodeAttributesSupportedSchemes) Json() string {
	json, err := json.MarshalIndent(m, "  ", "  ")
	if err != nil {
		log.Fatal(err)
	}
	return string(json)
}

// SortCodeAttributesSupportedSchemesBACS sort code attributes supported schemes b a c s
// swagger:model SortCodeAttributesSupportedSchemesBACS
type SortCodeAttributesSupportedSchemesBACS struct {

	// accepts payments
	AcceptsPayments *bool `json:"accepts_payments,omitempty"`

	// allowed transactions
	AllowedTransactions []TransactionGroupCode `json:"allowed_transactions"`

	// service status
	ServiceStatus string `json:"service_status,omitempty"`
}

func SortCodeAttributesSupportedSchemesBACSWithDefaults(defaults client.Defaults) *SortCodeAttributesSupportedSchemesBACS {
	return &SortCodeAttributesSupportedSchemesBACS{

		AcceptsPayments: defaults.GetBoolPtr("SortCodeAttributesSupportedSchemesBACS", "accepts_payments"),

		AllowedTransactions: make([]TransactionGroupCode, 0),

		ServiceStatus: defaults.GetString("SortCodeAttributesSupportedSchemesBACS", "service_status"),
	}
}

func (m *SortCodeAttributesSupportedSchemesBACS) WithAcceptsPayments(acceptsPayments bool) *SortCodeAttributesSupportedSchemesBACS {

	m.AcceptsPayments = &acceptsPayments

	return m
}

func (m *SortCodeAttributesSupportedSchemesBACS) WithoutAcceptsPayments() *SortCodeAttributesSupportedSchemesBACS {
	m.AcceptsPayments = nil
	return m
}

func (m *SortCodeAttributesSupportedSchemesBACS) WithAllowedTransactions(allowedTransactions []TransactionGroupCode) *SortCodeAttributesSupportedSchemesBACS {

	m.AllowedTransactions = allowedTransactions

	return m
}

func (m *SortCodeAttributesSupportedSchemesBACS) WithServiceStatus(serviceStatus string) *SortCodeAttributesSupportedSchemesBACS {

	m.ServiceStatus = serviceStatus

	return m
}

// Validate validates this sort code attributes supported schemes b a c s
func (m *SortCodeAttributesSupportedSchemesBACS) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAllowedTransactions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SortCodeAttributesSupportedSchemesBACS) validateAllowedTransactions(formats strfmt.Registry) error {

	if swag.IsZero(m.AllowedTransactions) { // not required
		return nil
	}

	for i := 0; i < len(m.AllowedTransactions); i++ {

		if err := m.AllowedTransactions[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("attributes" + "." + "supported_schemes" + "." + "BACS" + "." + "allowed_transactions" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *SortCodeAttributesSupportedSchemesBACS) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SortCodeAttributesSupportedSchemesBACS) UnmarshalBinary(b []byte) error {
	var res SortCodeAttributesSupportedSchemesBACS
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
func (m *SortCodeAttributesSupportedSchemesBACS) Json() string {
	json, err := json.MarshalIndent(m, "  ", "  ")
	if err != nil {
		log.Fatal(err)
	}
	return string(json)
}

// SortCodeAttributesSupportedSchemesCCC sort code attributes supported schemes c c c
// swagger:model SortCodeAttributesSupportedSchemesCCC
type SortCodeAttributesSupportedSchemesCCC struct {

	// accepts payments
	AcceptsPayments *bool `json:"accepts_payments,omitempty"`

	// service status
	ServiceStatus string `json:"service_status,omitempty"`
}

func SortCodeAttributesSupportedSchemesCCCWithDefaults(defaults client.Defaults) *SortCodeAttributesSupportedSchemesCCC {
	return &SortCodeAttributesSupportedSchemesCCC{

		AcceptsPayments: defaults.GetBoolPtr("SortCodeAttributesSupportedSchemesCCC", "accepts_payments"),

		ServiceStatus: defaults.GetString("SortCodeAttributesSupportedSchemesCCC", "service_status"),
	}
}

func (m *SortCodeAttributesSupportedSchemesCCC) WithAcceptsPayments(acceptsPayments bool) *SortCodeAttributesSupportedSchemesCCC {

	m.AcceptsPayments = &acceptsPayments

	return m
}

func (m *SortCodeAttributesSupportedSchemesCCC) WithoutAcceptsPayments() *SortCodeAttributesSupportedSchemesCCC {
	m.AcceptsPayments = nil
	return m
}

func (m *SortCodeAttributesSupportedSchemesCCC) WithServiceStatus(serviceStatus string) *SortCodeAttributesSupportedSchemesCCC {

	m.ServiceStatus = serviceStatus

	return m
}

// Validate validates this sort code attributes supported schemes c c c
func (m *SortCodeAttributesSupportedSchemesCCC) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *SortCodeAttributesSupportedSchemesCCC) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SortCodeAttributesSupportedSchemesCCC) UnmarshalBinary(b []byte) error {
	var res SortCodeAttributesSupportedSchemesCCC
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
func (m *SortCodeAttributesSupportedSchemesCCC) Json() string {
	json, err := json.MarshalIndent(m, "  ", "  ")
	if err != nil {
		log.Fatal(err)
	}
	return string(json)
}

// SortCodeAttributesSupportedSchemesCHAPS sort code attributes supported schemes c h a p s
// swagger:model SortCodeAttributesSupportedSchemesCHAPS
type SortCodeAttributesSupportedSchemesCHAPS struct {

	// accepts payments
	AcceptsPayments *bool `json:"accepts_payments,omitempty"`

	// service status
	ServiceStatus string `json:"service_status,omitempty"`
}

func SortCodeAttributesSupportedSchemesCHAPSWithDefaults(defaults client.Defaults) *SortCodeAttributesSupportedSchemesCHAPS {
	return &SortCodeAttributesSupportedSchemesCHAPS{

		AcceptsPayments: defaults.GetBoolPtr("SortCodeAttributesSupportedSchemesCHAPS", "accepts_payments"),

		ServiceStatus: defaults.GetString("SortCodeAttributesSupportedSchemesCHAPS", "service_status"),
	}
}

func (m *SortCodeAttributesSupportedSchemesCHAPS) WithAcceptsPayments(acceptsPayments bool) *SortCodeAttributesSupportedSchemesCHAPS {

	m.AcceptsPayments = &acceptsPayments

	return m
}

func (m *SortCodeAttributesSupportedSchemesCHAPS) WithoutAcceptsPayments() *SortCodeAttributesSupportedSchemesCHAPS {
	m.AcceptsPayments = nil
	return m
}

func (m *SortCodeAttributesSupportedSchemesCHAPS) WithServiceStatus(serviceStatus string) *SortCodeAttributesSupportedSchemesCHAPS {

	m.ServiceStatus = serviceStatus

	return m
}

// Validate validates this sort code attributes supported schemes c h a p s
func (m *SortCodeAttributesSupportedSchemesCHAPS) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *SortCodeAttributesSupportedSchemesCHAPS) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SortCodeAttributesSupportedSchemesCHAPS) UnmarshalBinary(b []byte) error {
	var res SortCodeAttributesSupportedSchemesCHAPS
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
func (m *SortCodeAttributesSupportedSchemesCHAPS) Json() string {
	json, err := json.MarshalIndent(m, "  ", "  ")
	if err != nil {
		log.Fatal(err)
	}
	return string(json)
}

// SortCodeAttributesSupportedSchemesFPS sort code attributes supported schemes f p s
// swagger:model SortCodeAttributesSupportedSchemesFPS
type SortCodeAttributesSupportedSchemesFPS struct {

	// accepts payments
	AcceptsPayments *bool `json:"accepts_payments,omitempty"`

	// handling bank code
	HandlingBankCode string `json:"handling_bank_code,omitempty"`

	// handling bank connection
	HandlingBankConnection string `json:"handling_bank_connection,omitempty"`

	// service status
	ServiceStatus string `json:"service_status,omitempty"`
}

func SortCodeAttributesSupportedSchemesFPSWithDefaults(defaults client.Defaults) *SortCodeAttributesSupportedSchemesFPS {
	return &SortCodeAttributesSupportedSchemesFPS{

		AcceptsPayments: defaults.GetBoolPtr("SortCodeAttributesSupportedSchemesFPS", "accepts_payments"),

		HandlingBankCode: defaults.GetString("SortCodeAttributesSupportedSchemesFPS", "handling_bank_code"),

		HandlingBankConnection: defaults.GetString("SortCodeAttributesSupportedSchemesFPS", "handling_bank_connection"),

		ServiceStatus: defaults.GetString("SortCodeAttributesSupportedSchemesFPS", "service_status"),
	}
}

func (m *SortCodeAttributesSupportedSchemesFPS) WithAcceptsPayments(acceptsPayments bool) *SortCodeAttributesSupportedSchemesFPS {

	m.AcceptsPayments = &acceptsPayments

	return m
}

func (m *SortCodeAttributesSupportedSchemesFPS) WithoutAcceptsPayments() *SortCodeAttributesSupportedSchemesFPS {
	m.AcceptsPayments = nil
	return m
}

func (m *SortCodeAttributesSupportedSchemesFPS) WithHandlingBankCode(handlingBankCode string) *SortCodeAttributesSupportedSchemesFPS {

	m.HandlingBankCode = handlingBankCode

	return m
}

func (m *SortCodeAttributesSupportedSchemesFPS) WithHandlingBankConnection(handlingBankConnection string) *SortCodeAttributesSupportedSchemesFPS {

	m.HandlingBankConnection = handlingBankConnection

	return m
}

func (m *SortCodeAttributesSupportedSchemesFPS) WithServiceStatus(serviceStatus string) *SortCodeAttributesSupportedSchemesFPS {

	m.ServiceStatus = serviceStatus

	return m
}

// Validate validates this sort code attributes supported schemes f p s
func (m *SortCodeAttributesSupportedSchemesFPS) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *SortCodeAttributesSupportedSchemesFPS) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SortCodeAttributesSupportedSchemesFPS) UnmarshalBinary(b []byte) error {
	var res SortCodeAttributesSupportedSchemesFPS
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
func (m *SortCodeAttributesSupportedSchemesFPS) Json() string {
	json, err := json.MarshalIndent(m, "  ", "  ")
	if err != nil {
		log.Fatal(err)
	}
	return string(json)
}
