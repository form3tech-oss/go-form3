// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"log"

	"github.com/form3tech-oss/go-form3/v6/pkg/client"
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// ReturnSubmissionFetchRelationships return submission fetch relationships
// swagger:model ReturnSubmissionFetchRelationships
type ReturnSubmissionFetchRelationships struct {

	// payment
	Payment *RelationshipLinks `json:"payment,omitempty"`

	// payment return
	PaymentReturn *RelationshipLinks `json:"payment_return,omitempty"`

	// return submission task
	ReturnSubmissionTask *RelationshipReturnSubmissionTasks `json:"return_submission_task,omitempty"`

	// validations
	Validations *RelationshipLinks `json:"validations,omitempty"`
}

func ReturnSubmissionFetchRelationshipsWithDefaults(defaults client.Defaults) *ReturnSubmissionFetchRelationships {
	return &ReturnSubmissionFetchRelationships{

		Payment: RelationshipLinksWithDefaults(defaults),

		PaymentReturn: RelationshipLinksWithDefaults(defaults),

		ReturnSubmissionTask: RelationshipReturnSubmissionTasksWithDefaults(defaults),

		Validations: RelationshipLinksWithDefaults(defaults),
	}
}

func (m *ReturnSubmissionFetchRelationships) WithPayment(payment RelationshipLinks) *ReturnSubmissionFetchRelationships {

	m.Payment = &payment

	return m
}

func (m *ReturnSubmissionFetchRelationships) WithoutPayment() *ReturnSubmissionFetchRelationships {
	m.Payment = nil
	return m
}

func (m *ReturnSubmissionFetchRelationships) WithPaymentReturn(paymentReturn RelationshipLinks) *ReturnSubmissionFetchRelationships {

	m.PaymentReturn = &paymentReturn

	return m
}

func (m *ReturnSubmissionFetchRelationships) WithoutPaymentReturn() *ReturnSubmissionFetchRelationships {
	m.PaymentReturn = nil
	return m
}

func (m *ReturnSubmissionFetchRelationships) WithReturnSubmissionTask(returnSubmissionTask RelationshipReturnSubmissionTasks) *ReturnSubmissionFetchRelationships {

	m.ReturnSubmissionTask = &returnSubmissionTask

	return m
}

func (m *ReturnSubmissionFetchRelationships) WithoutReturnSubmissionTask() *ReturnSubmissionFetchRelationships {
	m.ReturnSubmissionTask = nil
	return m
}

func (m *ReturnSubmissionFetchRelationships) WithValidations(validations RelationshipLinks) *ReturnSubmissionFetchRelationships {

	m.Validations = &validations

	return m
}

func (m *ReturnSubmissionFetchRelationships) WithoutValidations() *ReturnSubmissionFetchRelationships {
	m.Validations = nil
	return m
}

// Validate validates this return submission fetch relationships
func (m *ReturnSubmissionFetchRelationships) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePayment(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePaymentReturn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReturnSubmissionTask(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValidations(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ReturnSubmissionFetchRelationships) validatePayment(formats strfmt.Registry) error {

	if swag.IsZero(m.Payment) { // not required
		return nil
	}

	if m.Payment != nil {
		if err := m.Payment.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("payment")
			}
			return err
		}
	}

	return nil
}

func (m *ReturnSubmissionFetchRelationships) validatePaymentReturn(formats strfmt.Registry) error {

	if swag.IsZero(m.PaymentReturn) { // not required
		return nil
	}

	if m.PaymentReturn != nil {
		if err := m.PaymentReturn.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("payment_return")
			}
			return err
		}
	}

	return nil
}

func (m *ReturnSubmissionFetchRelationships) validateReturnSubmissionTask(formats strfmt.Registry) error {

	if swag.IsZero(m.ReturnSubmissionTask) { // not required
		return nil
	}

	if m.ReturnSubmissionTask != nil {
		if err := m.ReturnSubmissionTask.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("return_submission_task")
			}
			return err
		}
	}

	return nil
}

func (m *ReturnSubmissionFetchRelationships) validateValidations(formats strfmt.Registry) error {

	if swag.IsZero(m.Validations) { // not required
		return nil
	}

	if m.Validations != nil {
		if err := m.Validations.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("validations")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ReturnSubmissionFetchRelationships) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ReturnSubmissionFetchRelationships) UnmarshalBinary(b []byte) error {
	var res ReturnSubmissionFetchRelationships
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
func (m *ReturnSubmissionFetchRelationships) Json() string {
	json, err := json.MarshalIndent(m, "  ", "  ")
	if err != nil {
		log.Fatal(err)
	}
	return string(json)
}
