// Code generated by go-swagger; DO NOT EDIT.

package scheme_file_api

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// Client.GetSchemeFile creates a new GetSchemeFileRequest object
// with the default values initialized.
func (c *Client) GetSchemeFile() *GetSchemeFileRequest {
	var ()
	return &GetSchemeFileRequest{

		Accept: c.Defaults.GetStringPtr("GetSchemeFile", "Accept"),

		SchemeFileID: c.Defaults.GetStrfmtUUID("GetSchemeFile", "scheme_file_id"),

		timeout: cr.DefaultTimeout,

		transport: c.transport,
		formats:   c.formats,
	}
}

type GetSchemeFileRequest struct {

	/*Accept      Acceptable Formats, possible values are "application/vnd.api+json" and "application/xml"      */

	Accept *string

	/*SchemeFileID      Scheme File Id      */

	SchemeFileID strfmt.UUID

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client

	transport runtime.ClientTransport
	formats   strfmt.Registry
}

func (o *GetSchemeFileRequest) FromJson(j string) (*GetSchemeFileRequest, error) {

	return o, nil
}

func (o *GetSchemeFileRequest) WithAccept(accept string) *GetSchemeFileRequest {

	o.Accept = &accept

	return o
}

func (o *GetSchemeFileRequest) WithoutAccept() *GetSchemeFileRequest {

	o.Accept = nil

	return o
}

func (o *GetSchemeFileRequest) WithSchemeFileID(schemeFileID strfmt.UUID) *GetSchemeFileRequest {

	o.SchemeFileID = schemeFileID

	return o
}

// ////////////////
// WithContext adds the context to the get scheme file Request
func (o *GetSchemeFileRequest) WithContext(ctx context.Context) *GetSchemeFileRequest {
	o.Context = ctx
	return o
}

// WithHTTPClient adds the HTTPClient to the get scheme file Request
func (o *GetSchemeFileRequest) WithHTTPClient(client *http.Client) *GetSchemeFileRequest {
	o.HTTPClient = client
	return o
}

// WriteToRequest writes these Request to a swagger request
func (o *GetSchemeFileRequest) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Accept != nil {

		// header param Accept
		if err := r.SetHeaderParam("Accept", *o.Accept); err != nil {
			return err
		}

	}

	// path param scheme_file_id
	if err := r.SetPathParam("scheme_file_id", o.SchemeFileID.String()); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
