// Code generated by go-swagger; DO NOT EDIT.

package branch_identification

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/form3tech-oss/go-form3/v7/pkg/generated/models"
)

// PatchBranchIdentificationReader is a Reader for the PatchBranchIdentification structure.
type PatchBranchIdentificationReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchBranchIdentificationReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewPatchBranchIdentificationOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 409:
		result := NewPatchBranchIdentificationConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewPatchBranchIdentificationOK creates a PatchBranchIdentificationOK with default headers values
func NewPatchBranchIdentificationOK() *PatchBranchIdentificationOK {
	return &PatchBranchIdentificationOK{}
}

/*
PatchBranchIdentificationOK handles this case with default header values.

Branch Identification updated
*/
type PatchBranchIdentificationOK struct {

	//Payload

	// isStream: false
	*models.BranchIdentificationResponse
}

// IsSuccess returns true when this patch branch identification o k response has a 2xx status code
func (o *PatchBranchIdentificationOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this patch branch identification o k response has a 3xx status code
func (o *PatchBranchIdentificationOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch branch identification o k response has a 4xx status code
func (o *PatchBranchIdentificationOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch branch identification o k response has a 5xx status code
func (o *PatchBranchIdentificationOK) IsServerError() bool {
	return false
}

// IsCode returns true when this patch branch identification o k response a status code equal to that given
func (o *PatchBranchIdentificationOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the patch branch identification o k response
func (o *PatchBranchIdentificationOK) Code() int {
	return 200
}

func (o *PatchBranchIdentificationOK) Error() string {
	return fmt.Sprintf("[PATCH /organisation/branches/{branch_id}/identifications/{identification_id}][%d] patchBranchIdentificationOK", 200)
}

func (o *PatchBranchIdentificationOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.BranchIdentificationResponse = new(models.BranchIdentificationResponse)

	// response payload

	if err := consumer.Consume(response.Body(), o.BranchIdentificationResponse); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchBranchIdentificationConflict creates a PatchBranchIdentificationConflict with default headers values
func NewPatchBranchIdentificationConflict() *PatchBranchIdentificationConflict {
	return &PatchBranchIdentificationConflict{}
}

/*
PatchBranchIdentificationConflict handles this case with default header values.

Branch Identification update error, constraint violation of secondary identification
*/
type PatchBranchIdentificationConflict struct {

	//Payload

	// isStream: false
	*models.APIError
}

// IsSuccess returns true when this patch branch identification conflict response has a 2xx status code
func (o *PatchBranchIdentificationConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch branch identification conflict response has a 3xx status code
func (o *PatchBranchIdentificationConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch branch identification conflict response has a 4xx status code
func (o *PatchBranchIdentificationConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch branch identification conflict response has a 5xx status code
func (o *PatchBranchIdentificationConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this patch branch identification conflict response a status code equal to that given
func (o *PatchBranchIdentificationConflict) IsCode(code int) bool {
	return code == 409
}

// Code gets the status code for the patch branch identification conflict response
func (o *PatchBranchIdentificationConflict) Code() int {
	return 409
}

func (o *PatchBranchIdentificationConflict) Error() string {
	return fmt.Sprintf("[PATCH /organisation/branches/{branch_id}/identifications/{identification_id}][%d] patchBranchIdentificationConflict", 409)
}

func (o *PatchBranchIdentificationConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.APIError = new(models.APIError)

	// response payload

	if err := consumer.Consume(response.Body(), o.APIError); err != nil && err != io.EOF {
		return err
	}

	return nil
}
