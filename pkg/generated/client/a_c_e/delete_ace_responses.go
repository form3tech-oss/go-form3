// Code generated by go-swagger; DO NOT EDIT.

package a_c_e

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/form3tech-oss/go-form3/v7/pkg/generated/models"
)

// DeleteAceReader is a Reader for the DeleteAce structure.
type DeleteAceReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteAceReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 204:
		result := NewDeleteAceNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewDeleteAceBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewDeleteAceNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewDeleteAceNoContent creates a DeleteAceNoContent with default headers values
func NewDeleteAceNoContent() *DeleteAceNoContent {
	return &DeleteAceNoContent{}
}

/*
DeleteAceNoContent handles this case with default header values.

ACE deleted OK
*/
type DeleteAceNoContent struct {
}

// IsSuccess returns true when this delete ace no content response has a 2xx status code
func (o *DeleteAceNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete ace no content response has a 3xx status code
func (o *DeleteAceNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete ace no content response has a 4xx status code
func (o *DeleteAceNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete ace no content response has a 5xx status code
func (o *DeleteAceNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this delete ace no content response a status code equal to that given
func (o *DeleteAceNoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the delete ace no content response
func (o *DeleteAceNoContent) Code() int {
	return 204
}

func (o *DeleteAceNoContent) Error() string {
	return fmt.Sprintf("[DELETE /security/roles/{role_id}/aces/{ace_id}][%d] deleteAceNoContent", 204)
}

func (o *DeleteAceNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteAceBadRequest creates a DeleteAceBadRequest with default headers values
func NewDeleteAceBadRequest() *DeleteAceBadRequest {
	return &DeleteAceBadRequest{}
}

/*
DeleteAceBadRequest handles this case with default header values.

Bad request
*/
type DeleteAceBadRequest struct {

	//Payload

	// isStream: false
	*models.APIError
}

// IsSuccess returns true when this delete ace bad request response has a 2xx status code
func (o *DeleteAceBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete ace bad request response has a 3xx status code
func (o *DeleteAceBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete ace bad request response has a 4xx status code
func (o *DeleteAceBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete ace bad request response has a 5xx status code
func (o *DeleteAceBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this delete ace bad request response a status code equal to that given
func (o *DeleteAceBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the delete ace bad request response
func (o *DeleteAceBadRequest) Code() int {
	return 400
}

func (o *DeleteAceBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /security/roles/{role_id}/aces/{ace_id}][%d] deleteAceBadRequest", 400)
}

func (o *DeleteAceBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.APIError = new(models.APIError)

	// response payload

	if err := consumer.Consume(response.Body(), o.APIError); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteAceNotFound creates a DeleteAceNotFound with default headers values
func NewDeleteAceNotFound() *DeleteAceNotFound {
	return &DeleteAceNotFound{}
}

/*
DeleteAceNotFound handles this case with default header values.

Not Found
*/
type DeleteAceNotFound struct {

	//Payload

	// isStream: false
	*models.APIError
}

// IsSuccess returns true when this delete ace not found response has a 2xx status code
func (o *DeleteAceNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete ace not found response has a 3xx status code
func (o *DeleteAceNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete ace not found response has a 4xx status code
func (o *DeleteAceNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete ace not found response has a 5xx status code
func (o *DeleteAceNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this delete ace not found response a status code equal to that given
func (o *DeleteAceNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the delete ace not found response
func (o *DeleteAceNotFound) Code() int {
	return 404
}

func (o *DeleteAceNotFound) Error() string {
	return fmt.Sprintf("[DELETE /security/roles/{role_id}/aces/{ace_id}][%d] deleteAceNotFound", 404)
}

func (o *DeleteAceNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.APIError = new(models.APIError)

	// response payload

	if err := consumer.Consume(response.Body(), o.APIError); err != nil && err != io.EOF {
		return err
	}

	return nil
}
