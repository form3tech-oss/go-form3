// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"log"
	"strconv"

	"github.com/form3tech-oss/go-form3/v2/pkg/client"
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DirectDebitReversal direct debit reversal
// swagger:model DirectDebitReversal
type DirectDebitReversal struct {

	// attributes
	Attributes *DirectDebitReversalAttributes `json:"attributes,omitempty"`

	// created on
	// Format: date-time
	CreatedOn *strfmt.DateTime `json:"created_on,omitempty"`

	// id
	// Required: true
	// Format: uuid
	ID *strfmt.UUID `json:"id"`

	// modified on
	// Format: date-time
	ModifiedOn *strfmt.DateTime `json:"modified_on,omitempty"`

	// organisation id
	// Required: true
	// Format: uuid
	OrganisationID *strfmt.UUID `json:"organisation_id"`

	// relationships
	Relationships *DirectDebitReversalRelationships `json:"relationships,omitempty"`

	// type
	// Pattern: ^[A-Za-z_]*$
	Type string `json:"type,omitempty"`

	// version
	// Minimum: 0
	Version *int64 `json:"version,omitempty"`
}

func DirectDebitReversalWithDefaults(defaults client.Defaults) *DirectDebitReversal {
	return &DirectDebitReversal{

		Attributes: DirectDebitReversalAttributesWithDefaults(defaults),

		CreatedOn: defaults.GetStrfmtDateTimePtr("DirectDebitReversal", "created_on"),

		ID: defaults.GetStrfmtUUIDPtr("DirectDebitReversal", "id"),

		ModifiedOn: defaults.GetStrfmtDateTimePtr("DirectDebitReversal", "modified_on"),

		OrganisationID: defaults.GetStrfmtUUIDPtr("DirectDebitReversal", "organisation_id"),

		Relationships: DirectDebitReversalRelationshipsWithDefaults(defaults),

		Type: defaults.GetString("DirectDebitReversal", "type"),

		Version: defaults.GetInt64Ptr("DirectDebitReversal", "version"),
	}
}

func (m *DirectDebitReversal) WithAttributes(attributes DirectDebitReversalAttributes) *DirectDebitReversal {

	m.Attributes = &attributes

	return m
}

func (m *DirectDebitReversal) WithoutAttributes() *DirectDebitReversal {
	m.Attributes = nil
	return m
}

func (m *DirectDebitReversal) WithCreatedOn(createdOn strfmt.DateTime) *DirectDebitReversal {

	m.CreatedOn = &createdOn

	return m
}

func (m *DirectDebitReversal) WithoutCreatedOn() *DirectDebitReversal {
	m.CreatedOn = nil
	return m
}

func (m *DirectDebitReversal) WithID(id strfmt.UUID) *DirectDebitReversal {

	m.ID = &id

	return m
}

func (m *DirectDebitReversal) WithoutID() *DirectDebitReversal {
	m.ID = nil
	return m
}

func (m *DirectDebitReversal) WithModifiedOn(modifiedOn strfmt.DateTime) *DirectDebitReversal {

	m.ModifiedOn = &modifiedOn

	return m
}

func (m *DirectDebitReversal) WithoutModifiedOn() *DirectDebitReversal {
	m.ModifiedOn = nil
	return m
}

func (m *DirectDebitReversal) WithOrganisationID(organisationID strfmt.UUID) *DirectDebitReversal {

	m.OrganisationID = &organisationID

	return m
}

func (m *DirectDebitReversal) WithoutOrganisationID() *DirectDebitReversal {
	m.OrganisationID = nil
	return m
}

func (m *DirectDebitReversal) WithRelationships(relationships DirectDebitReversalRelationships) *DirectDebitReversal {

	m.Relationships = &relationships

	return m
}

func (m *DirectDebitReversal) WithoutRelationships() *DirectDebitReversal {
	m.Relationships = nil
	return m
}

func (m *DirectDebitReversal) WithType(typeVar string) *DirectDebitReversal {

	m.Type = typeVar

	return m
}

func (m *DirectDebitReversal) WithVersion(version int64) *DirectDebitReversal {

	m.Version = &version

	return m
}

func (m *DirectDebitReversal) WithoutVersion() *DirectDebitReversal {
	m.Version = nil
	return m
}

// Validate validates this direct debit reversal
func (m *DirectDebitReversal) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAttributes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedOn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateModifiedOn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrganisationID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRelationships(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVersion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DirectDebitReversal) validateAttributes(formats strfmt.Registry) error {

	if swag.IsZero(m.Attributes) { // not required
		return nil
	}

	if m.Attributes != nil {
		if err := m.Attributes.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("attributes")
			}
			return err
		}
	}

	return nil
}

func (m *DirectDebitReversal) validateCreatedOn(formats strfmt.Registry) error {

	if swag.IsZero(m.CreatedOn) { // not required
		return nil
	}

	if err := validate.FormatOf("created_on", "body", "date-time", m.CreatedOn.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *DirectDebitReversal) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	if err := validate.FormatOf("id", "body", "uuid", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *DirectDebitReversal) validateModifiedOn(formats strfmt.Registry) error {

	if swag.IsZero(m.ModifiedOn) { // not required
		return nil
	}

	if err := validate.FormatOf("modified_on", "body", "date-time", m.ModifiedOn.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *DirectDebitReversal) validateOrganisationID(formats strfmt.Registry) error {

	if err := validate.Required("organisation_id", "body", m.OrganisationID); err != nil {
		return err
	}

	if err := validate.FormatOf("organisation_id", "body", "uuid", m.OrganisationID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *DirectDebitReversal) validateRelationships(formats strfmt.Registry) error {

	if swag.IsZero(m.Relationships) { // not required
		return nil
	}

	if m.Relationships != nil {
		if err := m.Relationships.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("relationships")
			}
			return err
		}
	}

	return nil
}

func (m *DirectDebitReversal) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	if err := validate.Pattern("type", "body", string(m.Type), `^[A-Za-z_]*$`); err != nil {
		return err
	}

	return nil
}

func (m *DirectDebitReversal) validateVersion(formats strfmt.Registry) error {

	if swag.IsZero(m.Version) { // not required
		return nil
	}

	if err := validate.MinimumInt("version", "body", int64(*m.Version), 0, false); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DirectDebitReversal) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DirectDebitReversal) UnmarshalBinary(b []byte) error {
	var res DirectDebitReversal
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
func (m *DirectDebitReversal) Json() string {
	json, err := json.MarshalIndent(m, "  ", "  ")
	if err != nil {
		log.Fatal(err)
	}
	return string(json)
}

// DirectDebitReversalAttributes direct debit reversal attributes
// swagger:model DirectDebitReversalAttributes
type DirectDebitReversalAttributes struct {

	// charges amount
	ChargesAmount *DirectDebitReversalAttributesChargesAmount `json:"charges_amount,omitempty"`

	// Further explanation of the reason given in reason_code. Only evaluated for certain reason codes.
	Reason string `json:"reason,omitempty"`

	// The reason for the direct debit reversal. Has to be a valid [reversal reason code](http://api-docs.form3.tech/api.html#enumerations-reversal-reason-codes).
	ReasonCode string `json:"reason_code,omitempty"`

	// reversal amount
	ReversalAmount *DirectDebitReversalAttributesReversalAmount `json:"reversal_amount,omitempty"`
}

func DirectDebitReversalAttributesWithDefaults(defaults client.Defaults) *DirectDebitReversalAttributes {
	return &DirectDebitReversalAttributes{

		ChargesAmount: DirectDebitReversalAttributesChargesAmountWithDefaults(defaults),

		Reason: defaults.GetString("DirectDebitReversalAttributes", "reason"),

		ReasonCode: defaults.GetString("DirectDebitReversalAttributes", "reason_code"),

		ReversalAmount: DirectDebitReversalAttributesReversalAmountWithDefaults(defaults),
	}
}

func (m *DirectDebitReversalAttributes) WithChargesAmount(chargesAmount DirectDebitReversalAttributesChargesAmount) *DirectDebitReversalAttributes {

	m.ChargesAmount = &chargesAmount

	return m
}

func (m *DirectDebitReversalAttributes) WithoutChargesAmount() *DirectDebitReversalAttributes {
	m.ChargesAmount = nil
	return m
}

func (m *DirectDebitReversalAttributes) WithReason(reason string) *DirectDebitReversalAttributes {

	m.Reason = reason

	return m
}

func (m *DirectDebitReversalAttributes) WithReasonCode(reasonCode string) *DirectDebitReversalAttributes {

	m.ReasonCode = reasonCode

	return m
}

func (m *DirectDebitReversalAttributes) WithReversalAmount(reversalAmount DirectDebitReversalAttributesReversalAmount) *DirectDebitReversalAttributes {

	m.ReversalAmount = &reversalAmount

	return m
}

func (m *DirectDebitReversalAttributes) WithoutReversalAmount() *DirectDebitReversalAttributes {
	m.ReversalAmount = nil
	return m
}

// Validate validates this direct debit reversal attributes
func (m *DirectDebitReversalAttributes) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateChargesAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReversalAmount(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DirectDebitReversalAttributes) validateChargesAmount(formats strfmt.Registry) error {

	if swag.IsZero(m.ChargesAmount) { // not required
		return nil
	}

	if m.ChargesAmount != nil {
		if err := m.ChargesAmount.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("attributes" + "." + "charges_amount")
			}
			return err
		}
	}

	return nil
}

func (m *DirectDebitReversalAttributes) validateReversalAmount(formats strfmt.Registry) error {

	if swag.IsZero(m.ReversalAmount) { // not required
		return nil
	}

	if m.ReversalAmount != nil {
		if err := m.ReversalAmount.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("attributes" + "." + "reversal_amount")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DirectDebitReversalAttributes) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DirectDebitReversalAttributes) UnmarshalBinary(b []byte) error {
	var res DirectDebitReversalAttributes
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
func (m *DirectDebitReversalAttributes) Json() string {
	json, err := json.MarshalIndent(m, "  ", "  ")
	if err != nil {
		log.Fatal(err)
	}
	return string(json)
}

// DirectDebitReversalAttributesChargesAmount Only present when a DirectDebitReversal contains charges. SEPA only
// swagger:model DirectDebitReversalAttributesChargesAmount
type DirectDebitReversalAttributesChargesAmount struct {

	// The charges amount
	// Pattern: ^[0-9.]{0,20}$
	Amount string `json:"amount,omitempty"`

	// ISO currency code for `amount`
	Currency string `json:"currency,omitempty"`
}

func DirectDebitReversalAttributesChargesAmountWithDefaults(defaults client.Defaults) *DirectDebitReversalAttributesChargesAmount {
	return &DirectDebitReversalAttributesChargesAmount{

		Amount: defaults.GetString("DirectDebitReversalAttributesChargesAmount", "amount"),

		Currency: defaults.GetString("DirectDebitReversalAttributesChargesAmount", "currency"),
	}
}

func (m *DirectDebitReversalAttributesChargesAmount) WithAmount(amount string) *DirectDebitReversalAttributesChargesAmount {

	m.Amount = amount

	return m
}

func (m *DirectDebitReversalAttributesChargesAmount) WithCurrency(currency string) *DirectDebitReversalAttributesChargesAmount {

	m.Currency = currency

	return m
}

// Validate validates this direct debit reversal attributes charges amount
func (m *DirectDebitReversalAttributesChargesAmount) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAmount(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DirectDebitReversalAttributesChargesAmount) validateAmount(formats strfmt.Registry) error {

	if swag.IsZero(m.Amount) { // not required
		return nil
	}

	if err := validate.Pattern("attributes"+"."+"charges_amount"+"."+"amount", "body", string(m.Amount), `^[0-9.]{0,20}$`); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DirectDebitReversalAttributesChargesAmount) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DirectDebitReversalAttributesChargesAmount) UnmarshalBinary(b []byte) error {
	var res DirectDebitReversalAttributesChargesAmount
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
func (m *DirectDebitReversalAttributesChargesAmount) Json() string {
	json, err := json.MarshalIndent(m, "  ", "  ")
	if err != nil {
		log.Fatal(err)
	}
	return string(json)
}

// DirectDebitReversalAttributesReversalAmount SEPA only
// swagger:model DirectDebitReversalAttributesReversalAmount
type DirectDebitReversalAttributesReversalAmount struct {

	// Full amount of the Direct Debit Reversal including charges
	// Pattern: ^[0-9.]{0,20}$
	Amount string `json:"amount,omitempty"`

	// ISO currency code for `amount`
	Currency string `json:"currency,omitempty"`
}

func DirectDebitReversalAttributesReversalAmountWithDefaults(defaults client.Defaults) *DirectDebitReversalAttributesReversalAmount {
	return &DirectDebitReversalAttributesReversalAmount{

		Amount: defaults.GetString("DirectDebitReversalAttributesReversalAmount", "amount"),

		Currency: defaults.GetString("DirectDebitReversalAttributesReversalAmount", "currency"),
	}
}

func (m *DirectDebitReversalAttributesReversalAmount) WithAmount(amount string) *DirectDebitReversalAttributesReversalAmount {

	m.Amount = amount

	return m
}

func (m *DirectDebitReversalAttributesReversalAmount) WithCurrency(currency string) *DirectDebitReversalAttributesReversalAmount {

	m.Currency = currency

	return m
}

// Validate validates this direct debit reversal attributes reversal amount
func (m *DirectDebitReversalAttributesReversalAmount) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAmount(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DirectDebitReversalAttributesReversalAmount) validateAmount(formats strfmt.Registry) error {

	if swag.IsZero(m.Amount) { // not required
		return nil
	}

	if err := validate.Pattern("attributes"+"."+"reversal_amount"+"."+"amount", "body", string(m.Amount), `^[0-9.]{0,20}$`); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DirectDebitReversalAttributesReversalAmount) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DirectDebitReversalAttributesReversalAmount) UnmarshalBinary(b []byte) error {
	var res DirectDebitReversalAttributesReversalAmount
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
func (m *DirectDebitReversalAttributesReversalAmount) Json() string {
	json, err := json.MarshalIndent(m, "  ", "  ")
	if err != nil {
		log.Fatal(err)
	}
	return string(json)
}

// DirectDebitReversalRelationships direct debit reversal relationships
// swagger:model DirectDebitReversalRelationships
type DirectDebitReversalRelationships struct {

	// direct debit
	DirectDebit *DirectDebitReversalRelationshipsDirectDebit `json:"direct_debit,omitempty"`

	// direct debit reversal admission
	DirectDebitReversalAdmission *DirectDebitReversalRelationshipsDirectDebitReversalAdmission `json:"direct_debit_reversal_admission,omitempty"`

	// direct debit reversal submission
	DirectDebitReversalSubmission *DirectDebitReversalRelationshipsDirectDebitReversalSubmission `json:"direct_debit_reversal_submission,omitempty"`
}

func DirectDebitReversalRelationshipsWithDefaults(defaults client.Defaults) *DirectDebitReversalRelationships {
	return &DirectDebitReversalRelationships{

		DirectDebit: DirectDebitReversalRelationshipsDirectDebitWithDefaults(defaults),

		DirectDebitReversalAdmission: DirectDebitReversalRelationshipsDirectDebitReversalAdmissionWithDefaults(defaults),

		DirectDebitReversalSubmission: DirectDebitReversalRelationshipsDirectDebitReversalSubmissionWithDefaults(defaults),
	}
}

func (m *DirectDebitReversalRelationships) WithDirectDebit(directDebit DirectDebitReversalRelationshipsDirectDebit) *DirectDebitReversalRelationships {

	m.DirectDebit = &directDebit

	return m
}

func (m *DirectDebitReversalRelationships) WithoutDirectDebit() *DirectDebitReversalRelationships {
	m.DirectDebit = nil
	return m
}

func (m *DirectDebitReversalRelationships) WithDirectDebitReversalAdmission(directDebitReversalAdmission DirectDebitReversalRelationshipsDirectDebitReversalAdmission) *DirectDebitReversalRelationships {

	m.DirectDebitReversalAdmission = &directDebitReversalAdmission

	return m
}

func (m *DirectDebitReversalRelationships) WithoutDirectDebitReversalAdmission() *DirectDebitReversalRelationships {
	m.DirectDebitReversalAdmission = nil
	return m
}

func (m *DirectDebitReversalRelationships) WithDirectDebitReversalSubmission(directDebitReversalSubmission DirectDebitReversalRelationshipsDirectDebitReversalSubmission) *DirectDebitReversalRelationships {

	m.DirectDebitReversalSubmission = &directDebitReversalSubmission

	return m
}

func (m *DirectDebitReversalRelationships) WithoutDirectDebitReversalSubmission() *DirectDebitReversalRelationships {
	m.DirectDebitReversalSubmission = nil
	return m
}

// Validate validates this direct debit reversal relationships
func (m *DirectDebitReversalRelationships) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDirectDebit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDirectDebitReversalAdmission(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDirectDebitReversalSubmission(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DirectDebitReversalRelationships) validateDirectDebit(formats strfmt.Registry) error {

	if swag.IsZero(m.DirectDebit) { // not required
		return nil
	}

	if m.DirectDebit != nil {
		if err := m.DirectDebit.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("relationships" + "." + "direct_debit")
			}
			return err
		}
	}

	return nil
}

func (m *DirectDebitReversalRelationships) validateDirectDebitReversalAdmission(formats strfmt.Registry) error {

	if swag.IsZero(m.DirectDebitReversalAdmission) { // not required
		return nil
	}

	if m.DirectDebitReversalAdmission != nil {
		if err := m.DirectDebitReversalAdmission.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("relationships" + "." + "direct_debit_reversal_admission")
			}
			return err
		}
	}

	return nil
}

func (m *DirectDebitReversalRelationships) validateDirectDebitReversalSubmission(formats strfmt.Registry) error {

	if swag.IsZero(m.DirectDebitReversalSubmission) { // not required
		return nil
	}

	if m.DirectDebitReversalSubmission != nil {
		if err := m.DirectDebitReversalSubmission.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("relationships" + "." + "direct_debit_reversal_submission")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DirectDebitReversalRelationships) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DirectDebitReversalRelationships) UnmarshalBinary(b []byte) error {
	var res DirectDebitReversalRelationships
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
func (m *DirectDebitReversalRelationships) Json() string {
	json, err := json.MarshalIndent(m, "  ", "  ")
	if err != nil {
		log.Fatal(err)
	}
	return string(json)
}

// DirectDebitReversalRelationshipsDirectDebit direct debit reversal relationships direct debit
// swagger:model DirectDebitReversalRelationshipsDirectDebit
type DirectDebitReversalRelationshipsDirectDebit struct {

	// data
	Data []*DirectDebit `json:"data"`
}

func DirectDebitReversalRelationshipsDirectDebitWithDefaults(defaults client.Defaults) *DirectDebitReversalRelationshipsDirectDebit {
	return &DirectDebitReversalRelationshipsDirectDebit{

		Data: make([]*DirectDebit, 0),
	}
}

func (m *DirectDebitReversalRelationshipsDirectDebit) WithData(data []*DirectDebit) *DirectDebitReversalRelationshipsDirectDebit {

	m.Data = data

	return m
}

// Validate validates this direct debit reversal relationships direct debit
func (m *DirectDebitReversalRelationshipsDirectDebit) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DirectDebitReversalRelationshipsDirectDebit) validateData(formats strfmt.Registry) error {

	if swag.IsZero(m.Data) { // not required
		return nil
	}

	for i := 0; i < len(m.Data); i++ {
		if swag.IsZero(m.Data[i]) { // not required
			continue
		}

		if m.Data[i] != nil {
			if err := m.Data[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("relationships" + "." + "direct_debit" + "." + "data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *DirectDebitReversalRelationshipsDirectDebit) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DirectDebitReversalRelationshipsDirectDebit) UnmarshalBinary(b []byte) error {
	var res DirectDebitReversalRelationshipsDirectDebit
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
func (m *DirectDebitReversalRelationshipsDirectDebit) Json() string {
	json, err := json.MarshalIndent(m, "  ", "  ")
	if err != nil {
		log.Fatal(err)
	}
	return string(json)
}

// DirectDebitReversalRelationshipsDirectDebitReversalAdmission direct debit reversal relationships direct debit reversal admission
// swagger:model DirectDebitReversalRelationshipsDirectDebitReversalAdmission
type DirectDebitReversalRelationshipsDirectDebitReversalAdmission struct {

	// data
	Data []*DirectDebitReversalAdmission `json:"data"`
}

func DirectDebitReversalRelationshipsDirectDebitReversalAdmissionWithDefaults(defaults client.Defaults) *DirectDebitReversalRelationshipsDirectDebitReversalAdmission {
	return &DirectDebitReversalRelationshipsDirectDebitReversalAdmission{

		Data: make([]*DirectDebitReversalAdmission, 0),
	}
}

func (m *DirectDebitReversalRelationshipsDirectDebitReversalAdmission) WithData(data []*DirectDebitReversalAdmission) *DirectDebitReversalRelationshipsDirectDebitReversalAdmission {

	m.Data = data

	return m
}

// Validate validates this direct debit reversal relationships direct debit reversal admission
func (m *DirectDebitReversalRelationshipsDirectDebitReversalAdmission) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DirectDebitReversalRelationshipsDirectDebitReversalAdmission) validateData(formats strfmt.Registry) error {

	if swag.IsZero(m.Data) { // not required
		return nil
	}

	for i := 0; i < len(m.Data); i++ {
		if swag.IsZero(m.Data[i]) { // not required
			continue
		}

		if m.Data[i] != nil {
			if err := m.Data[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("relationships" + "." + "direct_debit_reversal_admission" + "." + "data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *DirectDebitReversalRelationshipsDirectDebitReversalAdmission) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DirectDebitReversalRelationshipsDirectDebitReversalAdmission) UnmarshalBinary(b []byte) error {
	var res DirectDebitReversalRelationshipsDirectDebitReversalAdmission
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
func (m *DirectDebitReversalRelationshipsDirectDebitReversalAdmission) Json() string {
	json, err := json.MarshalIndent(m, "  ", "  ")
	if err != nil {
		log.Fatal(err)
	}
	return string(json)
}

// DirectDebitReversalRelationshipsDirectDebitReversalSubmission direct debit reversal relationships direct debit reversal submission
// swagger:model DirectDebitReversalRelationshipsDirectDebitReversalSubmission
type DirectDebitReversalRelationshipsDirectDebitReversalSubmission struct {

	// data
	Data []*DirectDebitReversalSubmission `json:"data"`
}

func DirectDebitReversalRelationshipsDirectDebitReversalSubmissionWithDefaults(defaults client.Defaults) *DirectDebitReversalRelationshipsDirectDebitReversalSubmission {
	return &DirectDebitReversalRelationshipsDirectDebitReversalSubmission{

		Data: make([]*DirectDebitReversalSubmission, 0),
	}
}

func (m *DirectDebitReversalRelationshipsDirectDebitReversalSubmission) WithData(data []*DirectDebitReversalSubmission) *DirectDebitReversalRelationshipsDirectDebitReversalSubmission {

	m.Data = data

	return m
}

// Validate validates this direct debit reversal relationships direct debit reversal submission
func (m *DirectDebitReversalRelationshipsDirectDebitReversalSubmission) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DirectDebitReversalRelationshipsDirectDebitReversalSubmission) validateData(formats strfmt.Registry) error {

	if swag.IsZero(m.Data) { // not required
		return nil
	}

	for i := 0; i < len(m.Data); i++ {
		if swag.IsZero(m.Data[i]) { // not required
			continue
		}

		if m.Data[i] != nil {
			if err := m.Data[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("relationships" + "." + "direct_debit_reversal_submission" + "." + "data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *DirectDebitReversalRelationshipsDirectDebitReversalSubmission) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DirectDebitReversalRelationshipsDirectDebitReversalSubmission) UnmarshalBinary(b []byte) error {
	var res DirectDebitReversalRelationshipsDirectDebitReversalSubmission
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
func (m *DirectDebitReversalRelationshipsDirectDebitReversalSubmission) Json() string {
	json, err := json.MarshalIndent(m, "  ", "  ")
	if err != nil {
		log.Fatal(err)
	}
	return string(json)
}
