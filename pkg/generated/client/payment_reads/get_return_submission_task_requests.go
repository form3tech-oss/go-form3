// Code generated by go-swagger; DO NOT EDIT.

package payment_reads

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// Client.GetReturnSubmissionTask creates a new GetReturnSubmissionTaskRequest object
// with the default values initialized.
func (c *Client) GetReturnSubmissionTask() *GetReturnSubmissionTaskRequest {
	var ()
	return &GetReturnSubmissionTaskRequest{

		PaymentID: c.Defaults.GetStrfmtUUID("GetReturnSubmissionTask", "paymentId"),

		ReturnID: c.Defaults.GetStrfmtUUID("GetReturnSubmissionTask", "returnId"),

		ReturnSubmissionID: c.Defaults.GetStrfmtUUID("GetReturnSubmissionTask", "returnSubmissionId"),

		TaskID: c.Defaults.GetStrfmtUUID("GetReturnSubmissionTask", "taskId"),

		timeout: cr.DefaultTimeout,

		transport: c.transport,
		formats:   c.formats,
	}
}

type GetReturnSubmissionTaskRequest struct {

	/*PaymentID      Payment ID      */

	PaymentID strfmt.UUID

	/*ReturnID      Return ID      */

	ReturnID strfmt.UUID

	/*ReturnSubmissionID      Return Submission ID      */

	ReturnSubmissionID strfmt.UUID

	/*TaskID      Return Submission Task Id      */

	TaskID strfmt.UUID

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client

	transport runtime.ClientTransport
	formats   strfmt.Registry
}

func (o *GetReturnSubmissionTaskRequest) FromJson(j string) (*GetReturnSubmissionTaskRequest, error) {

	return o, nil
}

func (o *GetReturnSubmissionTaskRequest) WithPaymentID(paymentID strfmt.UUID) *GetReturnSubmissionTaskRequest {

	o.PaymentID = paymentID

	return o
}

func (o *GetReturnSubmissionTaskRequest) WithReturnID(returnID strfmt.UUID) *GetReturnSubmissionTaskRequest {

	o.ReturnID = returnID

	return o
}

func (o *GetReturnSubmissionTaskRequest) WithReturnSubmissionID(returnSubmissionID strfmt.UUID) *GetReturnSubmissionTaskRequest {

	o.ReturnSubmissionID = returnSubmissionID

	return o
}

func (o *GetReturnSubmissionTaskRequest) WithTaskID(taskID strfmt.UUID) *GetReturnSubmissionTaskRequest {

	o.TaskID = taskID

	return o
}

// ////////////////
// WithContext adds the context to the get return submission task Request
func (o *GetReturnSubmissionTaskRequest) WithContext(ctx context.Context) *GetReturnSubmissionTaskRequest {
	o.Context = ctx
	return o
}

// WithHTTPClient adds the HTTPClient to the get return submission task Request
func (o *GetReturnSubmissionTaskRequest) WithHTTPClient(client *http.Client) *GetReturnSubmissionTaskRequest {
	o.HTTPClient = client
	return o
}

// WriteToRequest writes these Request to a swagger request
func (o *GetReturnSubmissionTaskRequest) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param paymentId
	if err := r.SetPathParam("paymentId", o.PaymentID.String()); err != nil {
		return err
	}

	// path param returnId
	if err := r.SetPathParam("returnId", o.ReturnID.String()); err != nil {
		return err
	}

	// path param returnSubmissionId
	if err := r.SetPathParam("returnSubmissionId", o.ReturnSubmissionID.String()); err != nil {
		return err
	}

	// path param taskId
	if err := r.SetPathParam("taskId", o.TaskID.String()); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
