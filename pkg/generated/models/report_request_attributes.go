// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"log"

	"github.com/form3tech-oss/go-form3/v6/pkg/client"
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ReportRequestAttributes report request attributes
// swagger:model ReportRequestAttributes
type ReportRequestAttributes struct {

	// filter
	// Required: true
	Filter *ReportRequestFilter `json:"filter"`

	// payment scheme
	// Required: true
	PaymentScheme string `json:"payment_scheme"`

	// report type
	// Required: true
	ReportType string `json:"report_type"`

	// status
	// Required: true
	Status *ReportRequestStatus `json:"status"`
}

func ReportRequestAttributesWithDefaults(defaults client.Defaults) *ReportRequestAttributes {
	return &ReportRequestAttributes{

		Filter: ReportRequestFilterWithDefaults(defaults),

		PaymentScheme: defaults.GetString("ReportRequestAttributes", "payment_scheme"),

		ReportType: defaults.GetString("ReportRequestAttributes", "report_type"),

		// TODO Status: ReportRequestStatus,

	}
}

func (m *ReportRequestAttributes) WithFilter(filter ReportRequestFilter) *ReportRequestAttributes {

	m.Filter = &filter

	return m
}

func (m *ReportRequestAttributes) WithoutFilter() *ReportRequestAttributes {
	m.Filter = nil
	return m
}

func (m *ReportRequestAttributes) WithPaymentScheme(paymentScheme string) *ReportRequestAttributes {

	m.PaymentScheme = paymentScheme

	return m
}

func (m *ReportRequestAttributes) WithReportType(reportType string) *ReportRequestAttributes {

	m.ReportType = reportType

	return m
}

func (m *ReportRequestAttributes) WithStatus(status ReportRequestStatus) *ReportRequestAttributes {

	m.Status = &status

	return m
}

func (m *ReportRequestAttributes) WithoutStatus() *ReportRequestAttributes {
	m.Status = nil
	return m
}

// Validate validates this report request attributes
func (m *ReportRequestAttributes) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFilter(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePaymentScheme(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReportType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ReportRequestAttributes) validateFilter(formats strfmt.Registry) error {

	if err := validate.Required("filter", "body", m.Filter); err != nil {
		return err
	}

	if m.Filter != nil {
		if err := m.Filter.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("filter")
			}
			return err
		}
	}

	return nil
}

func (m *ReportRequestAttributes) validatePaymentScheme(formats strfmt.Registry) error {

	if err := validate.RequiredString("payment_scheme", "body", string(m.PaymentScheme)); err != nil {
		return err
	}

	return nil
}

func (m *ReportRequestAttributes) validateReportType(formats strfmt.Registry) error {

	if err := validate.RequiredString("report_type", "body", string(m.ReportType)); err != nil {
		return err
	}

	return nil
}

func (m *ReportRequestAttributes) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	if m.Status != nil {
		if err := m.Status.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ReportRequestAttributes) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ReportRequestAttributes) UnmarshalBinary(b []byte) error {
	var res ReportRequestAttributes
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
func (m *ReportRequestAttributes) Json() string {
	json, err := json.MarshalIndent(m, "  ", "  ")
	if err != nil {
		log.Fatal(err)
	}
	return string(json)
}
