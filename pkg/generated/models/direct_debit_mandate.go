// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"log"

	"github.com/form3tech-oss/go-form3/v7/pkg/client"
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DirectDebitMandate direct debit mandate
// swagger:model DirectDebitMandate
type DirectDebitMandate struct {

	// id
	// Format: uuid
	ID strfmt.UUID `json:"id,omitempty"`

	// type
	// Pattern: ^[A-Za-z_]*$
	Type string `json:"type,omitempty"`
}

func DirectDebitMandateWithDefaults(defaults client.Defaults) *DirectDebitMandate {
	return &DirectDebitMandate{

		ID: defaults.GetStrfmtUUID("DirectDebitMandate", "id"),

		Type: defaults.GetString("DirectDebitMandate", "type"),
	}
}

func (m *DirectDebitMandate) WithID(id strfmt.UUID) *DirectDebitMandate {

	m.ID = id

	return m
}

func (m *DirectDebitMandate) WithType(typeVar string) *DirectDebitMandate {

	m.Type = typeVar

	return m
}

// Validate validates this direct debit mandate
func (m *DirectDebitMandate) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DirectDebitMandate) validateID(formats strfmt.Registry) error {

	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.FormatOf("id", "body", "uuid", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *DirectDebitMandate) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	if err := validate.Pattern("type", "body", string(m.Type), `^[A-Za-z_]*$`); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DirectDebitMandate) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DirectDebitMandate) UnmarshalBinary(b []byte) error {
	var res DirectDebitMandate
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
func (m *DirectDebitMandate) Json() string {
	json, err := json.MarshalIndent(m, "  ", "  ")
	if err != nil {
		log.Fatal(err)
	}
	return string(json)
}
