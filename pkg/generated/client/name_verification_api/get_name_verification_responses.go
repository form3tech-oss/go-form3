// Code generated by go-swagger; DO NOT EDIT.

package name_verification_api

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/form3tech-oss/go-form3/v7/pkg/generated/models"
)

// GetNameVerificationReader is a Reader for the GetNameVerification structure.
type GetNameVerificationReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetNameVerificationReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetNameVerificationOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewGetNameVerificationBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewGetNameVerificationForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewGetNameVerificationNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewGetNameVerificationInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetNameVerificationOK creates a GetNameVerificationOK with default headers values
func NewGetNameVerificationOK() *GetNameVerificationOK {
	return &GetNameVerificationOK{}
}

/*
GetNameVerificationOK handles this case with default header values.

Name verification details
*/
type GetNameVerificationOK struct {

	//Payload

	// isStream: false
	*models.NameVerificationDetailsResponse
}

// IsSuccess returns true when this get name verification o k response has a 2xx status code
func (o *GetNameVerificationOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get name verification o k response has a 3xx status code
func (o *GetNameVerificationOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get name verification o k response has a 4xx status code
func (o *GetNameVerificationOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get name verification o k response has a 5xx status code
func (o *GetNameVerificationOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get name verification o k response a status code equal to that given
func (o *GetNameVerificationOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get name verification o k response
func (o *GetNameVerificationOK) Code() int {
	return 200
}

func (o *GetNameVerificationOK) Error() string {
	return fmt.Sprintf("[GET /organisation/nameverifications/{id}][%d] getNameVerificationOK", 200)
}

func (o *GetNameVerificationOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.NameVerificationDetailsResponse = new(models.NameVerificationDetailsResponse)

	// response payload

	if err := consumer.Consume(response.Body(), o.NameVerificationDetailsResponse); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetNameVerificationBadRequest creates a GetNameVerificationBadRequest with default headers values
func NewGetNameVerificationBadRequest() *GetNameVerificationBadRequest {
	return &GetNameVerificationBadRequest{}
}

/*
GetNameVerificationBadRequest handles this case with default header values.

Bad Request
*/
type GetNameVerificationBadRequest struct {

	//Payload

	// isStream: false
	*models.APIError
}

// IsSuccess returns true when this get name verification bad request response has a 2xx status code
func (o *GetNameVerificationBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get name verification bad request response has a 3xx status code
func (o *GetNameVerificationBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get name verification bad request response has a 4xx status code
func (o *GetNameVerificationBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get name verification bad request response has a 5xx status code
func (o *GetNameVerificationBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get name verification bad request response a status code equal to that given
func (o *GetNameVerificationBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get name verification bad request response
func (o *GetNameVerificationBadRequest) Code() int {
	return 400
}

func (o *GetNameVerificationBadRequest) Error() string {
	return fmt.Sprintf("[GET /organisation/nameverifications/{id}][%d] getNameVerificationBadRequest", 400)
}

func (o *GetNameVerificationBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.APIError = new(models.APIError)

	// response payload

	if err := consumer.Consume(response.Body(), o.APIError); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetNameVerificationForbidden creates a GetNameVerificationForbidden with default headers values
func NewGetNameVerificationForbidden() *GetNameVerificationForbidden {
	return &GetNameVerificationForbidden{}
}

/*
GetNameVerificationForbidden handles this case with default header values.

Forbidden
*/
type GetNameVerificationForbidden struct {

	//Payload

	// isStream: false
	*models.APIError
}

// IsSuccess returns true when this get name verification forbidden response has a 2xx status code
func (o *GetNameVerificationForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get name verification forbidden response has a 3xx status code
func (o *GetNameVerificationForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get name verification forbidden response has a 4xx status code
func (o *GetNameVerificationForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get name verification forbidden response has a 5xx status code
func (o *GetNameVerificationForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get name verification forbidden response a status code equal to that given
func (o *GetNameVerificationForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get name verification forbidden response
func (o *GetNameVerificationForbidden) Code() int {
	return 403
}

func (o *GetNameVerificationForbidden) Error() string {
	return fmt.Sprintf("[GET /organisation/nameverifications/{id}][%d] getNameVerificationForbidden", 403)
}

func (o *GetNameVerificationForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.APIError = new(models.APIError)

	// response payload

	if err := consumer.Consume(response.Body(), o.APIError); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetNameVerificationNotFound creates a GetNameVerificationNotFound with default headers values
func NewGetNameVerificationNotFound() *GetNameVerificationNotFound {
	return &GetNameVerificationNotFound{}
}

/*
GetNameVerificationNotFound handles this case with default header values.

Not Found
*/
type GetNameVerificationNotFound struct {

	//Payload

	// isStream: false
	*models.APIError
}

// IsSuccess returns true when this get name verification not found response has a 2xx status code
func (o *GetNameVerificationNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get name verification not found response has a 3xx status code
func (o *GetNameVerificationNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get name verification not found response has a 4xx status code
func (o *GetNameVerificationNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get name verification not found response has a 5xx status code
func (o *GetNameVerificationNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get name verification not found response a status code equal to that given
func (o *GetNameVerificationNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get name verification not found response
func (o *GetNameVerificationNotFound) Code() int {
	return 404
}

func (o *GetNameVerificationNotFound) Error() string {
	return fmt.Sprintf("[GET /organisation/nameverifications/{id}][%d] getNameVerificationNotFound", 404)
}

func (o *GetNameVerificationNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.APIError = new(models.APIError)

	// response payload

	if err := consumer.Consume(response.Body(), o.APIError); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetNameVerificationInternalServerError creates a GetNameVerificationInternalServerError with default headers values
func NewGetNameVerificationInternalServerError() *GetNameVerificationInternalServerError {
	return &GetNameVerificationInternalServerError{}
}

/*
GetNameVerificationInternalServerError handles this case with default header values.

Internal Server Error
*/
type GetNameVerificationInternalServerError struct {

	//Payload

	// isStream: false
	*models.APIError
}

// IsSuccess returns true when this get name verification internal server error response has a 2xx status code
func (o *GetNameVerificationInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get name verification internal server error response has a 3xx status code
func (o *GetNameVerificationInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get name verification internal server error response has a 4xx status code
func (o *GetNameVerificationInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get name verification internal server error response has a 5xx status code
func (o *GetNameVerificationInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get name verification internal server error response a status code equal to that given
func (o *GetNameVerificationInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get name verification internal server error response
func (o *GetNameVerificationInternalServerError) Code() int {
	return 500
}

func (o *GetNameVerificationInternalServerError) Error() string {
	return fmt.Sprintf("[GET /organisation/nameverifications/{id}][%d] getNameVerificationInternalServerError", 500)
}

func (o *GetNameVerificationInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.APIError = new(models.APIError)

	// response payload

	if err := consumer.Consume(response.Body(), o.APIError); err != nil && err != io.EOF {
		return err
	}

	return nil
}
