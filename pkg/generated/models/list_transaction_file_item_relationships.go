// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"log"
	"strconv"

	"github.com/form3tech-oss/go-form3/v7/pkg/client"
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ListTransactionFileItemRelationships list transaction file item relationships
// swagger:model ListTransactionFileItemRelationships
type ListTransactionFileItemRelationships struct {

	// reports
	Reports *ThinRelationship `json:"reports,omitempty"`

	// transaction file admissions
	TransactionFileAdmissions *ListTransactionFileItemRelationshipsTransactionFileAdmissions `json:"transaction_file_admissions,omitempty"`

	// transaction file submissions
	TransactionFileSubmissions *ListTransactionFileItemRelationshipsTransactionFileSubmissions `json:"transaction_file_submissions,omitempty"`
}

func ListTransactionFileItemRelationshipsWithDefaults(defaults client.Defaults) *ListTransactionFileItemRelationships {
	return &ListTransactionFileItemRelationships{

		Reports: ThinRelationshipWithDefaults(defaults),

		TransactionFileAdmissions: ListTransactionFileItemRelationshipsTransactionFileAdmissionsWithDefaults(defaults),

		TransactionFileSubmissions: ListTransactionFileItemRelationshipsTransactionFileSubmissionsWithDefaults(defaults),
	}
}

func (m *ListTransactionFileItemRelationships) WithReports(reports ThinRelationship) *ListTransactionFileItemRelationships {

	m.Reports = &reports

	return m
}

func (m *ListTransactionFileItemRelationships) WithoutReports() *ListTransactionFileItemRelationships {
	m.Reports = nil
	return m
}

func (m *ListTransactionFileItemRelationships) WithTransactionFileAdmissions(transactionFileAdmissions ListTransactionFileItemRelationshipsTransactionFileAdmissions) *ListTransactionFileItemRelationships {

	m.TransactionFileAdmissions = &transactionFileAdmissions

	return m
}

func (m *ListTransactionFileItemRelationships) WithoutTransactionFileAdmissions() *ListTransactionFileItemRelationships {
	m.TransactionFileAdmissions = nil
	return m
}

func (m *ListTransactionFileItemRelationships) WithTransactionFileSubmissions(transactionFileSubmissions ListTransactionFileItemRelationshipsTransactionFileSubmissions) *ListTransactionFileItemRelationships {

	m.TransactionFileSubmissions = &transactionFileSubmissions

	return m
}

func (m *ListTransactionFileItemRelationships) WithoutTransactionFileSubmissions() *ListTransactionFileItemRelationships {
	m.TransactionFileSubmissions = nil
	return m
}

// Validate validates this list transaction file item relationships
func (m *ListTransactionFileItemRelationships) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateReports(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTransactionFileAdmissions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTransactionFileSubmissions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ListTransactionFileItemRelationships) validateReports(formats strfmt.Registry) error {

	if swag.IsZero(m.Reports) { // not required
		return nil
	}

	if m.Reports != nil {
		if err := m.Reports.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("reports")
			}
			return err
		}
	}

	return nil
}

func (m *ListTransactionFileItemRelationships) validateTransactionFileAdmissions(formats strfmt.Registry) error {

	if swag.IsZero(m.TransactionFileAdmissions) { // not required
		return nil
	}

	if m.TransactionFileAdmissions != nil {
		if err := m.TransactionFileAdmissions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("transaction_file_admissions")
			}
			return err
		}
	}

	return nil
}

func (m *ListTransactionFileItemRelationships) validateTransactionFileSubmissions(formats strfmt.Registry) error {

	if swag.IsZero(m.TransactionFileSubmissions) { // not required
		return nil
	}

	if m.TransactionFileSubmissions != nil {
		if err := m.TransactionFileSubmissions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("transaction_file_submissions")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ListTransactionFileItemRelationships) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ListTransactionFileItemRelationships) UnmarshalBinary(b []byte) error {
	var res ListTransactionFileItemRelationships
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
func (m *ListTransactionFileItemRelationships) Json() string {
	json, err := json.MarshalIndent(m, "  ", "  ")
	if err != nil {
		log.Fatal(err)
	}
	return string(json)
}

// ListTransactionFileItemRelationshipsTransactionFileAdmissions list transaction file item relationships transaction file admissions
// swagger:model ListTransactionFileItemRelationshipsTransactionFileAdmissions
type ListTransactionFileItemRelationshipsTransactionFileAdmissions struct {

	// data
	Data []*TransactionFileAdmission `json:"data"`
}

func ListTransactionFileItemRelationshipsTransactionFileAdmissionsWithDefaults(defaults client.Defaults) *ListTransactionFileItemRelationshipsTransactionFileAdmissions {
	return &ListTransactionFileItemRelationshipsTransactionFileAdmissions{

		Data: make([]*TransactionFileAdmission, 0),
	}
}

func (m *ListTransactionFileItemRelationshipsTransactionFileAdmissions) WithData(data []*TransactionFileAdmission) *ListTransactionFileItemRelationshipsTransactionFileAdmissions {

	m.Data = data

	return m
}

// Validate validates this list transaction file item relationships transaction file admissions
func (m *ListTransactionFileItemRelationshipsTransactionFileAdmissions) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ListTransactionFileItemRelationshipsTransactionFileAdmissions) validateData(formats strfmt.Registry) error {

	if swag.IsZero(m.Data) { // not required
		return nil
	}

	for i := 0; i < len(m.Data); i++ {
		if swag.IsZero(m.Data[i]) { // not required
			continue
		}

		if m.Data[i] != nil {
			if err := m.Data[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("transaction_file_admissions" + "." + "data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ListTransactionFileItemRelationshipsTransactionFileAdmissions) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ListTransactionFileItemRelationshipsTransactionFileAdmissions) UnmarshalBinary(b []byte) error {
	var res ListTransactionFileItemRelationshipsTransactionFileAdmissions
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
func (m *ListTransactionFileItemRelationshipsTransactionFileAdmissions) Json() string {
	json, err := json.MarshalIndent(m, "  ", "  ")
	if err != nil {
		log.Fatal(err)
	}
	return string(json)
}

// ListTransactionFileItemRelationshipsTransactionFileSubmissions list transaction file item relationships transaction file submissions
// swagger:model ListTransactionFileItemRelationshipsTransactionFileSubmissions
type ListTransactionFileItemRelationshipsTransactionFileSubmissions struct {

	// data
	Data []*TransactionFileSubmissionShortRelationship `json:"data"`
}

func ListTransactionFileItemRelationshipsTransactionFileSubmissionsWithDefaults(defaults client.Defaults) *ListTransactionFileItemRelationshipsTransactionFileSubmissions {
	return &ListTransactionFileItemRelationshipsTransactionFileSubmissions{

		Data: make([]*TransactionFileSubmissionShortRelationship, 0),
	}
}

func (m *ListTransactionFileItemRelationshipsTransactionFileSubmissions) WithData(data []*TransactionFileSubmissionShortRelationship) *ListTransactionFileItemRelationshipsTransactionFileSubmissions {

	m.Data = data

	return m
}

// Validate validates this list transaction file item relationships transaction file submissions
func (m *ListTransactionFileItemRelationshipsTransactionFileSubmissions) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ListTransactionFileItemRelationshipsTransactionFileSubmissions) validateData(formats strfmt.Registry) error {

	if swag.IsZero(m.Data) { // not required
		return nil
	}

	for i := 0; i < len(m.Data); i++ {
		if swag.IsZero(m.Data[i]) { // not required
			continue
		}

		if m.Data[i] != nil {
			if err := m.Data[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("transaction_file_submissions" + "." + "data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ListTransactionFileItemRelationshipsTransactionFileSubmissions) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ListTransactionFileItemRelationshipsTransactionFileSubmissions) UnmarshalBinary(b []byte) error {
	var res ListTransactionFileItemRelationshipsTransactionFileSubmissions
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
func (m *ListTransactionFileItemRelationshipsTransactionFileSubmissions) Json() string {
	json, err := json.MarshalIndent(m, "  ", "  ")
	if err != nil {
		log.Fatal(err)
	}
	return string(json)
}
