// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"log"
	"strconv"

	"github.com/form3tech-oss/go-form3/v6/pkg/client"
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DuplicateTransactionInformation duplicate transaction information
// swagger:model DuplicateTransactionInformation
type DuplicateTransactionInformation struct {

	// Unique identification, as assigned by the initiating party, to unambiguously identify the transaction. This identification is passed on, unchanged, throughout the entire end-to-end chain.
	// Max Length: 35
	EndToEndReference string `json:"end_to_end_reference,omitempty"`

	// Reference for the duplicated payment for this Exception and Investigation case.
	References []*QueryReference `json:"references,omitempty"`

	// Unique identification, as assigned by the first instructing agent, to unambiguously identify the transaction that is passed on, unchanged, throughout the entire interbank chain.
	// Max Length: 35
	SchemeTransactionID string `json:"scheme_transaction_id,omitempty"`
}

func DuplicateTransactionInformationWithDefaults(defaults client.Defaults) *DuplicateTransactionInformation {
	return &DuplicateTransactionInformation{

		EndToEndReference: defaults.GetString("DuplicateTransactionInformation", "end_to_end_reference"),

		References: make([]*QueryReference, 0),

		SchemeTransactionID: defaults.GetString("DuplicateTransactionInformation", "scheme_transaction_id"),
	}
}

func (m *DuplicateTransactionInformation) WithEndToEndReference(endToEndReference string) *DuplicateTransactionInformation {

	m.EndToEndReference = endToEndReference

	return m
}

func (m *DuplicateTransactionInformation) WithReferences(references []*QueryReference) *DuplicateTransactionInformation {

	m.References = references

	return m
}

func (m *DuplicateTransactionInformation) WithSchemeTransactionID(schemeTransactionID string) *DuplicateTransactionInformation {

	m.SchemeTransactionID = schemeTransactionID

	return m
}

// Validate validates this duplicate transaction information
func (m *DuplicateTransactionInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEndToEndReference(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReferences(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSchemeTransactionID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DuplicateTransactionInformation) validateEndToEndReference(formats strfmt.Registry) error {

	if swag.IsZero(m.EndToEndReference) { // not required
		return nil
	}

	if err := validate.MaxLength("end_to_end_reference", "body", string(m.EndToEndReference), 35); err != nil {
		return err
	}

	return nil
}

func (m *DuplicateTransactionInformation) validateReferences(formats strfmt.Registry) error {

	if swag.IsZero(m.References) { // not required
		return nil
	}

	for i := 0; i < len(m.References); i++ {
		if swag.IsZero(m.References[i]) { // not required
			continue
		}

		if m.References[i] != nil {
			if err := m.References[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("references" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DuplicateTransactionInformation) validateSchemeTransactionID(formats strfmt.Registry) error {

	if swag.IsZero(m.SchemeTransactionID) { // not required
		return nil
	}

	if err := validate.MaxLength("scheme_transaction_id", "body", string(m.SchemeTransactionID), 35); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DuplicateTransactionInformation) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DuplicateTransactionInformation) UnmarshalBinary(b []byte) error {
	var res DuplicateTransactionInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
func (m *DuplicateTransactionInformation) Json() string {
	json, err := json.MarshalIndent(m, "  ", "  ")
	if err != nil {
		log.Fatal(err)
	}
	return string(json)
}
