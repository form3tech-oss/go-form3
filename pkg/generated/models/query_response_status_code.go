// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"log"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// QueryResponseStatusCode query response status code
// swagger:model QueryResponseStatusCode
type QueryResponseStatusCode string

const (

	// QueryResponseStatusCodeIPAY captures enum value "IPAY"
	QueryResponseStatusCodeIPAY QueryResponseStatusCode = "IPAY"

	// QueryResponseStatusCodeINFO captures enum value "INFO"
	QueryResponseStatusCodeINFO QueryResponseStatusCode = "INFO"

	// QueryResponseStatusCodeNINF captures enum value "NINF"
	QueryResponseStatusCodeNINF QueryResponseStatusCode = "NINF"

	// QueryResponseStatusCodePDNG captures enum value "PDNG"
	QueryResponseStatusCodePDNG QueryResponseStatusCode = "PDNG"

	// QueryResponseStatusCodeIDUP captures enum value "IDUP"
	QueryResponseStatusCodeIDUP QueryResponseStatusCode = "IDUP"
)

// for schema
var queryResponseStatusCodeEnum []interface{}

func init() {
	var res []QueryResponseStatusCode
	if err := json.Unmarshal([]byte(`["IPAY","INFO","NINF","PDNG","IDUP"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		queryResponseStatusCodeEnum = append(queryResponseStatusCodeEnum, v)
	}
}

func (m QueryResponseStatusCode) validateQueryResponseStatusCodeEnum(path, location string, value QueryResponseStatusCode) error {
	if err := validate.Enum(path, location, value, queryResponseStatusCodeEnum); err != nil {
		return err
	}
	return nil
}

// Validate validates this query response status code
func (m QueryResponseStatusCode) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateQueryResponseStatusCodeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *QueryResponseStatusCode) Json() string {
	json, err := json.MarshalIndent(m, "  ", "  ")
	if err != nil {
		log.Fatal(err)
	}
	return string(json)
}
