// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"log"

	"github.com/form3tech-oss/go-form3/v4/pkg/client"
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DisputedTransaction disputed transaction
// swagger:model DisputedTransaction
type DisputedTransaction struct {

	// amount
	// Required: true
	// Pattern: ^[0-9.]{0,20}$
	Amount *string `json:"amount"`

	// date
	// Required: true
	// Format: date
	Date *strfmt.Date `json:"date"`
}

func DisputedTransactionWithDefaults(defaults client.Defaults) *DisputedTransaction {
	return &DisputedTransaction{

		Amount: defaults.GetStringPtr("DisputedTransaction", "amount"),

		Date: defaults.GetStrfmtDatePtr("DisputedTransaction", "date"),
	}
}

func (m *DisputedTransaction) WithAmount(amount string) *DisputedTransaction {

	m.Amount = &amount

	return m
}

func (m *DisputedTransaction) WithoutAmount() *DisputedTransaction {
	m.Amount = nil
	return m
}

func (m *DisputedTransaction) WithDate(date strfmt.Date) *DisputedTransaction {

	m.Date = &date

	return m
}

func (m *DisputedTransaction) WithoutDate() *DisputedTransaction {
	m.Date = nil
	return m
}

// Validate validates this disputed transaction
func (m *DisputedTransaction) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DisputedTransaction) validateAmount(formats strfmt.Registry) error {

	if err := validate.Required("amount", "body", m.Amount); err != nil {
		return err
	}

	if err := validate.Pattern("amount", "body", string(*m.Amount), `^[0-9.]{0,20}$`); err != nil {
		return err
	}

	return nil
}

func (m *DisputedTransaction) validateDate(formats strfmt.Registry) error {

	if err := validate.Required("date", "body", m.Date); err != nil {
		return err
	}

	if err := validate.FormatOf("date", "body", "date", m.Date.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DisputedTransaction) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DisputedTransaction) UnmarshalBinary(b []byte) error {
	var res DisputedTransaction
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
func (m *DisputedTransaction) Json() string {
	json, err := json.MarshalIndent(m, "  ", "  ")
	if err != nil {
		log.Fatal(err)
	}
	return string(json)
}
