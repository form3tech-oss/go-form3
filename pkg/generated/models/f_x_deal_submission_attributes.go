// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"log"

	"github.com/form3tech-oss/go-form3/pkg/client"
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// FXDealSubmissionAttributes f x deal submission attributes
// swagger:model FXDealSubmissionAttributes
type FXDealSubmissionAttributes struct {

	// provider id
	// Required: true
	ProviderID FXDealSubmissionProviderID `json:"provider_id"`

	// purposes coded
	// Required: true
	PurposesCoded FXDealSubmissionPurposesCoded `json:"purposes_coded"`

	// reference
	// Required: true
	Reference *FXDealSubmissionReference `json:"reference"`

	// status
	// Required: true
	Status FXDealSubmissionStatus `json:"status"`

	// status reason
	// Required: true
	StatusReason FXDealSubmissionStatusReason `json:"status_reason"`
}

func FXDealSubmissionAttributesWithDefaults(defaults client.Defaults) *FXDealSubmissionAttributes {
	return &FXDealSubmissionAttributes{

		// TODO ProviderID: FXDealSubmissionProviderID,

		// TODO PurposesCoded: FXDealSubmissionPurposesCoded,

		// TODO Reference: FXDealSubmissionReference,

		// TODO Status: FXDealSubmissionStatus,

		// TODO StatusReason: FXDealSubmissionStatusReason,

	}
}

func (m *FXDealSubmissionAttributes) WithProviderID(providerID FXDealSubmissionProviderID) *FXDealSubmissionAttributes {

	m.ProviderID = providerID

	return m
}

func (m *FXDealSubmissionAttributes) WithPurposesCoded(purposesCoded FXDealSubmissionPurposesCoded) *FXDealSubmissionAttributes {

	m.PurposesCoded = purposesCoded

	return m
}

func (m *FXDealSubmissionAttributes) WithReference(reference FXDealSubmissionReference) *FXDealSubmissionAttributes {

	m.Reference = &reference

	return m
}

func (m *FXDealSubmissionAttributes) WithoutReference() *FXDealSubmissionAttributes {
	m.Reference = nil
	return m
}

func (m *FXDealSubmissionAttributes) WithStatus(status FXDealSubmissionStatus) *FXDealSubmissionAttributes {

	m.Status = status

	return m
}

func (m *FXDealSubmissionAttributes) WithStatusReason(statusReason FXDealSubmissionStatusReason) *FXDealSubmissionAttributes {

	m.StatusReason = statusReason

	return m
}

// Validate validates this f x deal submission attributes
func (m *FXDealSubmissionAttributes) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProviderID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePurposesCoded(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReference(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatusReason(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FXDealSubmissionAttributes) validateProviderID(formats strfmt.Registry) error {

	if err := m.ProviderID.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("provider_id")
		}
		return err
	}

	return nil
}

func (m *FXDealSubmissionAttributes) validatePurposesCoded(formats strfmt.Registry) error {

	if err := m.PurposesCoded.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("purposes_coded")
		}
		return err
	}

	return nil
}

func (m *FXDealSubmissionAttributes) validateReference(formats strfmt.Registry) error {

	if err := validate.Required("reference", "body", m.Reference); err != nil {
		return err
	}

	if m.Reference != nil {
		if err := m.Reference.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("reference")
			}
			return err
		}
	}

	return nil
}

func (m *FXDealSubmissionAttributes) validateStatus(formats strfmt.Registry) error {

	if err := m.Status.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("status")
		}
		return err
	}

	return nil
}

func (m *FXDealSubmissionAttributes) validateStatusReason(formats strfmt.Registry) error {

	if err := m.StatusReason.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("status_reason")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FXDealSubmissionAttributes) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FXDealSubmissionAttributes) UnmarshalBinary(b []byte) error {
	var res FXDealSubmissionAttributes
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
func (m *FXDealSubmissionAttributes) Json() string {
	json, err := json.MarshalIndent(m, "  ", "  ")
	if err != nil {
		log.Fatal(err)
	}
	return string(json)
}
