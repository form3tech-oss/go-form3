// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"log"
	"strconv"

	"github.com/form3tech-oss/go-form3/v6/pkg/client"
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ReturnPayment return payment
// swagger:model ReturnPayment
type ReturnPayment struct {

	// attributes
	Attributes *ReturnPaymentAttributes `json:"attributes,omitempty"`

	// created on
	// Format: date-time
	CreatedOn *strfmt.DateTime `json:"created_on,omitempty"`

	// Unique resource ID
	// Required: true
	// Format: uuid
	ID *strfmt.UUID `json:"id"`

	// modified on
	// Format: date-time
	ModifiedOn *strfmt.DateTime `json:"modified_on,omitempty"`

	// Unique ID of the organisation this resource is created by
	// Required: true
	// Format: uuid
	OrganisationID *strfmt.UUID `json:"organisation_id"`

	// relationships
	Relationships *ReturnPaymentRelationships `json:"relationships,omitempty"`

	// Name of the resource type
	// Pattern: ^[A-Za-z_]*$
	Type string `json:"type,omitempty"`

	// Version number
	// Minimum: 0
	Version *int64 `json:"version,omitempty"`
}

func ReturnPaymentWithDefaults(defaults client.Defaults) *ReturnPayment {
	return &ReturnPayment{

		Attributes: ReturnPaymentAttributesWithDefaults(defaults),

		CreatedOn: defaults.GetStrfmtDateTimePtr("ReturnPayment", "created_on"),

		ID: defaults.GetStrfmtUUIDPtr("ReturnPayment", "id"),

		ModifiedOn: defaults.GetStrfmtDateTimePtr("ReturnPayment", "modified_on"),

		OrganisationID: defaults.GetStrfmtUUIDPtr("ReturnPayment", "organisation_id"),

		Relationships: ReturnPaymentRelationshipsWithDefaults(defaults),

		Type: defaults.GetString("ReturnPayment", "type"),

		Version: defaults.GetInt64Ptr("ReturnPayment", "version"),
	}
}

func (m *ReturnPayment) WithAttributes(attributes ReturnPaymentAttributes) *ReturnPayment {

	m.Attributes = &attributes

	return m
}

func (m *ReturnPayment) WithoutAttributes() *ReturnPayment {
	m.Attributes = nil
	return m
}

func (m *ReturnPayment) WithCreatedOn(createdOn strfmt.DateTime) *ReturnPayment {

	m.CreatedOn = &createdOn

	return m
}

func (m *ReturnPayment) WithoutCreatedOn() *ReturnPayment {
	m.CreatedOn = nil
	return m
}

func (m *ReturnPayment) WithID(id strfmt.UUID) *ReturnPayment {

	m.ID = &id

	return m
}

func (m *ReturnPayment) WithoutID() *ReturnPayment {
	m.ID = nil
	return m
}

func (m *ReturnPayment) WithModifiedOn(modifiedOn strfmt.DateTime) *ReturnPayment {

	m.ModifiedOn = &modifiedOn

	return m
}

func (m *ReturnPayment) WithoutModifiedOn() *ReturnPayment {
	m.ModifiedOn = nil
	return m
}

func (m *ReturnPayment) WithOrganisationID(organisationID strfmt.UUID) *ReturnPayment {

	m.OrganisationID = &organisationID

	return m
}

func (m *ReturnPayment) WithoutOrganisationID() *ReturnPayment {
	m.OrganisationID = nil
	return m
}

func (m *ReturnPayment) WithRelationships(relationships ReturnPaymentRelationships) *ReturnPayment {

	m.Relationships = &relationships

	return m
}

func (m *ReturnPayment) WithoutRelationships() *ReturnPayment {
	m.Relationships = nil
	return m
}

func (m *ReturnPayment) WithType(typeVar string) *ReturnPayment {

	m.Type = typeVar

	return m
}

func (m *ReturnPayment) WithVersion(version int64) *ReturnPayment {

	m.Version = &version

	return m
}

func (m *ReturnPayment) WithoutVersion() *ReturnPayment {
	m.Version = nil
	return m
}

// Validate validates this return payment
func (m *ReturnPayment) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAttributes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedOn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateModifiedOn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrganisationID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRelationships(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVersion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ReturnPayment) validateAttributes(formats strfmt.Registry) error {

	if swag.IsZero(m.Attributes) { // not required
		return nil
	}

	if m.Attributes != nil {
		if err := m.Attributes.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("attributes")
			}
			return err
		}
	}

	return nil
}

func (m *ReturnPayment) validateCreatedOn(formats strfmt.Registry) error {

	if swag.IsZero(m.CreatedOn) { // not required
		return nil
	}

	if err := validate.FormatOf("created_on", "body", "date-time", m.CreatedOn.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ReturnPayment) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	if err := validate.FormatOf("id", "body", "uuid", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ReturnPayment) validateModifiedOn(formats strfmt.Registry) error {

	if swag.IsZero(m.ModifiedOn) { // not required
		return nil
	}

	if err := validate.FormatOf("modified_on", "body", "date-time", m.ModifiedOn.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ReturnPayment) validateOrganisationID(formats strfmt.Registry) error {

	if err := validate.Required("organisation_id", "body", m.OrganisationID); err != nil {
		return err
	}

	if err := validate.FormatOf("organisation_id", "body", "uuid", m.OrganisationID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ReturnPayment) validateRelationships(formats strfmt.Registry) error {

	if swag.IsZero(m.Relationships) { // not required
		return nil
	}

	if m.Relationships != nil {
		if err := m.Relationships.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("relationships")
			}
			return err
		}
	}

	return nil
}

func (m *ReturnPayment) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	if err := validate.Pattern("type", "body", string(m.Type), `^[A-Za-z_]*$`); err != nil {
		return err
	}

	return nil
}

func (m *ReturnPayment) validateVersion(formats strfmt.Registry) error {

	if swag.IsZero(m.Version) { // not required
		return nil
	}

	if err := validate.MinimumInt("version", "body", int64(*m.Version), 0, false); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ReturnPayment) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ReturnPayment) UnmarshalBinary(b []byte) error {
	var res ReturnPayment
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
func (m *ReturnPayment) Json() string {
	json, err := json.MarshalIndent(m, "  ", "  ")
	if err != nil {
		log.Fatal(err)
	}
	return string(json)
}

// ReturnPaymentAttributes return payment attributes
// swagger:model ReturnPaymentAttributes
type ReturnPaymentAttributes struct {

	// The amount to return which should correspond to the amount of the original payment
	// Pattern: ^[0-9.]{0,20}$
	Amount string `json:"amount,omitempty"`

	// Unique identifier for organisations collecting payments
	ClearingID string `json:"clearing_id,omitempty"`

	// ISO currency code for transaction amount
	Currency string `json:"currency,omitempty"`

	// Time a payment was released from being held due to a limit breach
	// Read Only: true
	// Format: date-time
	LimitBreachEndDatetime *strfmt.DateTime `json:"limit_breach_end_datetime,omitempty"`

	// Start time a payment was held due to a limit breach
	// Read Only: true
	// Format: date-time
	LimitBreachStartDatetime *strfmt.DateTime `json:"limit_breach_start_datetime,omitempty"`

	// reason
	Reason *string `json:"reason,omitempty"`

	// The return [reason code](http://draft-api-docs.form3.tech/api.html#enumerations-payment-return-codes)
	ReturnCode string `json:"return_code,omitempty"`

	// A unique reference to the return payment instruction. If not supplied, the value is generated by Form3.
	SchemeTransactionID string `json:"scheme_transaction_id,omitempty"`

	// settlement
	Settlement *Settlement `json:"settlement,omitempty"`

	// The scheme-specific unique transaction ID. Populated by the scheme.
	// Max Length: 42
	UniqueSchemeID string `json:"unique_scheme_id,omitempty"`

	// All purpose list of key-value pairs specific data stored on the return.
	// Max Items: 5
	UserDefinedData []*UserDefinedData `json:"user_defined_data,omitempty"`
}

func ReturnPaymentAttributesWithDefaults(defaults client.Defaults) *ReturnPaymentAttributes {
	return &ReturnPaymentAttributes{

		Amount: defaults.GetString("ReturnPaymentAttributes", "amount"),

		ClearingID: defaults.GetString("ReturnPaymentAttributes", "clearing_id"),

		Currency: defaults.GetString("ReturnPaymentAttributes", "currency"),

		LimitBreachEndDatetime: defaults.GetStrfmtDateTimePtr("ReturnPaymentAttributes", "limit_breach_end_datetime"),

		LimitBreachStartDatetime: defaults.GetStrfmtDateTimePtr("ReturnPaymentAttributes", "limit_breach_start_datetime"),

		Reason: defaults.GetStringPtr("ReturnPaymentAttributes", "reason"),

		ReturnCode: defaults.GetString("ReturnPaymentAttributes", "return_code"),

		SchemeTransactionID: defaults.GetString("ReturnPaymentAttributes", "scheme_transaction_id"),

		Settlement: SettlementWithDefaults(defaults),

		UniqueSchemeID: defaults.GetString("ReturnPaymentAttributes", "unique_scheme_id"),

		UserDefinedData: make([]*UserDefinedData, 0),
	}
}

func (m *ReturnPaymentAttributes) WithAmount(amount string) *ReturnPaymentAttributes {

	m.Amount = amount

	return m
}

func (m *ReturnPaymentAttributes) WithClearingID(clearingID string) *ReturnPaymentAttributes {

	m.ClearingID = clearingID

	return m
}

func (m *ReturnPaymentAttributes) WithCurrency(currency string) *ReturnPaymentAttributes {

	m.Currency = currency

	return m
}

func (m *ReturnPaymentAttributes) WithLimitBreachEndDatetime(limitBreachEndDatetime strfmt.DateTime) *ReturnPaymentAttributes {

	m.LimitBreachEndDatetime = &limitBreachEndDatetime

	return m
}

func (m *ReturnPaymentAttributes) WithoutLimitBreachEndDatetime() *ReturnPaymentAttributes {
	m.LimitBreachEndDatetime = nil
	return m
}

func (m *ReturnPaymentAttributes) WithLimitBreachStartDatetime(limitBreachStartDatetime strfmt.DateTime) *ReturnPaymentAttributes {

	m.LimitBreachStartDatetime = &limitBreachStartDatetime

	return m
}

func (m *ReturnPaymentAttributes) WithoutLimitBreachStartDatetime() *ReturnPaymentAttributes {
	m.LimitBreachStartDatetime = nil
	return m
}

func (m *ReturnPaymentAttributes) WithReason(reason string) *ReturnPaymentAttributes {

	m.Reason = &reason

	return m
}

func (m *ReturnPaymentAttributes) WithoutReason() *ReturnPaymentAttributes {
	m.Reason = nil
	return m
}

func (m *ReturnPaymentAttributes) WithReturnCode(returnCode string) *ReturnPaymentAttributes {

	m.ReturnCode = returnCode

	return m
}

func (m *ReturnPaymentAttributes) WithSchemeTransactionID(schemeTransactionID string) *ReturnPaymentAttributes {

	m.SchemeTransactionID = schemeTransactionID

	return m
}

func (m *ReturnPaymentAttributes) WithSettlement(settlement Settlement) *ReturnPaymentAttributes {

	m.Settlement = &settlement

	return m
}

func (m *ReturnPaymentAttributes) WithoutSettlement() *ReturnPaymentAttributes {
	m.Settlement = nil
	return m
}

func (m *ReturnPaymentAttributes) WithUniqueSchemeID(uniqueSchemeID string) *ReturnPaymentAttributes {

	m.UniqueSchemeID = uniqueSchemeID

	return m
}

func (m *ReturnPaymentAttributes) WithUserDefinedData(userDefinedData []*UserDefinedData) *ReturnPaymentAttributes {

	m.UserDefinedData = userDefinedData

	return m
}

// Validate validates this return payment attributes
func (m *ReturnPaymentAttributes) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLimitBreachEndDatetime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLimitBreachStartDatetime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSettlement(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUniqueSchemeID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserDefinedData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ReturnPaymentAttributes) validateAmount(formats strfmt.Registry) error {

	if swag.IsZero(m.Amount) { // not required
		return nil
	}

	if err := validate.Pattern("attributes"+"."+"amount", "body", string(m.Amount), `^[0-9.]{0,20}$`); err != nil {
		return err
	}

	return nil
}

func (m *ReturnPaymentAttributes) validateLimitBreachEndDatetime(formats strfmt.Registry) error {

	if swag.IsZero(m.LimitBreachEndDatetime) { // not required
		return nil
	}

	if err := validate.FormatOf("attributes"+"."+"limit_breach_end_datetime", "body", "date-time", m.LimitBreachEndDatetime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ReturnPaymentAttributes) validateLimitBreachStartDatetime(formats strfmt.Registry) error {

	if swag.IsZero(m.LimitBreachStartDatetime) { // not required
		return nil
	}

	if err := validate.FormatOf("attributes"+"."+"limit_breach_start_datetime", "body", "date-time", m.LimitBreachStartDatetime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ReturnPaymentAttributes) validateSettlement(formats strfmt.Registry) error {

	if swag.IsZero(m.Settlement) { // not required
		return nil
	}

	if m.Settlement != nil {
		if err := m.Settlement.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("attributes" + "." + "settlement")
			}
			return err
		}
	}

	return nil
}

func (m *ReturnPaymentAttributes) validateUniqueSchemeID(formats strfmt.Registry) error {

	if swag.IsZero(m.UniqueSchemeID) { // not required
		return nil
	}

	if err := validate.MaxLength("attributes"+"."+"unique_scheme_id", "body", string(m.UniqueSchemeID), 42); err != nil {
		return err
	}

	return nil
}

func (m *ReturnPaymentAttributes) validateUserDefinedData(formats strfmt.Registry) error {

	if swag.IsZero(m.UserDefinedData) { // not required
		return nil
	}

	iUserDefinedDataSize := int64(len(m.UserDefinedData))

	if err := validate.MaxItems("attributes"+"."+"user_defined_data", "body", iUserDefinedDataSize, 5); err != nil {
		return err
	}

	for i := 0; i < len(m.UserDefinedData); i++ {
		if swag.IsZero(m.UserDefinedData[i]) { // not required
			continue
		}

		if m.UserDefinedData[i] != nil {
			if err := m.UserDefinedData[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("attributes" + "." + "user_defined_data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ReturnPaymentAttributes) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ReturnPaymentAttributes) UnmarshalBinary(b []byte) error {
	var res ReturnPaymentAttributes
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
func (m *ReturnPaymentAttributes) Json() string {
	json, err := json.MarshalIndent(m, "  ", "  ")
	if err != nil {
		log.Fatal(err)
	}
	return string(json)
}

// ReturnPaymentRelationships return payment relationships
// swagger:model ReturnPaymentRelationships
type ReturnPaymentRelationships struct {

	// ID of the payment resource related to the return
	Payment *RelationshipLinks `json:"payment,omitempty"`

	// return admission
	ReturnAdmission *ReturnPaymentRelationshipsReturnAdmission `json:"return_admission,omitempty"`

	// ID of the return reversal resource related to the return
	ReturnReversal *RelationshipLinks `json:"return_reversal,omitempty"`

	// return submission
	ReturnSubmission *ReturnPaymentRelationshipsReturnSubmission `json:"return_submission,omitempty"`
}

func ReturnPaymentRelationshipsWithDefaults(defaults client.Defaults) *ReturnPaymentRelationships {
	return &ReturnPaymentRelationships{

		Payment: RelationshipLinksWithDefaults(defaults),

		ReturnAdmission: ReturnPaymentRelationshipsReturnAdmissionWithDefaults(defaults),

		ReturnReversal: RelationshipLinksWithDefaults(defaults),

		ReturnSubmission: ReturnPaymentRelationshipsReturnSubmissionWithDefaults(defaults),
	}
}

func (m *ReturnPaymentRelationships) WithPayment(payment RelationshipLinks) *ReturnPaymentRelationships {

	m.Payment = &payment

	return m
}

func (m *ReturnPaymentRelationships) WithoutPayment() *ReturnPaymentRelationships {
	m.Payment = nil
	return m
}

func (m *ReturnPaymentRelationships) WithReturnAdmission(returnAdmission ReturnPaymentRelationshipsReturnAdmission) *ReturnPaymentRelationships {

	m.ReturnAdmission = &returnAdmission

	return m
}

func (m *ReturnPaymentRelationships) WithoutReturnAdmission() *ReturnPaymentRelationships {
	m.ReturnAdmission = nil
	return m
}

func (m *ReturnPaymentRelationships) WithReturnReversal(returnReversal RelationshipLinks) *ReturnPaymentRelationships {

	m.ReturnReversal = &returnReversal

	return m
}

func (m *ReturnPaymentRelationships) WithoutReturnReversal() *ReturnPaymentRelationships {
	m.ReturnReversal = nil
	return m
}

func (m *ReturnPaymentRelationships) WithReturnSubmission(returnSubmission ReturnPaymentRelationshipsReturnSubmission) *ReturnPaymentRelationships {

	m.ReturnSubmission = &returnSubmission

	return m
}

func (m *ReturnPaymentRelationships) WithoutReturnSubmission() *ReturnPaymentRelationships {
	m.ReturnSubmission = nil
	return m
}

// Validate validates this return payment relationships
func (m *ReturnPaymentRelationships) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePayment(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReturnAdmission(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReturnReversal(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReturnSubmission(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ReturnPaymentRelationships) validatePayment(formats strfmt.Registry) error {

	if swag.IsZero(m.Payment) { // not required
		return nil
	}

	if m.Payment != nil {
		if err := m.Payment.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("relationships" + "." + "payment")
			}
			return err
		}
	}

	return nil
}

func (m *ReturnPaymentRelationships) validateReturnAdmission(formats strfmt.Registry) error {

	if swag.IsZero(m.ReturnAdmission) { // not required
		return nil
	}

	if m.ReturnAdmission != nil {
		if err := m.ReturnAdmission.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("relationships" + "." + "return_admission")
			}
			return err
		}
	}

	return nil
}

func (m *ReturnPaymentRelationships) validateReturnReversal(formats strfmt.Registry) error {

	if swag.IsZero(m.ReturnReversal) { // not required
		return nil
	}

	if m.ReturnReversal != nil {
		if err := m.ReturnReversal.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("relationships" + "." + "return_reversal")
			}
			return err
		}
	}

	return nil
}

func (m *ReturnPaymentRelationships) validateReturnSubmission(formats strfmt.Registry) error {

	if swag.IsZero(m.ReturnSubmission) { // not required
		return nil
	}

	if m.ReturnSubmission != nil {
		if err := m.ReturnSubmission.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("relationships" + "." + "return_submission")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ReturnPaymentRelationships) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ReturnPaymentRelationships) UnmarshalBinary(b []byte) error {
	var res ReturnPaymentRelationships
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
func (m *ReturnPaymentRelationships) Json() string {
	json, err := json.MarshalIndent(m, "  ", "  ")
	if err != nil {
		log.Fatal(err)
	}
	return string(json)
}

// ReturnPaymentRelationshipsReturnAdmission return payment relationships return admission
// swagger:model ReturnPaymentRelationshipsReturnAdmission
type ReturnPaymentRelationshipsReturnAdmission struct {

	// Array of Return Admission resources related to the return
	Data []*ReturnAdmission `json:"data"`
}

func ReturnPaymentRelationshipsReturnAdmissionWithDefaults(defaults client.Defaults) *ReturnPaymentRelationshipsReturnAdmission {
	return &ReturnPaymentRelationshipsReturnAdmission{

		Data: make([]*ReturnAdmission, 0),
	}
}

func (m *ReturnPaymentRelationshipsReturnAdmission) WithData(data []*ReturnAdmission) *ReturnPaymentRelationshipsReturnAdmission {

	m.Data = data

	return m
}

// Validate validates this return payment relationships return admission
func (m *ReturnPaymentRelationshipsReturnAdmission) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ReturnPaymentRelationshipsReturnAdmission) validateData(formats strfmt.Registry) error {

	if swag.IsZero(m.Data) { // not required
		return nil
	}

	for i := 0; i < len(m.Data); i++ {
		if swag.IsZero(m.Data[i]) { // not required
			continue
		}

		if m.Data[i] != nil {
			if err := m.Data[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("relationships" + "." + "return_admission" + "." + "data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ReturnPaymentRelationshipsReturnAdmission) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ReturnPaymentRelationshipsReturnAdmission) UnmarshalBinary(b []byte) error {
	var res ReturnPaymentRelationshipsReturnAdmission
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
func (m *ReturnPaymentRelationshipsReturnAdmission) Json() string {
	json, err := json.MarshalIndent(m, "  ", "  ")
	if err != nil {
		log.Fatal(err)
	}
	return string(json)
}

// ReturnPaymentRelationshipsReturnSubmission return payment relationships return submission
// swagger:model ReturnPaymentRelationshipsReturnSubmission
type ReturnPaymentRelationshipsReturnSubmission struct {

	// Array of Return Submission resources related to the return
	Data []*ReturnSubmission `json:"data"`
}

func ReturnPaymentRelationshipsReturnSubmissionWithDefaults(defaults client.Defaults) *ReturnPaymentRelationshipsReturnSubmission {
	return &ReturnPaymentRelationshipsReturnSubmission{

		Data: make([]*ReturnSubmission, 0),
	}
}

func (m *ReturnPaymentRelationshipsReturnSubmission) WithData(data []*ReturnSubmission) *ReturnPaymentRelationshipsReturnSubmission {

	m.Data = data

	return m
}

// Validate validates this return payment relationships return submission
func (m *ReturnPaymentRelationshipsReturnSubmission) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ReturnPaymentRelationshipsReturnSubmission) validateData(formats strfmt.Registry) error {

	if swag.IsZero(m.Data) { // not required
		return nil
	}

	for i := 0; i < len(m.Data); i++ {
		if swag.IsZero(m.Data[i]) { // not required
			continue
		}

		if m.Data[i] != nil {
			if err := m.Data[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("relationships" + "." + "return_submission" + "." + "data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ReturnPaymentRelationshipsReturnSubmission) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ReturnPaymentRelationshipsReturnSubmission) UnmarshalBinary(b []byte) error {
	var res ReturnPaymentRelationshipsReturnSubmission
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
func (m *ReturnPaymentRelationshipsReturnSubmission) Json() string {
	json, err := json.MarshalIndent(m, "  ", "  ")
	if err != nil {
		log.Fatal(err)
	}
	return string(json)
}
