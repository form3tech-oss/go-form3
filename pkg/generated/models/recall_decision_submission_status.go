// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"log"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// RecallDecisionSubmissionStatus [Status](http://draft-api-docs.form3.tech/api.html#enumerations-payment-status-codes-payment-submission-status) of the submission
// swagger:model RecallDecisionSubmissionStatus
type RecallDecisionSubmissionStatus string

const (

	// RecallDecisionSubmissionStatusAccepted captures enum value "accepted"
	RecallDecisionSubmissionStatusAccepted RecallDecisionSubmissionStatus = "accepted"

	// RecallDecisionSubmissionStatusLimitCheckPending captures enum value "limit_check_pending"
	RecallDecisionSubmissionStatusLimitCheckPending RecallDecisionSubmissionStatus = "limit_check_pending"

	// RecallDecisionSubmissionStatusLimitCheckFailed captures enum value "limit_check_failed"
	RecallDecisionSubmissionStatusLimitCheckFailed RecallDecisionSubmissionStatus = "limit_check_failed"

	// RecallDecisionSubmissionStatusLimitCheckPassed captures enum value "limit_check_passed"
	RecallDecisionSubmissionStatusLimitCheckPassed RecallDecisionSubmissionStatus = "limit_check_passed"

	// RecallDecisionSubmissionStatusReleasedToGateway captures enum value "released_to_gateway"
	RecallDecisionSubmissionStatusReleasedToGateway RecallDecisionSubmissionStatus = "released_to_gateway"

	// RecallDecisionSubmissionStatusQueuedForDelivery captures enum value "queued_for_delivery"
	RecallDecisionSubmissionStatusQueuedForDelivery RecallDecisionSubmissionStatus = "queued_for_delivery"

	// RecallDecisionSubmissionStatusDeliveryConfirmed captures enum value "delivery_confirmed"
	RecallDecisionSubmissionStatusDeliveryConfirmed RecallDecisionSubmissionStatus = "delivery_confirmed"

	// RecallDecisionSubmissionStatusDeliveryFailed captures enum value "delivery_failed"
	RecallDecisionSubmissionStatusDeliveryFailed RecallDecisionSubmissionStatus = "delivery_failed"

	// RecallDecisionSubmissionStatusValidationPending captures enum value "validation_pending"
	RecallDecisionSubmissionStatusValidationPending RecallDecisionSubmissionStatus = "validation_pending"

	// RecallDecisionSubmissionStatusValidationPassed captures enum value "validation_passed"
	RecallDecisionSubmissionStatusValidationPassed RecallDecisionSubmissionStatus = "validation_passed"
)

// for schema
var recallDecisionSubmissionStatusEnum []interface{}

func init() {
	var res []RecallDecisionSubmissionStatus
	if err := json.Unmarshal([]byte(`["accepted","limit_check_pending","limit_check_failed","limit_check_passed","released_to_gateway","queued_for_delivery","delivery_confirmed","delivery_failed","validation_pending","validation_passed"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		recallDecisionSubmissionStatusEnum = append(recallDecisionSubmissionStatusEnum, v)
	}
}

func (m RecallDecisionSubmissionStatus) validateRecallDecisionSubmissionStatusEnum(path, location string, value RecallDecisionSubmissionStatus) error {
	if err := validate.Enum(path, location, value, recallDecisionSubmissionStatusEnum); err != nil {
		return err
	}
	return nil
}

// Validate validates this recall decision submission status
func (m RecallDecisionSubmissionStatus) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateRecallDecisionSubmissionStatusEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RecallDecisionSubmissionStatus) Json() string {
	json, err := json.MarshalIndent(m, "  ", "  ")
	if err != nil {
		log.Fatal(err)
	}
	return string(json)
}
