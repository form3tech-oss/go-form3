// Code generated by go-swagger; DO NOT EDIT.

package audit

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// Client.ListAuditEntries creates a new ListAuditEntriesRequest object
// with the default values initialized.
func (c *Client) ListAuditEntries() *ListAuditEntriesRequest {
	var ()
	return &ListAuditEntriesRequest{

		FilterActionTimeFrom: c.Defaults.GetStrfmtDateTimePtr("ListAuditEntries", "filter[action_time_from]"),

		FilterActionTimeTo: c.Defaults.GetStrfmtDateTimePtr("ListAuditEntries", "filter[action_time_to]"),

		FilterOrganisationID: make([]strfmt.UUID, 0),

		PageAfter: c.Defaults.GetStringPtr("ListAuditEntries", "page[after]"),

		PageNumber: c.Defaults.GetInt64Ptr("ListAuditEntries", "page[number]"),

		PageSize: c.Defaults.GetInt64Ptr("ListAuditEntries", "page[size]"),

		RecordType: c.Defaults.GetString("ListAuditEntries", "record_type"),

		timeout: cr.DefaultTimeout,

		transport: c.transport,
		formats:   c.formats,
	}
}

type ListAuditEntriesRequest struct {

	/*FilterActionTimeFrom*/

	FilterActionTimeFrom *strfmt.DateTime

	/*FilterActionTimeTo*/

	FilterActionTimeTo *strfmt.DateTime

	/*FilterOrganisationID      Filter by organisation id      */

	FilterOrganisationID []strfmt.UUID

	/*PageAfter      Cursor for next page (this is a base64-encoded UUID continuation token returned from the application and should not be manually generated)      */

	PageAfter *string

	/*PageNumber      Which page to select      */

	PageNumber *int64

	/*PageSize      Number of items to select      */

	PageSize *int64

	/*RecordType      Record Type      */

	RecordType string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client

	transport runtime.ClientTransport
	formats   strfmt.Registry
}

func (o *ListAuditEntriesRequest) FromJson(j string) *ListAuditEntriesRequest {

	return o
}

func (o *ListAuditEntriesRequest) WithFilterActionTimeFrom(filterActionTimeFrom strfmt.DateTime) *ListAuditEntriesRequest {

	o.FilterActionTimeFrom = &filterActionTimeFrom

	return o
}

func (o *ListAuditEntriesRequest) WithoutFilterActionTimeFrom() *ListAuditEntriesRequest {

	o.FilterActionTimeFrom = nil

	return o
}

func (o *ListAuditEntriesRequest) WithFilterActionTimeTo(filterActionTimeTo strfmt.DateTime) *ListAuditEntriesRequest {

	o.FilterActionTimeTo = &filterActionTimeTo

	return o
}

func (o *ListAuditEntriesRequest) WithoutFilterActionTimeTo() *ListAuditEntriesRequest {

	o.FilterActionTimeTo = nil

	return o
}

func (o *ListAuditEntriesRequest) WithFilterOrganisationID(filterOrganisationID []strfmt.UUID) *ListAuditEntriesRequest {

	o.FilterOrganisationID = filterOrganisationID

	return o
}

func (o *ListAuditEntriesRequest) WithoutFilterOrganisationID() *ListAuditEntriesRequest {

	o.FilterOrganisationID = nil

	return o
}

func (o *ListAuditEntriesRequest) WithPageAfter(pageAfter string) *ListAuditEntriesRequest {

	o.PageAfter = &pageAfter

	return o
}

func (o *ListAuditEntriesRequest) WithoutPageAfter() *ListAuditEntriesRequest {

	o.PageAfter = nil

	return o
}

func (o *ListAuditEntriesRequest) WithPageNumber(pageNumber int64) *ListAuditEntriesRequest {

	o.PageNumber = &pageNumber

	return o
}

func (o *ListAuditEntriesRequest) WithoutPageNumber() *ListAuditEntriesRequest {

	o.PageNumber = nil

	return o
}

func (o *ListAuditEntriesRequest) WithPageSize(pageSize int64) *ListAuditEntriesRequest {

	o.PageSize = &pageSize

	return o
}

func (o *ListAuditEntriesRequest) WithoutPageSize() *ListAuditEntriesRequest {

	o.PageSize = nil

	return o
}

func (o *ListAuditEntriesRequest) WithRecordType(recordType string) *ListAuditEntriesRequest {

	o.RecordType = recordType

	return o
}

//////////////////
// WithContext adds the context to the list audit entries Request
func (o *ListAuditEntriesRequest) WithContext(ctx context.Context) *ListAuditEntriesRequest {
	o.Context = ctx
	return o
}

// WithHTTPClient adds the HTTPClient to the list audit entries Request
func (o *ListAuditEntriesRequest) WithHTTPClient(client *http.Client) *ListAuditEntriesRequest {
	o.HTTPClient = client
	return o
}

// WriteToRequest writes these Request to a swagger request
func (o *ListAuditEntriesRequest) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.FilterActionTimeFrom != nil {

		// query param filter[action_time_from]
		var qrFilterActionTimeFrom strfmt.DateTime
		if o.FilterActionTimeFrom != nil {
			qrFilterActionTimeFrom = *o.FilterActionTimeFrom
		}
		qFilterActionTimeFrom := qrFilterActionTimeFrom.String()
		if qFilterActionTimeFrom != "" {
			if err := r.SetQueryParam("filter[action_time_from]", qFilterActionTimeFrom); err != nil {
				return err
			}
		}

	}

	if o.FilterActionTimeTo != nil {

		// query param filter[action_time_to]
		var qrFilterActionTimeTo strfmt.DateTime
		if o.FilterActionTimeTo != nil {
			qrFilterActionTimeTo = *o.FilterActionTimeTo
		}
		qFilterActionTimeTo := qrFilterActionTimeTo.String()
		if qFilterActionTimeTo != "" {
			if err := r.SetQueryParam("filter[action_time_to]", qFilterActionTimeTo); err != nil {
				return err
			}
		}

	}

	var valuesFilterOrganisationID []string
	for _, v := range o.FilterOrganisationID {
		valuesFilterOrganisationID = append(valuesFilterOrganisationID, v.String())
	}

	joinedFilterOrganisationID := swag.JoinByFormat(valuesFilterOrganisationID, "csv")
	// query array param filter[organisation_id]
	if err := r.SetQueryParam("filter[organisation_id]", joinedFilterOrganisationID...); err != nil {
		return err
	}

	if o.PageAfter != nil {

		// query param page[after]
		var qrPageAfter string
		if o.PageAfter != nil {
			qrPageAfter = *o.PageAfter
		}
		qPageAfter := qrPageAfter
		if qPageAfter != "" {
			if err := r.SetQueryParam("page[after]", qPageAfter); err != nil {
				return err
			}
		}

	}

	if o.PageNumber != nil {

		// query param page[number]
		var qrPageNumber int64
		if o.PageNumber != nil {
			qrPageNumber = *o.PageNumber
		}
		qPageNumber := swag.FormatInt64(qrPageNumber)
		if qPageNumber != "" {
			if err := r.SetQueryParam("page[number]", qPageNumber); err != nil {
				return err
			}
		}

	}

	if o.PageSize != nil {

		// query param page[size]
		var qrPageSize int64
		if o.PageSize != nil {
			qrPageSize = *o.PageSize
		}
		qPageSize := swag.FormatInt64(qrPageSize)
		if qPageSize != "" {
			if err := r.SetQueryParam("page[size]", qPageSize); err != nil {
				return err
			}
		}

	}

	// path param record_type
	if err := r.SetPathParam("record_type", o.RecordType); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
