// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"log"
	"strconv"

	"github.com/form3tech-oss/go-form3/v6/pkg/client"
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// ReportRequestRelationships report request relationships
// swagger:model ReportRequestRelationships
type ReportRequestRelationships struct {

	// report
	Report *ReportRequestRelationshipsReport `json:"report,omitempty"`

	// report request submission
	ReportRequestSubmission *ReportRequestRelationshipsReportRequestSubmission `json:"report_request_submission,omitempty"`
}

func ReportRequestRelationshipsWithDefaults(defaults client.Defaults) *ReportRequestRelationships {
	return &ReportRequestRelationships{

		Report: ReportRequestRelationshipsReportWithDefaults(defaults),

		ReportRequestSubmission: ReportRequestRelationshipsReportRequestSubmissionWithDefaults(defaults),
	}
}

func (m *ReportRequestRelationships) WithReport(report ReportRequestRelationshipsReport) *ReportRequestRelationships {

	m.Report = &report

	return m
}

func (m *ReportRequestRelationships) WithoutReport() *ReportRequestRelationships {
	m.Report = nil
	return m
}

func (m *ReportRequestRelationships) WithReportRequestSubmission(reportRequestSubmission ReportRequestRelationshipsReportRequestSubmission) *ReportRequestRelationships {

	m.ReportRequestSubmission = &reportRequestSubmission

	return m
}

func (m *ReportRequestRelationships) WithoutReportRequestSubmission() *ReportRequestRelationships {
	m.ReportRequestSubmission = nil
	return m
}

// Validate validates this report request relationships
func (m *ReportRequestRelationships) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateReport(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReportRequestSubmission(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ReportRequestRelationships) validateReport(formats strfmt.Registry) error {

	if swag.IsZero(m.Report) { // not required
		return nil
	}

	if m.Report != nil {
		if err := m.Report.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("report")
			}
			return err
		}
	}

	return nil
}

func (m *ReportRequestRelationships) validateReportRequestSubmission(formats strfmt.Registry) error {

	if swag.IsZero(m.ReportRequestSubmission) { // not required
		return nil
	}

	if m.ReportRequestSubmission != nil {
		if err := m.ReportRequestSubmission.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("report_request_submission")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ReportRequestRelationships) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ReportRequestRelationships) UnmarshalBinary(b []byte) error {
	var res ReportRequestRelationships
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
func (m *ReportRequestRelationships) Json() string {
	json, err := json.MarshalIndent(m, "  ", "  ")
	if err != nil {
		log.Fatal(err)
	}
	return string(json)
}

// ReportRequestRelationshipsReport report request relationships report
// swagger:model ReportRequestRelationshipsReport
type ReportRequestRelationshipsReport struct {

	// data
	Data []*Report `json:"data"`
}

func ReportRequestRelationshipsReportWithDefaults(defaults client.Defaults) *ReportRequestRelationshipsReport {
	return &ReportRequestRelationshipsReport{

		Data: make([]*Report, 0),
	}
}

func (m *ReportRequestRelationshipsReport) WithData(data []*Report) *ReportRequestRelationshipsReport {

	m.Data = data

	return m
}

// Validate validates this report request relationships report
func (m *ReportRequestRelationshipsReport) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ReportRequestRelationshipsReport) validateData(formats strfmt.Registry) error {

	if swag.IsZero(m.Data) { // not required
		return nil
	}

	for i := 0; i < len(m.Data); i++ {
		if swag.IsZero(m.Data[i]) { // not required
			continue
		}

		if m.Data[i] != nil {
			if err := m.Data[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("report" + "." + "data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ReportRequestRelationshipsReport) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ReportRequestRelationshipsReport) UnmarshalBinary(b []byte) error {
	var res ReportRequestRelationshipsReport
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
func (m *ReportRequestRelationshipsReport) Json() string {
	json, err := json.MarshalIndent(m, "  ", "  ")
	if err != nil {
		log.Fatal(err)
	}
	return string(json)
}

// ReportRequestRelationshipsReportRequestSubmission report request relationships report request submission
// swagger:model ReportRequestRelationshipsReportRequestSubmission
type ReportRequestRelationshipsReportRequestSubmission struct {

	// data
	Data []*ReportRequestSubmission `json:"data"`
}

func ReportRequestRelationshipsReportRequestSubmissionWithDefaults(defaults client.Defaults) *ReportRequestRelationshipsReportRequestSubmission {
	return &ReportRequestRelationshipsReportRequestSubmission{

		Data: make([]*ReportRequestSubmission, 0),
	}
}

func (m *ReportRequestRelationshipsReportRequestSubmission) WithData(data []*ReportRequestSubmission) *ReportRequestRelationshipsReportRequestSubmission {

	m.Data = data

	return m
}

// Validate validates this report request relationships report request submission
func (m *ReportRequestRelationshipsReportRequestSubmission) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ReportRequestRelationshipsReportRequestSubmission) validateData(formats strfmt.Registry) error {

	if swag.IsZero(m.Data) { // not required
		return nil
	}

	for i := 0; i < len(m.Data); i++ {
		if swag.IsZero(m.Data[i]) { // not required
			continue
		}

		if m.Data[i] != nil {
			if err := m.Data[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("report_request_submission" + "." + "data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ReportRequestRelationshipsReportRequestSubmission) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ReportRequestRelationshipsReportRequestSubmission) UnmarshalBinary(b []byte) error {
	var res ReportRequestRelationshipsReportRequestSubmission
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
func (m *ReportRequestRelationshipsReportRequestSubmission) Json() string {
	json, err := json.MarshalIndent(m, "  ", "  ")
	if err != nil {
		log.Fatal(err)
	}
	return string(json)
}
