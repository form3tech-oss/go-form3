// Code generated by go-swagger; DO NOT EDIT.

package query_api

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/form3tech-oss/go-form3/v7/pkg/generated/models"
)

// CreateQueryReader is a Reader for the CreateQuery structure.
type CreateQueryReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateQueryReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 201:
		result := NewCreateQueryCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewCreateQueryBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewCreateQueryForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 502:
		result := NewCreateQueryBadGateway()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewCreateQueryCreated creates a CreateQueryCreated with default headers values
func NewCreateQueryCreated() *CreateQueryCreated {
	return &CreateQueryCreated{}
}

/*
CreateQueryCreated handles this case with default header values.

creation response
*/
type CreateQueryCreated struct {

	//Payload

	// isStream: false
	*models.QueryFetchResponse
}

func (o *CreateQueryCreated) Error() string {
	return fmt.Sprintf("[POST /transaction/queries][%d] createQueryCreated", 201)
}

func (o *CreateQueryCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.QueryFetchResponse = new(models.QueryFetchResponse)

	// response payload

	if err := consumer.Consume(response.Body(), o.QueryFetchResponse); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateQueryBadRequest creates a CreateQueryBadRequest with default headers values
func NewCreateQueryBadRequest() *CreateQueryBadRequest {
	return &CreateQueryBadRequest{}
}

/*
CreateQueryBadRequest handles this case with default header values.

bad request
*/
type CreateQueryBadRequest struct {

	//Payload

	// isStream: false
	*models.APIError
}

func (o *CreateQueryBadRequest) Error() string {
	return fmt.Sprintf("[POST /transaction/queries][%d] createQueryBadRequest", 400)
}

func (o *CreateQueryBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.APIError = new(models.APIError)

	// response payload

	if err := consumer.Consume(response.Body(), o.APIError); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateQueryForbidden creates a CreateQueryForbidden with default headers values
func NewCreateQueryForbidden() *CreateQueryForbidden {
	return &CreateQueryForbidden{}
}

/*
CreateQueryForbidden handles this case with default header values.

forbidden
*/
type CreateQueryForbidden struct {

	//Payload

	// isStream: false
	*models.APIError
}

func (o *CreateQueryForbidden) Error() string {
	return fmt.Sprintf("[POST /transaction/queries][%d] createQueryForbidden", 403)
}

func (o *CreateQueryForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.APIError = new(models.APIError)

	// response payload

	if err := consumer.Consume(response.Body(), o.APIError); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateQueryBadGateway creates a CreateQueryBadGateway with default headers values
func NewCreateQueryBadGateway() *CreateQueryBadGateway {
	return &CreateQueryBadGateway{}
}

/*
CreateQueryBadGateway handles this case with default header values.

gateway issue
*/
type CreateQueryBadGateway struct {

	//Payload

	// isStream: false
	*models.APIError
}

func (o *CreateQueryBadGateway) Error() string {
	return fmt.Sprintf("[POST /transaction/queries][%d] createQueryBadGateway", 502)
}

func (o *CreateQueryBadGateway) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.APIError = new(models.APIError)

	// response payload

	if err := consumer.Consume(response.Body(), o.APIError); err != nil && err != io.EOF {
		return err
	}

	return nil
}
