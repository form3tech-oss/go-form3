// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"log"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// TransactionGroupCode transaction group code
// swagger:model TransactionGroupCode
type TransactionGroupCode string

const (

	// TransactionGroupCodeDR captures enum value "DR"
	TransactionGroupCodeDR TransactionGroupCode = "DR"

	// TransactionGroupCodeCR captures enum value "CR"
	TransactionGroupCodeCR TransactionGroupCode = "CR"

	// TransactionGroupCodeCU captures enum value "CU"
	TransactionGroupCodeCU TransactionGroupCode = "CU"

	// TransactionGroupCodeBS captures enum value "BS"
	TransactionGroupCodeBS TransactionGroupCode = "BS"

	// TransactionGroupCodeDV captures enum value "DV"
	TransactionGroupCodeDV TransactionGroupCode = "DV"

	// TransactionGroupCodeAU captures enum value "AU"
	TransactionGroupCodeAU TransactionGroupCode = "AU"
)

// for schema
var transactionGroupCodeEnum []interface{}

func init() {
	var res []TransactionGroupCode
	if err := json.Unmarshal([]byte(`["DR","CR","CU","BS","DV","AU"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		transactionGroupCodeEnum = append(transactionGroupCodeEnum, v)
	}
}

func (m TransactionGroupCode) validateTransactionGroupCodeEnum(path, location string, value TransactionGroupCode) error {
	if err := validate.Enum(path, location, value, transactionGroupCodeEnum); err != nil {
		return err
	}
	return nil
}

// Validate validates this transaction group code
func (m TransactionGroupCode) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateTransactionGroupCodeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TransactionGroupCode) Json() string {
	json, err := json.MarshalIndent(m, "  ", "  ")
	if err != nil {
		log.Fatal(err)
	}
	return string(json)
}
