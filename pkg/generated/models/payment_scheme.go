// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"log"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// PaymentScheme payment scheme
// swagger:model PaymentScheme
type PaymentScheme string

const (

	// PaymentSchemeBACS captures enum value "BACS"
	PaymentSchemeBACS PaymentScheme = "BACS"

	// PaymentSchemeFDW captures enum value "FDW"
	PaymentSchemeFDW PaymentScheme = "FDW"

	// PaymentSchemeFDN captures enum value "FDN"
	PaymentSchemeFDN PaymentScheme = "FDN"

	// PaymentSchemeFPS captures enum value "FPS"
	PaymentSchemeFPS PaymentScheme = "FPS"

	// PaymentSchemeSEPASCT captures enum value "SEPASCT"
	PaymentSchemeSEPASCT PaymentScheme = "SEPASCT"

	// PaymentSchemeTCH captures enum value "TCH"
	PaymentSchemeTCH PaymentScheme = "TCH"

	// PaymentSchemeSEPAINSTANT captures enum value "SEPAINSTANT"
	PaymentSchemeSEPAINSTANT PaymentScheme = "SEPAINSTANT"
)

// for schema
var paymentSchemeEnum []interface{}

func init() {
	var res []PaymentScheme
	if err := json.Unmarshal([]byte(`["BACS","FDW","FDN","FPS","SEPASCT","TCH","SEPAINSTANT"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		paymentSchemeEnum = append(paymentSchemeEnum, v)
	}
}

func (m PaymentScheme) validatePaymentSchemeEnum(path, location string, value PaymentScheme) error {
	if err := validate.Enum(path, location, value, paymentSchemeEnum); err != nil {
		return err
	}
	return nil
}

// Validate validates this payment scheme
func (m PaymentScheme) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validatePaymentSchemeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PaymentScheme) Json() string {
	json, err := json.MarshalIndent(m, "  ", "  ")
	if err != nil {
		log.Fatal(err)
	}
	return string(json)
}
