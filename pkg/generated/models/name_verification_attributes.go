// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"log"
	"strconv"

	"github.com/form3tech-oss/go-form3/v7/pkg/client"
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NameVerificationAttributes name verification attributes
// swagger:model NameVerificationAttributes
type NameVerificationAttributes struct {

	// account classification
	AccountClassification AccountClassification `json:"account_classification,omitempty"`

	// account number
	// Required: true
	// Pattern: ^[A-Z0-9]{6,34}$
	AccountNumber *string `json:"account_number"`

	// account number code
	// Required: true
	AccountNumberCode *AccountNumberCode `json:"account_number_code"`

	// bank id
	// Required: true
	BankID *string `json:"bank_id"`

	// bank id code
	// Required: true
	BankIDCode *BankIDCode `json:"bank_id_code"`

	// id code type
	// Max Length: 36
	// Min Length: 0
	IDCodeType *string `json:"id_code_type,omitempty"`

	// Account holder names (for example title, first name, last name). Used for Confirmation of Payee matching.
	// Required: true
	Name []string `json:"name"`

	// psp request id
	// Max Length: 36
	PspRequestID string `json:"psp_request_id,omitempty"`

	// request datetime
	// Format: date-time
	RequestDatetime *strfmt.DateTime `json:"request_datetime,omitempty"`

	// requester
	Requester *Requester `json:"requester,omitempty"`

	// secondary identification
	SecondaryIdentification string `json:"secondary_identification,omitempty"`

	// verification scheme
	VerificationScheme *VerificationScheme `json:"verification_scheme,omitempty"`
}

func NameVerificationAttributesWithDefaults(defaults client.Defaults) *NameVerificationAttributes {
	return &NameVerificationAttributes{

		// TODO AccountClassification: AccountClassification,

		AccountNumber: defaults.GetStringPtr("NameVerificationAttributes", "account_number"),

		// TODO AccountNumberCode: AccountNumberCode,

		BankID: defaults.GetStringPtr("NameVerificationAttributes", "bank_id"),

		// TODO BankIDCode: BankIDCode,

		IDCodeType: defaults.GetStringPtr("NameVerificationAttributes", "id_code_type"),

		Name: make([]string, 0),

		PspRequestID: defaults.GetString("NameVerificationAttributes", "psp_request_id"),

		RequestDatetime: defaults.GetStrfmtDateTimePtr("NameVerificationAttributes", "request_datetime"),

		Requester: RequesterWithDefaults(defaults),

		SecondaryIdentification: defaults.GetString("NameVerificationAttributes", "secondary_identification"),

		// TODO VerificationScheme: VerificationScheme,

	}
}

func (m *NameVerificationAttributes) WithAccountClassification(accountClassification AccountClassification) *NameVerificationAttributes {

	m.AccountClassification = accountClassification

	return m
}

func (m *NameVerificationAttributes) WithAccountNumber(accountNumber string) *NameVerificationAttributes {

	m.AccountNumber = &accountNumber

	return m
}

func (m *NameVerificationAttributes) WithoutAccountNumber() *NameVerificationAttributes {
	m.AccountNumber = nil
	return m
}

func (m *NameVerificationAttributes) WithAccountNumberCode(accountNumberCode AccountNumberCode) *NameVerificationAttributes {

	m.AccountNumberCode = &accountNumberCode

	return m
}

func (m *NameVerificationAttributes) WithoutAccountNumberCode() *NameVerificationAttributes {
	m.AccountNumberCode = nil
	return m
}

func (m *NameVerificationAttributes) WithBankID(bankID string) *NameVerificationAttributes {

	m.BankID = &bankID

	return m
}

func (m *NameVerificationAttributes) WithoutBankID() *NameVerificationAttributes {
	m.BankID = nil
	return m
}

func (m *NameVerificationAttributes) WithBankIDCode(bankIDCode BankIDCode) *NameVerificationAttributes {

	m.BankIDCode = &bankIDCode

	return m
}

func (m *NameVerificationAttributes) WithoutBankIDCode() *NameVerificationAttributes {
	m.BankIDCode = nil
	return m
}

func (m *NameVerificationAttributes) WithIDCodeType(iDCodeType string) *NameVerificationAttributes {

	m.IDCodeType = &iDCodeType

	return m
}

func (m *NameVerificationAttributes) WithoutIDCodeType() *NameVerificationAttributes {
	m.IDCodeType = nil
	return m
}

func (m *NameVerificationAttributes) WithName(name []string) *NameVerificationAttributes {

	m.Name = name

	return m
}

func (m *NameVerificationAttributes) WithPspRequestID(pspRequestID string) *NameVerificationAttributes {

	m.PspRequestID = pspRequestID

	return m
}

func (m *NameVerificationAttributes) WithRequestDatetime(requestDatetime strfmt.DateTime) *NameVerificationAttributes {

	m.RequestDatetime = &requestDatetime

	return m
}

func (m *NameVerificationAttributes) WithoutRequestDatetime() *NameVerificationAttributes {
	m.RequestDatetime = nil
	return m
}

func (m *NameVerificationAttributes) WithRequester(requester Requester) *NameVerificationAttributes {

	m.Requester = &requester

	return m
}

func (m *NameVerificationAttributes) WithoutRequester() *NameVerificationAttributes {
	m.Requester = nil
	return m
}

func (m *NameVerificationAttributes) WithSecondaryIdentification(secondaryIdentification string) *NameVerificationAttributes {

	m.SecondaryIdentification = secondaryIdentification

	return m
}

func (m *NameVerificationAttributes) WithVerificationScheme(verificationScheme VerificationScheme) *NameVerificationAttributes {

	m.VerificationScheme = &verificationScheme

	return m
}

func (m *NameVerificationAttributes) WithoutVerificationScheme() *NameVerificationAttributes {
	m.VerificationScheme = nil
	return m
}

// Validate validates this name verification attributes
func (m *NameVerificationAttributes) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccountClassification(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAccountNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAccountNumberCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBankID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBankIDCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIDCodeType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePspRequestID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRequestDatetime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRequester(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVerificationScheme(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NameVerificationAttributes) validateAccountClassification(formats strfmt.Registry) error {

	if swag.IsZero(m.AccountClassification) { // not required
		return nil
	}

	if err := m.AccountClassification.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("account_classification")
		}
		return err
	}

	return nil
}

func (m *NameVerificationAttributes) validateAccountNumber(formats strfmt.Registry) error {

	if err := validate.Required("account_number", "body", m.AccountNumber); err != nil {
		return err
	}

	if err := validate.Pattern("account_number", "body", *m.AccountNumber, `^[A-Z0-9]{6,34}$`); err != nil {
		return err
	}

	return nil
}

func (m *NameVerificationAttributes) validateAccountNumberCode(formats strfmt.Registry) error {

	if err := validate.Required("account_number_code", "body", m.AccountNumberCode); err != nil {
		return err
	}

	if m.AccountNumberCode != nil {
		if err := m.AccountNumberCode.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("account_number_code")
			}
			return err
		}
	}

	return nil
}

func (m *NameVerificationAttributes) validateBankID(formats strfmt.Registry) error {

	if err := validate.Required("bank_id", "body", m.BankID); err != nil {
		return err
	}

	return nil
}

func (m *NameVerificationAttributes) validateBankIDCode(formats strfmt.Registry) error {

	if err := validate.Required("bank_id_code", "body", m.BankIDCode); err != nil {
		return err
	}

	if m.BankIDCode != nil {
		if err := m.BankIDCode.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("bank_id_code")
			}
			return err
		}
	}

	return nil
}

func (m *NameVerificationAttributes) validateIDCodeType(formats strfmt.Registry) error {

	if swag.IsZero(m.IDCodeType) { // not required
		return nil
	}

	if err := validate.MinLength("id_code_type", "body", *m.IDCodeType, 0); err != nil {
		return err
	}

	if err := validate.MaxLength("id_code_type", "body", *m.IDCodeType, 36); err != nil {
		return err
	}

	return nil
}

func (m *NameVerificationAttributes) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	for i := 0; i < len(m.Name); i++ {

		if err := validate.MinLength("name"+"."+strconv.Itoa(i), "body", m.Name[i], 1); err != nil {
			return err
		}

		if err := validate.MaxLength("name"+"."+strconv.Itoa(i), "body", m.Name[i], 256); err != nil {
			return err
		}

	}

	return nil
}

func (m *NameVerificationAttributes) validatePspRequestID(formats strfmt.Registry) error {

	if swag.IsZero(m.PspRequestID) { // not required
		return nil
	}

	if err := validate.MaxLength("psp_request_id", "body", m.PspRequestID, 36); err != nil {
		return err
	}

	return nil
}

func (m *NameVerificationAttributes) validateRequestDatetime(formats strfmt.Registry) error {

	if swag.IsZero(m.RequestDatetime) { // not required
		return nil
	}

	if err := validate.FormatOf("request_datetime", "body", "date-time", m.RequestDatetime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *NameVerificationAttributes) validateRequester(formats strfmt.Registry) error {

	if swag.IsZero(m.Requester) { // not required
		return nil
	}

	if m.Requester != nil {
		if err := m.Requester.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("requester")
			}
			return err
		}
	}

	return nil
}

func (m *NameVerificationAttributes) validateVerificationScheme(formats strfmt.Registry) error {

	if swag.IsZero(m.VerificationScheme) { // not required
		return nil
	}

	if m.VerificationScheme != nil {
		if err := m.VerificationScheme.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("verification_scheme")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *NameVerificationAttributes) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NameVerificationAttributes) UnmarshalBinary(b []byte) error {
	var res NameVerificationAttributes
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
func (m *NameVerificationAttributes) Json() string {
	json, err := json.MarshalIndent(m, "  ", "  ")
	if err != nil {
		log.Fatal(err)
	}
	return string(json)
}
