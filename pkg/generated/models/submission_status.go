// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"log"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// SubmissionStatus submission status
// swagger:model SubmissionStatus
type SubmissionStatus string

const (

	// SubmissionStatusAccepted captures enum value "accepted"
	SubmissionStatusAccepted SubmissionStatus = "accepted"

	// SubmissionStatusValidationPending captures enum value "validation_pending"
	SubmissionStatusValidationPending SubmissionStatus = "validation_pending"

	// SubmissionStatusValidationPassed captures enum value "validation_passed"
	SubmissionStatusValidationPassed SubmissionStatus = "validation_passed"

	// SubmissionStatusReleasedToGateway captures enum value "released_to_gateway"
	SubmissionStatusReleasedToGateway SubmissionStatus = "released_to_gateway"

	// SubmissionStatusSubmitted captures enum value "submitted"
	SubmissionStatusSubmitted SubmissionStatus = "submitted"

	// SubmissionStatusDeliveryConfirmed captures enum value "delivery_confirmed"
	SubmissionStatusDeliveryConfirmed SubmissionStatus = "delivery_confirmed"

	// SubmissionStatusDeliveryFailed captures enum value "delivery_failed"
	SubmissionStatusDeliveryFailed SubmissionStatus = "delivery_failed"
)

// for schema
var submissionStatusEnum []interface{}

func init() {
	var res []SubmissionStatus
	if err := json.Unmarshal([]byte(`["accepted","validation_pending","validation_passed","released_to_gateway","submitted","delivery_confirmed","delivery_failed"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		submissionStatusEnum = append(submissionStatusEnum, v)
	}
}

func (m SubmissionStatus) validateSubmissionStatusEnum(path, location string, value SubmissionStatus) error {
	if err := validate.Enum(path, location, value, submissionStatusEnum); err != nil {
		return err
	}
	return nil
}

// Validate validates this submission status
func (m SubmissionStatus) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateSubmissionStatusEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SubmissionStatus) Json() string {
	json, err := json.MarshalIndent(m, "  ", "  ")
	if err != nil {
		log.Fatal(err)
	}
	return string(json)
}
