// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"log"
	"strconv"

	"github.com/form3tech-oss/go-form3/v6/pkg/client"
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// ReportRelationships report relationships
// swagger:model ReportRelationships
type ReportRelationships struct {

	// report admission
	ReportAdmission *ReportRelationshipsReportAdmission `json:"report_admission,omitempty"`

	// report request
	ReportRequest *ReportRelationshipsReportRequest `json:"report_request,omitempty"`

	// transaction file
	TransactionFile *ThinRelationship `json:"transaction_file,omitempty"`
}

func ReportRelationshipsWithDefaults(defaults client.Defaults) *ReportRelationships {
	return &ReportRelationships{

		ReportAdmission: ReportRelationshipsReportAdmissionWithDefaults(defaults),

		ReportRequest: ReportRelationshipsReportRequestWithDefaults(defaults),

		TransactionFile: ThinRelationshipWithDefaults(defaults),
	}
}

func (m *ReportRelationships) WithReportAdmission(reportAdmission ReportRelationshipsReportAdmission) *ReportRelationships {

	m.ReportAdmission = &reportAdmission

	return m
}

func (m *ReportRelationships) WithoutReportAdmission() *ReportRelationships {
	m.ReportAdmission = nil
	return m
}

func (m *ReportRelationships) WithReportRequest(reportRequest ReportRelationshipsReportRequest) *ReportRelationships {

	m.ReportRequest = &reportRequest

	return m
}

func (m *ReportRelationships) WithoutReportRequest() *ReportRelationships {
	m.ReportRequest = nil
	return m
}

func (m *ReportRelationships) WithTransactionFile(transactionFile ThinRelationship) *ReportRelationships {

	m.TransactionFile = &transactionFile

	return m
}

func (m *ReportRelationships) WithoutTransactionFile() *ReportRelationships {
	m.TransactionFile = nil
	return m
}

// Validate validates this report relationships
func (m *ReportRelationships) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateReportAdmission(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReportRequest(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTransactionFile(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ReportRelationships) validateReportAdmission(formats strfmt.Registry) error {

	if swag.IsZero(m.ReportAdmission) { // not required
		return nil
	}

	if m.ReportAdmission != nil {
		if err := m.ReportAdmission.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("report_admission")
			}
			return err
		}
	}

	return nil
}

func (m *ReportRelationships) validateReportRequest(formats strfmt.Registry) error {

	if swag.IsZero(m.ReportRequest) { // not required
		return nil
	}

	if m.ReportRequest != nil {
		if err := m.ReportRequest.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("report_request")
			}
			return err
		}
	}

	return nil
}

func (m *ReportRelationships) validateTransactionFile(formats strfmt.Registry) error {

	if swag.IsZero(m.TransactionFile) { // not required
		return nil
	}

	if m.TransactionFile != nil {
		if err := m.TransactionFile.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("transaction_file")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ReportRelationships) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ReportRelationships) UnmarshalBinary(b []byte) error {
	var res ReportRelationships
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
func (m *ReportRelationships) Json() string {
	json, err := json.MarshalIndent(m, "  ", "  ")
	if err != nil {
		log.Fatal(err)
	}
	return string(json)
}

// ReportRelationshipsReportAdmission report relationships report admission
// swagger:model ReportRelationshipsReportAdmission
type ReportRelationshipsReportAdmission struct {

	// data
	Data []*ReportAdmission `json:"data"`
}

func ReportRelationshipsReportAdmissionWithDefaults(defaults client.Defaults) *ReportRelationshipsReportAdmission {
	return &ReportRelationshipsReportAdmission{

		Data: make([]*ReportAdmission, 0),
	}
}

func (m *ReportRelationshipsReportAdmission) WithData(data []*ReportAdmission) *ReportRelationshipsReportAdmission {

	m.Data = data

	return m
}

// Validate validates this report relationships report admission
func (m *ReportRelationshipsReportAdmission) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ReportRelationshipsReportAdmission) validateData(formats strfmt.Registry) error {

	if swag.IsZero(m.Data) { // not required
		return nil
	}

	for i := 0; i < len(m.Data); i++ {
		if swag.IsZero(m.Data[i]) { // not required
			continue
		}

		if m.Data[i] != nil {
			if err := m.Data[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("report_admission" + "." + "data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ReportRelationshipsReportAdmission) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ReportRelationshipsReportAdmission) UnmarshalBinary(b []byte) error {
	var res ReportRelationshipsReportAdmission
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
func (m *ReportRelationshipsReportAdmission) Json() string {
	json, err := json.MarshalIndent(m, "  ", "  ")
	if err != nil {
		log.Fatal(err)
	}
	return string(json)
}

// ReportRelationshipsReportRequest report relationships report request
// swagger:model ReportRelationshipsReportRequest
type ReportRelationshipsReportRequest struct {

	// data
	Data []*ReportRequest `json:"data"`
}

func ReportRelationshipsReportRequestWithDefaults(defaults client.Defaults) *ReportRelationshipsReportRequest {
	return &ReportRelationshipsReportRequest{

		Data: make([]*ReportRequest, 0),
	}
}

func (m *ReportRelationshipsReportRequest) WithData(data []*ReportRequest) *ReportRelationshipsReportRequest {

	m.Data = data

	return m
}

// Validate validates this report relationships report request
func (m *ReportRelationshipsReportRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ReportRelationshipsReportRequest) validateData(formats strfmt.Registry) error {

	if swag.IsZero(m.Data) { // not required
		return nil
	}

	for i := 0; i < len(m.Data); i++ {
		if swag.IsZero(m.Data[i]) { // not required
			continue
		}

		if m.Data[i] != nil {
			if err := m.Data[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("report_request" + "." + "data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ReportRelationshipsReportRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ReportRelationshipsReportRequest) UnmarshalBinary(b []byte) error {
	var res ReportRelationshipsReportRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
func (m *ReportRelationshipsReportRequest) Json() string {
	json, err := json.MarshalIndent(m, "  ", "  ")
	if err != nil {
		log.Fatal(err)
	}
	return string(json)
}
