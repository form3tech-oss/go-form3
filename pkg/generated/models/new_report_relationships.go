// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"log"
	"strconv"

	"github.com/form3tech-oss/go-form3/v6/pkg/client"
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NewReportRelationships new report relationships
// swagger:model NewReportRelationships
type NewReportRelationships struct {

	// report request
	ReportRequest *NewReportRelationshipsReportRequest `json:"report_request,omitempty"`
}

func NewReportRelationshipsWithDefaults(defaults client.Defaults) *NewReportRelationships {
	return &NewReportRelationships{

		ReportRequest: NewReportRelationshipsReportRequestWithDefaults(defaults),
	}
}

func (m *NewReportRelationships) WithReportRequest(reportRequest NewReportRelationshipsReportRequest) *NewReportRelationships {

	m.ReportRequest = &reportRequest

	return m
}

func (m *NewReportRelationships) WithoutReportRequest() *NewReportRelationships {
	m.ReportRequest = nil
	return m
}

// Validate validates this new report relationships
func (m *NewReportRelationships) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateReportRequest(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NewReportRelationships) validateReportRequest(formats strfmt.Registry) error {

	if swag.IsZero(m.ReportRequest) { // not required
		return nil
	}

	if m.ReportRequest != nil {
		if err := m.ReportRequest.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("report_request")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *NewReportRelationships) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NewReportRelationships) UnmarshalBinary(b []byte) error {
	var res NewReportRelationships
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
func (m *NewReportRelationships) Json() string {
	json, err := json.MarshalIndent(m, "  ", "  ")
	if err != nil {
		log.Fatal(err)
	}
	return string(json)
}

// NewReportRelationshipsReportRequest new report relationships report request
// swagger:model NewReportRelationshipsReportRequest
type NewReportRelationshipsReportRequest struct {

	// data
	Data []*NewReportRelationshipsReportRequestDataItems0 `json:"data"`
}

func NewReportRelationshipsReportRequestWithDefaults(defaults client.Defaults) *NewReportRelationshipsReportRequest {
	return &NewReportRelationshipsReportRequest{

		Data: make([]*NewReportRelationshipsReportRequestDataItems0, 0),
	}
}

func (m *NewReportRelationshipsReportRequest) WithData(data []*NewReportRelationshipsReportRequestDataItems0) *NewReportRelationshipsReportRequest {

	m.Data = data

	return m
}

// Validate validates this new report relationships report request
func (m *NewReportRelationshipsReportRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NewReportRelationshipsReportRequest) validateData(formats strfmt.Registry) error {

	if swag.IsZero(m.Data) { // not required
		return nil
	}

	for i := 0; i < len(m.Data); i++ {
		if swag.IsZero(m.Data[i]) { // not required
			continue
		}

		if m.Data[i] != nil {
			if err := m.Data[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("report_request" + "." + "data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *NewReportRelationshipsReportRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NewReportRelationshipsReportRequest) UnmarshalBinary(b []byte) error {
	var res NewReportRelationshipsReportRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
func (m *NewReportRelationshipsReportRequest) Json() string {
	json, err := json.MarshalIndent(m, "  ", "  ")
	if err != nil {
		log.Fatal(err)
	}
	return string(json)
}

// NewReportRelationshipsReportRequestDataItems0 new report relationships report request data items0
// swagger:model NewReportRelationshipsReportRequestDataItems0
type NewReportRelationshipsReportRequestDataItems0 struct {

	// id
	// Format: uuid
	ID strfmt.UUID `json:"id,omitempty"`
}

func NewReportRelationshipsReportRequestDataItems0WithDefaults(defaults client.Defaults) *NewReportRelationshipsReportRequestDataItems0 {
	return &NewReportRelationshipsReportRequestDataItems0{

		ID: defaults.GetStrfmtUUID("NewReportRelationshipsReportRequestDataItems0", "id"),
	}
}

func (m *NewReportRelationshipsReportRequestDataItems0) WithID(id strfmt.UUID) *NewReportRelationshipsReportRequestDataItems0 {

	m.ID = id

	return m
}

// Validate validates this new report relationships report request data items0
func (m *NewReportRelationshipsReportRequestDataItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NewReportRelationshipsReportRequestDataItems0) validateID(formats strfmt.Registry) error {

	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.FormatOf("id", "body", "uuid", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *NewReportRelationshipsReportRequestDataItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NewReportRelationshipsReportRequestDataItems0) UnmarshalBinary(b []byte) error {
	var res NewReportRelationshipsReportRequestDataItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
func (m *NewReportRelationshipsReportRequestDataItems0) Json() string {
	json, err := json.MarshalIndent(m, "  ", "  ")
	if err != nil {
		log.Fatal(err)
	}
	return string(json)
}
