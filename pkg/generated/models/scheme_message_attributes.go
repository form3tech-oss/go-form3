// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"log"
	"strconv"

	"github.com/form3tech-oss/go-form3/v4/pkg/client"
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SchemeMessageAttributes scheme message attributes
// swagger:model SchemeMessageAttributes
type SchemeMessageAttributes struct {

	// date
	// Required: true
	// Format: date-time
	Date strfmt.DateTime `json:"date"`

	// entries
	// Required: true
	Entries []*SchemeMessageEntryItem `json:"entries"`

	// payment scheme
	// Required: true
	PaymentScheme *PaymentScheme `json:"payment_scheme"`

	// scheme message type
	// Required: true
	SchemeMessageType string `json:"scheme_message_type"`

	// unique scheme id
	UniqueSchemeID *string `json:"unique_scheme_id,omitempty"`
}

func SchemeMessageAttributesWithDefaults(defaults client.Defaults) *SchemeMessageAttributes {
	return &SchemeMessageAttributes{

		Date: defaults.GetStrfmtDateTime("SchemeMessageAttributes", "date"),

		Entries: make([]*SchemeMessageEntryItem, 0),

		// TODO PaymentScheme: PaymentScheme,

		SchemeMessageType: defaults.GetString("SchemeMessageAttributes", "scheme_message_type"),

		UniqueSchemeID: defaults.GetStringPtr("SchemeMessageAttributes", "unique_scheme_id"),
	}
}

func (m *SchemeMessageAttributes) WithDate(date strfmt.DateTime) *SchemeMessageAttributes {

	m.Date = date

	return m
}

func (m *SchemeMessageAttributes) WithEntries(entries []*SchemeMessageEntryItem) *SchemeMessageAttributes {

	m.Entries = entries

	return m
}

func (m *SchemeMessageAttributes) WithPaymentScheme(paymentScheme PaymentScheme) *SchemeMessageAttributes {

	m.PaymentScheme = &paymentScheme

	return m
}

func (m *SchemeMessageAttributes) WithoutPaymentScheme() *SchemeMessageAttributes {
	m.PaymentScheme = nil
	return m
}

func (m *SchemeMessageAttributes) WithSchemeMessageType(schemeMessageType string) *SchemeMessageAttributes {

	m.SchemeMessageType = schemeMessageType

	return m
}

func (m *SchemeMessageAttributes) WithUniqueSchemeID(uniqueSchemeID string) *SchemeMessageAttributes {

	m.UniqueSchemeID = &uniqueSchemeID

	return m
}

func (m *SchemeMessageAttributes) WithoutUniqueSchemeID() *SchemeMessageAttributes {
	m.UniqueSchemeID = nil
	return m
}

// Validate validates this scheme message attributes
func (m *SchemeMessageAttributes) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntries(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePaymentScheme(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSchemeMessageType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SchemeMessageAttributes) validateDate(formats strfmt.Registry) error {

	if err := validate.Required("date", "body", strfmt.DateTime(m.Date)); err != nil {
		return err
	}

	if err := validate.FormatOf("date", "body", "date-time", m.Date.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *SchemeMessageAttributes) validateEntries(formats strfmt.Registry) error {

	if err := validate.Required("entries", "body", m.Entries); err != nil {
		return err
	}

	for i := 0; i < len(m.Entries); i++ {
		if swag.IsZero(m.Entries[i]) { // not required
			continue
		}

		if m.Entries[i] != nil {
			if err := m.Entries[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("entries" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SchemeMessageAttributes) validatePaymentScheme(formats strfmt.Registry) error {

	if err := validate.Required("payment_scheme", "body", m.PaymentScheme); err != nil {
		return err
	}

	if m.PaymentScheme != nil {
		if err := m.PaymentScheme.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("payment_scheme")
			}
			return err
		}
	}

	return nil
}

func (m *SchemeMessageAttributes) validateSchemeMessageType(formats strfmt.Registry) error {

	if err := validate.RequiredString("scheme_message_type", "body", string(m.SchemeMessageType)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SchemeMessageAttributes) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SchemeMessageAttributes) UnmarshalBinary(b []byte) error {
	var res SchemeMessageAttributes
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
func (m *SchemeMessageAttributes) Json() string {
	json, err := json.MarshalIndent(m, "  ", "  ")
	if err != nil {
		log.Fatal(err)
	}
	return string(json)
}
