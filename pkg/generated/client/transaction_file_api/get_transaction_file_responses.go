// Code generated by go-swagger; DO NOT EDIT.

package transaction_file_api

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/form3tech-oss/go-form3/v7/pkg/generated/models"
)

// GetTransactionFileReader is a Reader for the GetTransactionFile structure.
type GetTransactionFileReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetTransactionFileReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetTransactionFileOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 401:
		result := NewGetTransactionFileUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewGetTransactionFileForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewGetTransactionFileNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewGetTransactionFileInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetTransactionFileOK creates a GetTransactionFileOK with default headers values
func NewGetTransactionFileOK() *GetTransactionFileOK {
	return &GetTransactionFileOK{}
}

/*
GetTransactionFileOK handles this case with default header values.

Transaction File Response
*/
type GetTransactionFileOK struct {

	//Payload

	// isStream: false
	*models.TransactionFileResponse
}

// IsSuccess returns true when this get transaction file o k response has a 2xx status code
func (o *GetTransactionFileOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get transaction file o k response has a 3xx status code
func (o *GetTransactionFileOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get transaction file o k response has a 4xx status code
func (o *GetTransactionFileOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get transaction file o k response has a 5xx status code
func (o *GetTransactionFileOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get transaction file o k response a status code equal to that given
func (o *GetTransactionFileOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get transaction file o k response
func (o *GetTransactionFileOK) Code() int {
	return 200
}

func (o *GetTransactionFileOK) Error() string {
	return fmt.Sprintf("[GET /files/transactions/{transaction_file_id}][%d] getTransactionFileOK", 200)
}

func (o *GetTransactionFileOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.TransactionFileResponse = new(models.TransactionFileResponse)

	// response payload

	if err := consumer.Consume(response.Body(), o.TransactionFileResponse); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTransactionFileUnauthorized creates a GetTransactionFileUnauthorized with default headers values
func NewGetTransactionFileUnauthorized() *GetTransactionFileUnauthorized {
	return &GetTransactionFileUnauthorized{}
}

/*
GetTransactionFileUnauthorized handles this case with default header values.

Unauthorized
*/
type GetTransactionFileUnauthorized struct {

	//Payload

	// isStream: false
	*models.APIError
}

// IsSuccess returns true when this get transaction file unauthorized response has a 2xx status code
func (o *GetTransactionFileUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get transaction file unauthorized response has a 3xx status code
func (o *GetTransactionFileUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get transaction file unauthorized response has a 4xx status code
func (o *GetTransactionFileUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get transaction file unauthorized response has a 5xx status code
func (o *GetTransactionFileUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get transaction file unauthorized response a status code equal to that given
func (o *GetTransactionFileUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get transaction file unauthorized response
func (o *GetTransactionFileUnauthorized) Code() int {
	return 401
}

func (o *GetTransactionFileUnauthorized) Error() string {
	return fmt.Sprintf("[GET /files/transactions/{transaction_file_id}][%d] getTransactionFileUnauthorized", 401)
}

func (o *GetTransactionFileUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.APIError = new(models.APIError)

	// response payload

	if err := consumer.Consume(response.Body(), o.APIError); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTransactionFileForbidden creates a GetTransactionFileForbidden with default headers values
func NewGetTransactionFileForbidden() *GetTransactionFileForbidden {
	return &GetTransactionFileForbidden{}
}

/*
GetTransactionFileForbidden handles this case with default header values.

Forbidden
*/
type GetTransactionFileForbidden struct {

	//Payload

	// isStream: false
	*models.APIError
}

// IsSuccess returns true when this get transaction file forbidden response has a 2xx status code
func (o *GetTransactionFileForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get transaction file forbidden response has a 3xx status code
func (o *GetTransactionFileForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get transaction file forbidden response has a 4xx status code
func (o *GetTransactionFileForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get transaction file forbidden response has a 5xx status code
func (o *GetTransactionFileForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get transaction file forbidden response a status code equal to that given
func (o *GetTransactionFileForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get transaction file forbidden response
func (o *GetTransactionFileForbidden) Code() int {
	return 403
}

func (o *GetTransactionFileForbidden) Error() string {
	return fmt.Sprintf("[GET /files/transactions/{transaction_file_id}][%d] getTransactionFileForbidden", 403)
}

func (o *GetTransactionFileForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.APIError = new(models.APIError)

	// response payload

	if err := consumer.Consume(response.Body(), o.APIError); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTransactionFileNotFound creates a GetTransactionFileNotFound with default headers values
func NewGetTransactionFileNotFound() *GetTransactionFileNotFound {
	return &GetTransactionFileNotFound{}
}

/*
GetTransactionFileNotFound handles this case with default header values.

Not Found
*/
type GetTransactionFileNotFound struct {

	//Payload

	// isStream: false
	*models.APIError
}

// IsSuccess returns true when this get transaction file not found response has a 2xx status code
func (o *GetTransactionFileNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get transaction file not found response has a 3xx status code
func (o *GetTransactionFileNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get transaction file not found response has a 4xx status code
func (o *GetTransactionFileNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get transaction file not found response has a 5xx status code
func (o *GetTransactionFileNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get transaction file not found response a status code equal to that given
func (o *GetTransactionFileNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get transaction file not found response
func (o *GetTransactionFileNotFound) Code() int {
	return 404
}

func (o *GetTransactionFileNotFound) Error() string {
	return fmt.Sprintf("[GET /files/transactions/{transaction_file_id}][%d] getTransactionFileNotFound", 404)
}

func (o *GetTransactionFileNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.APIError = new(models.APIError)

	// response payload

	if err := consumer.Consume(response.Body(), o.APIError); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTransactionFileInternalServerError creates a GetTransactionFileInternalServerError with default headers values
func NewGetTransactionFileInternalServerError() *GetTransactionFileInternalServerError {
	return &GetTransactionFileInternalServerError{}
}

/*
GetTransactionFileInternalServerError handles this case with default header values.

Internal Server Error
*/
type GetTransactionFileInternalServerError struct {

	//Payload

	// isStream: false
	*models.APIError
}

// IsSuccess returns true when this get transaction file internal server error response has a 2xx status code
func (o *GetTransactionFileInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get transaction file internal server error response has a 3xx status code
func (o *GetTransactionFileInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get transaction file internal server error response has a 4xx status code
func (o *GetTransactionFileInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get transaction file internal server error response has a 5xx status code
func (o *GetTransactionFileInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get transaction file internal server error response a status code equal to that given
func (o *GetTransactionFileInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get transaction file internal server error response
func (o *GetTransactionFileInternalServerError) Code() int {
	return 500
}

func (o *GetTransactionFileInternalServerError) Error() string {
	return fmt.Sprintf("[GET /files/transactions/{transaction_file_id}][%d] getTransactionFileInternalServerError", 500)
}

func (o *GetTransactionFileInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.APIError = new(models.APIError)

	// response payload

	if err := consumer.Consume(response.Body(), o.APIError); err != nil && err != io.EOF {
		return err
	}

	return nil
}
