// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"log"

	"github.com/form3tech-oss/go-form3/v2/pkg/client"
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AccountRequestSubmissionCreate account request submission create
// swagger:model AccountRequestSubmissionCreate
type AccountRequestSubmissionCreate struct {

	// id
	// Required: true
	// Format: uuid
	ID strfmt.UUID `json:"id"`

	// Unique ID of the organisation this resource is created by
	// Required: true
	// Format: uuid
	OrganisationID strfmt.UUID `json:"organisation_id"`

	// type
	// Required: true
	// Enum: [account_request_submissions]
	Type string `json:"type"`
}

func AccountRequestSubmissionCreateWithDefaults(defaults client.Defaults) *AccountRequestSubmissionCreate {
	return &AccountRequestSubmissionCreate{

		ID: defaults.GetStrfmtUUID("AccountRequestSubmissionCreate", "id"),

		OrganisationID: defaults.GetStrfmtUUID("AccountRequestSubmissionCreate", "organisation_id"),

		Type: defaults.GetString("AccountRequestSubmissionCreate", "type"),
	}
}

func (m *AccountRequestSubmissionCreate) WithID(id strfmt.UUID) *AccountRequestSubmissionCreate {

	m.ID = id

	return m
}

func (m *AccountRequestSubmissionCreate) WithOrganisationID(organisationID strfmt.UUID) *AccountRequestSubmissionCreate {

	m.OrganisationID = organisationID

	return m
}

func (m *AccountRequestSubmissionCreate) WithType(typeVar string) *AccountRequestSubmissionCreate {

	m.Type = typeVar

	return m
}

// Validate validates this account request submission create
func (m *AccountRequestSubmissionCreate) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrganisationID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AccountRequestSubmissionCreate) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", strfmt.UUID(m.ID)); err != nil {
		return err
	}

	if err := validate.FormatOf("id", "body", "uuid", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *AccountRequestSubmissionCreate) validateOrganisationID(formats strfmt.Registry) error {

	if err := validate.Required("organisation_id", "body", strfmt.UUID(m.OrganisationID)); err != nil {
		return err
	}

	if err := validate.FormatOf("organisation_id", "body", "uuid", m.OrganisationID.String(), formats); err != nil {
		return err
	}

	return nil
}

var accountRequestSubmissionCreateTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["account_request_submissions"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		accountRequestSubmissionCreateTypeTypePropEnum = append(accountRequestSubmissionCreateTypeTypePropEnum, v)
	}
}

const (

	// AccountRequestSubmissionCreateTypeAccountRequestSubmissions captures enum value "account_request_submissions"
	AccountRequestSubmissionCreateTypeAccountRequestSubmissions string = "account_request_submissions"
)

// prop value enum
func (m *AccountRequestSubmissionCreate) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, accountRequestSubmissionCreateTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *AccountRequestSubmissionCreate) validateType(formats strfmt.Registry) error {

	if err := validate.RequiredString("type", "body", string(m.Type)); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AccountRequestSubmissionCreate) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AccountRequestSubmissionCreate) UnmarshalBinary(b []byte) error {
	var res AccountRequestSubmissionCreate
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
func (m *AccountRequestSubmissionCreate) Json() string {
	json, err := json.MarshalIndent(m, "  ", "  ")
	if err != nil {
		log.Fatal(err)
	}
	return string(json)
}
