// Code generated by go-swagger; DO NOT EDIT.

package payment_reads

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// Client.ListPayments creates a new ListPaymentsRequest object
// with the default values initialized.
func (c *Client) ListPayments() *ListPaymentsRequest {
	var ()
	return &ListPaymentsRequest{

		FilterAdmissionAdmissionDateFrom: c.Defaults.GetStrfmtDateTimePtr("ListPayments", "filter[admission.admission_date_from]"),

		FilterAdmissionAdmissionDateTo: c.Defaults.GetStrfmtDateTimePtr("ListPayments", "filter[admission.admission_date_to]"),

		FilterAdmissionID: c.Defaults.GetStrfmtUUIDPtr("ListPayments", "filter[admission.id]"),

		FilterAdmissionSchemeStatusCode: c.Defaults.GetStringPtr("ListPayments", "filter[admission.scheme_status_code]"),

		FilterAdmissionSettlementCycle: c.Defaults.GetInt64Ptr("ListPayments", "filter[admission.settlement_cycle]"),

		FilterAdmissionSettlementDate: c.Defaults.GetStrfmtDatePtr("ListPayments", "filter[admission.settlement_date]"),

		FilterAdmissionStatus: c.Defaults.GetStringPtr("ListPayments", "filter[admission.status]"),

		FilterAmount: c.Defaults.GetStringPtr("ListPayments", "filter[amount]"),

		FilterAmountFrom: c.Defaults.GetFloat64Ptr("ListPayments", "filter[amount][from]"),

		FilterAmountTo: c.Defaults.GetFloat64Ptr("ListPayments", "filter[amount][to]"),

		FilterBeneficiaryPartyAccountName: c.Defaults.GetStringPtr("ListPayments", "filter[beneficiary_party.account_name]"),

		FilterBeneficiaryPartyAccountNumber: c.Defaults.GetStringPtr("ListPayments", "filter[beneficiary_party.account_number]"),

		FilterBeneficiaryPartyBankID: c.Defaults.GetStringPtr("ListPayments", "filter[beneficiary_party.bank_id]"),

		FilterCreatedDateFrom: c.Defaults.GetStrfmtDatePtr("ListPayments", "filter[created_date_from]"),

		FilterCreatedDateTo: c.Defaults.GetStrfmtDatePtr("ListPayments", "filter[created_date_to]"),

		FilterCurrency: c.Defaults.GetStringPtr("ListPayments", "filter[currency]"),

		FilterDebtorPartyAccountName: c.Defaults.GetStringPtr("ListPayments", "filter[debtor_party.account_name]"),

		FilterDebtorPartyAccountNumber: c.Defaults.GetStringPtr("ListPayments", "filter[debtor_party.account_number]"),

		FilterDebtorPartyBankID: c.Defaults.GetStringPtr("ListPayments", "filter[debtor_party.bank_id]"),

		FilterEndToEndReference: c.Defaults.GetStringPtr("ListPayments", "filter[end_to_end_reference]"),

		FilterNotRelationships: make([]string, 0),

		FilterOrganisationID: make([]strfmt.UUID, 0),

		FilterPaymentScheme: c.Defaults.GetStringPtr("ListPayments", "filter[payment_scheme]"),

		FilterPaymentType: c.Defaults.GetStringPtr("ListPayments", "filter[payment_type]"),

		FilterProcessingDateFrom: c.Defaults.GetStrfmtDatePtr("ListPayments", "filter[processing_date_from]"),

		FilterProcessingDateTo: c.Defaults.GetStrfmtDatePtr("ListPayments", "filter[processing_date_to]"),

		FilterRecallID: c.Defaults.GetStrfmtUUIDPtr("ListPayments", "filter[recall.id]"),

		FilterRecallAdmissionAdmissionDateFrom: c.Defaults.GetStrfmtDateTimePtr("ListPayments", "filter[recall_admission.admission_date_from]"),

		FilterRecallAdmissionAdmissionDateTo: c.Defaults.GetStrfmtDateTimePtr("ListPayments", "filter[recall_admission.admission_date_to]"),

		FilterRecallAdmissionStatus: c.Defaults.GetStringPtr("ListPayments", "filter[recall_admission.status]"),

		FilterRecallDecisionSubmissionStatus: c.Defaults.GetStringPtr("ListPayments", "filter[recall_decision_submission.status]"),

		FilterRecallDecisionSubmissionSubmissionDateFrom: c.Defaults.GetStrfmtDateTimePtr("ListPayments", "filter[recall_decision_submission.submission_date_from]"),

		FilterRecallDecisionSubmissionSubmissionDateTo: c.Defaults.GetStrfmtDateTimePtr("ListPayments", "filter[recall_decision_submission.submission_date_to]"),

		FilterRecallSubmissionStatus: c.Defaults.GetStringPtr("ListPayments", "filter[recall_submission.status]"),

		FilterRecallSubmissionSubmissionDateFrom: c.Defaults.GetStrfmtDateTimePtr("ListPayments", "filter[recall_submission.submission_date_from]"),

		FilterRecallSubmissionSubmissionDateTo: c.Defaults.GetStrfmtDateTimePtr("ListPayments", "filter[recall_submission.submission_date_to]"),

		FilterReference: c.Defaults.GetStringPtr("ListPayments", "filter[reference]"),

		FilterRelationships: make([]string, 0),

		FilterReturnID: c.Defaults.GetStrfmtUUIDPtr("ListPayments", "filter[return.id]"),

		FilterReturnUniqueSchemeID: c.Defaults.GetStringPtr("ListPayments", "filter[return.unique_scheme_id]"),

		FilterReturnAdmissionAdmissionDateFrom: c.Defaults.GetStrfmtDateTimePtr("ListPayments", "filter[return_admission.admission_date_from]"),

		FilterReturnAdmissionAdmissionDateTo: c.Defaults.GetStrfmtDateTimePtr("ListPayments", "filter[return_admission.admission_date_to]"),

		FilterReturnAdmissionSettlementCycle: c.Defaults.GetInt64Ptr("ListPayments", "filter[return_admission.settlement_cycle]"),

		FilterReturnAdmissionSettlementDate: c.Defaults.GetStrfmtDatePtr("ListPayments", "filter[return_admission.settlement_date]"),

		FilterReturnAdmissionStatus: c.Defaults.GetStringPtr("ListPayments", "filter[return_admission.status]"),

		FilterReturnSubmissionSettlementCycle: c.Defaults.GetInt64Ptr("ListPayments", "filter[return_submission.settlement_cycle]"),

		FilterReturnSubmissionSettlementDate: c.Defaults.GetStrfmtDatePtr("ListPayments", "filter[return_submission.settlement_date]"),

		FilterReturnSubmissionStatus: c.Defaults.GetStringPtr("ListPayments", "filter[return_submission.status]"),

		FilterReturnSubmissionSubmissionDateFrom: c.Defaults.GetStrfmtDateTimePtr("ListPayments", "filter[return_submission.submission_date_from]"),

		FilterReturnSubmissionSubmissionDateTo: c.Defaults.GetStrfmtDateTimePtr("ListPayments", "filter[return_submission.submission_date_to]"),

		FilterReversalID: c.Defaults.GetStrfmtUUIDPtr("ListPayments", "filter[reversal.id]"),

		FilterReversalAdmissionAdmissionDateFrom: c.Defaults.GetStrfmtDateTimePtr("ListPayments", "filter[reversal_admission.admission_date_from]"),

		FilterReversalAdmissionAdmissionDateTo: c.Defaults.GetStrfmtDateTimePtr("ListPayments", "filter[reversal_admission.admission_date_to]"),

		FilterReversalAdmissionStatus: c.Defaults.GetStringPtr("ListPayments", "filter[reversal_admission.status]"),

		FilterReversalSubmissionStatus: c.Defaults.GetStringPtr("ListPayments", "filter[reversal_submission.status]"),

		FilterReversalSubmissionSubmissionDateFrom: c.Defaults.GetStrfmtDateTimePtr("ListPayments", "filter[reversal_submission.submission_date_from]"),

		FilterReversalSubmissionSubmissionDateTo: c.Defaults.GetStrfmtDateTimePtr("ListPayments", "filter[reversal_submission.submission_date_to]"),

		FilterRoute: c.Defaults.GetStringPtr("ListPayments", "filter[route]"),

		FilterSchemeTransactionID: c.Defaults.GetStringPtr("ListPayments", "filter[scheme_transaction_id]"),

		FilterSubmissionID: c.Defaults.GetStrfmtUUIDPtr("ListPayments", "filter[submission.id]"),

		FilterSubmissionSchemeStatusCode: c.Defaults.GetStringPtr("ListPayments", "filter[submission.scheme_status_code]"),

		FilterSubmissionSettlementCycle: c.Defaults.GetInt64Ptr("ListPayments", "filter[submission.settlement_cycle]"),

		FilterSubmissionSettlementDate: c.Defaults.GetStrfmtDatePtr("ListPayments", "filter[submission.settlement_date]"),

		FilterSubmissionStatus: c.Defaults.GetStringPtr("ListPayments", "filter[submission.status]"),

		FilterSubmissionSubmissionDateFrom: c.Defaults.GetStrfmtDateTimePtr("ListPayments", "filter[submission.submission_date_from]"),

		FilterSubmissionSubmissionDateTo: c.Defaults.GetStrfmtDateTimePtr("ListPayments", "filter[submission.submission_date_to]"),

		FilterUniqueSchemeID: c.Defaults.GetStringPtr("ListPayments", "filter[unique_scheme_id]"),

		PageAfter: c.Defaults.GetStringPtr("ListPayments", "page[after]"),

		PageBefore: c.Defaults.GetStringPtr("ListPayments", "page[before]"),

		PageNumber: c.Defaults.GetStringPtr("ListPayments", "page[number]"),

		PageSize: c.Defaults.GetInt64Ptr("ListPayments", "page[size]"),

		timeout: cr.DefaultTimeout,

		transport: c.transport,
		formats:   c.formats,
	}
}

type ListPaymentsRequest struct {

	/*FilterAdmissionAdmissionDateFrom*/

	FilterAdmissionAdmissionDateFrom *strfmt.DateTime

	/*FilterAdmissionAdmissionDateTo*/

	FilterAdmissionAdmissionDateTo *strfmt.DateTime

	/*FilterAdmissionID*/

	FilterAdmissionID *strfmt.UUID

	/*FilterAdmissionSchemeStatusCode      Filter by admission scheme status code      */

	FilterAdmissionSchemeStatusCode *string

	/*FilterAdmissionSettlementCycle*/

	FilterAdmissionSettlementCycle *int64

	/*FilterAdmissionSettlementDate*/

	FilterAdmissionSettlementDate *strfmt.Date

	/*FilterAdmissionStatus      Filter by admission status      */

	FilterAdmissionStatus *string

	/*FilterAmount*/

	FilterAmount *string

	/*FilterAmountFrom*/

	FilterAmountFrom *float64

	/*FilterAmountTo*/

	FilterAmountTo *float64

	/*FilterBeneficiaryPartyAccountName*/

	FilterBeneficiaryPartyAccountName *string

	/*FilterBeneficiaryPartyAccountNumber*/

	FilterBeneficiaryPartyAccountNumber *string

	/*FilterBeneficiaryPartyBankID*/

	FilterBeneficiaryPartyBankID *string

	/*FilterCreatedDateFrom*/

	FilterCreatedDateFrom *strfmt.Date

	/*FilterCreatedDateTo*/

	FilterCreatedDateTo *strfmt.Date

	/*FilterCurrency*/

	FilterCurrency *string

	/*FilterDebtorPartyAccountName*/

	FilterDebtorPartyAccountName *string

	/*FilterDebtorPartyAccountNumber*/

	FilterDebtorPartyAccountNumber *string

	/*FilterDebtorPartyBankID*/

	FilterDebtorPartyBankID *string

	/*FilterEndToEndReference*/

	FilterEndToEndReference *string

	/*FilterNotRelationships      Filter for payments containing none of the requested relationships      */

	FilterNotRelationships []string

	/*FilterOrganisationID      Filter by organisation id      */

	FilterOrganisationID []strfmt.UUID

	/*FilterPaymentScheme*/

	FilterPaymentScheme *string

	/*FilterPaymentType*/

	FilterPaymentType *string

	/*FilterProcessingDateFrom*/

	FilterProcessingDateFrom *strfmt.Date

	/*FilterProcessingDateTo*/

	FilterProcessingDateTo *strfmt.Date

	/*FilterRecallID*/

	FilterRecallID *strfmt.UUID

	/*FilterRecallAdmissionAdmissionDateFrom*/

	FilterRecallAdmissionAdmissionDateFrom *strfmt.DateTime

	/*FilterRecallAdmissionAdmissionDateTo*/

	FilterRecallAdmissionAdmissionDateTo *strfmt.DateTime

	/*FilterRecallAdmissionStatus*/

	FilterRecallAdmissionStatus *string

	/*FilterRecallDecisionSubmissionStatus*/

	FilterRecallDecisionSubmissionStatus *string

	/*FilterRecallDecisionSubmissionSubmissionDateFrom*/

	FilterRecallDecisionSubmissionSubmissionDateFrom *strfmt.DateTime

	/*FilterRecallDecisionSubmissionSubmissionDateTo*/

	FilterRecallDecisionSubmissionSubmissionDateTo *strfmt.DateTime

	/*FilterRecallSubmissionStatus*/

	FilterRecallSubmissionStatus *string

	/*FilterRecallSubmissionSubmissionDateFrom*/

	FilterRecallSubmissionSubmissionDateFrom *strfmt.DateTime

	/*FilterRecallSubmissionSubmissionDateTo*/

	FilterRecallSubmissionSubmissionDateTo *strfmt.DateTime

	/*FilterReference*/

	FilterReference *string

	/*FilterRelationships      Filter for payments containing all of the requested relationships      */

	FilterRelationships []string

	/*FilterReturnID*/

	FilterReturnID *strfmt.UUID

	/*FilterReturnUniqueSchemeID*/

	FilterReturnUniqueSchemeID *string

	/*FilterReturnAdmissionAdmissionDateFrom*/

	FilterReturnAdmissionAdmissionDateFrom *strfmt.DateTime

	/*FilterReturnAdmissionAdmissionDateTo*/

	FilterReturnAdmissionAdmissionDateTo *strfmt.DateTime

	/*FilterReturnAdmissionSettlementCycle*/

	FilterReturnAdmissionSettlementCycle *int64

	/*FilterReturnAdmissionSettlementDate*/

	FilterReturnAdmissionSettlementDate *strfmt.Date

	/*FilterReturnAdmissionStatus*/

	FilterReturnAdmissionStatus *string

	/*FilterReturnSubmissionSettlementCycle*/

	FilterReturnSubmissionSettlementCycle *int64

	/*FilterReturnSubmissionSettlementDate*/

	FilterReturnSubmissionSettlementDate *strfmt.Date

	/*FilterReturnSubmissionStatus      Filter by return submission status      */

	FilterReturnSubmissionStatus *string

	/*FilterReturnSubmissionSubmissionDateFrom*/

	FilterReturnSubmissionSubmissionDateFrom *strfmt.DateTime

	/*FilterReturnSubmissionSubmissionDateTo*/

	FilterReturnSubmissionSubmissionDateTo *strfmt.DateTime

	/*FilterReversalID*/

	FilterReversalID *strfmt.UUID

	/*FilterReversalAdmissionAdmissionDateFrom*/

	FilterReversalAdmissionAdmissionDateFrom *strfmt.DateTime

	/*FilterReversalAdmissionAdmissionDateTo*/

	FilterReversalAdmissionAdmissionDateTo *strfmt.DateTime

	/*FilterReversalAdmissionStatus*/

	FilterReversalAdmissionStatus *string

	/*FilterReversalSubmissionStatus*/

	FilterReversalSubmissionStatus *string

	/*FilterReversalSubmissionSubmissionDateFrom*/

	FilterReversalSubmissionSubmissionDateFrom *strfmt.DateTime

	/*FilterReversalSubmissionSubmissionDateTo*/

	FilterReversalSubmissionSubmissionDateTo *strfmt.DateTime

	/*FilterRoute      Filter by route      */

	FilterRoute *string

	/*FilterSchemeTransactionID*/

	FilterSchemeTransactionID *string

	/*FilterSubmissionID*/

	FilterSubmissionID *strfmt.UUID

	/*FilterSubmissionSchemeStatusCode      Filter by submission scheme status code      */

	FilterSubmissionSchemeStatusCode *string

	/*FilterSubmissionSettlementCycle*/

	FilterSubmissionSettlementCycle *int64

	/*FilterSubmissionSettlementDate*/

	FilterSubmissionSettlementDate *strfmt.Date

	/*FilterSubmissionStatus      Filter by submission status      */

	FilterSubmissionStatus *string

	/*FilterSubmissionSubmissionDateFrom*/

	FilterSubmissionSubmissionDateFrom *strfmt.DateTime

	/*FilterSubmissionSubmissionDateTo*/

	FilterSubmissionSubmissionDateTo *strfmt.DateTime

	/*FilterUniqueSchemeID*/

	FilterUniqueSchemeID *string

	/*PageAfter      Cursor for next page (this is a base64-encoded UUID continuation token returned from the application and should not be manually generated, unless requesting the first page, where the value should be set to "start").      */

	PageAfter *string

	/*PageBefore      Cursor for previous page (this is a base64-encoded UUID continuation token returned from the application and should not be manually generated, unless requesting the last page, where the value should be set to "end").      */

	PageBefore *string

	/*PageNumber      Which page to select. page[number] * page[size] is restricted to less than 10,000.      */

	PageNumber *string

	/*PageSize      Number of items to select.      */

	PageSize *int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client

	transport runtime.ClientTransport
	formats   strfmt.Registry
}

func (o *ListPaymentsRequest) FromJson(j string) (*ListPaymentsRequest, error) {

	return o, nil
}

func (o *ListPaymentsRequest) WithFilterAdmissionAdmissionDateFrom(filterAdmissionAdmissionDateFrom strfmt.DateTime) *ListPaymentsRequest {

	o.FilterAdmissionAdmissionDateFrom = &filterAdmissionAdmissionDateFrom

	return o
}

func (o *ListPaymentsRequest) WithoutFilterAdmissionAdmissionDateFrom() *ListPaymentsRequest {

	o.FilterAdmissionAdmissionDateFrom = nil

	return o
}

func (o *ListPaymentsRequest) WithFilterAdmissionAdmissionDateTo(filterAdmissionAdmissionDateTo strfmt.DateTime) *ListPaymentsRequest {

	o.FilterAdmissionAdmissionDateTo = &filterAdmissionAdmissionDateTo

	return o
}

func (o *ListPaymentsRequest) WithoutFilterAdmissionAdmissionDateTo() *ListPaymentsRequest {

	o.FilterAdmissionAdmissionDateTo = nil

	return o
}

func (o *ListPaymentsRequest) WithFilterAdmissionID(filterAdmissionID strfmt.UUID) *ListPaymentsRequest {

	o.FilterAdmissionID = &filterAdmissionID

	return o
}

func (o *ListPaymentsRequest) WithoutFilterAdmissionID() *ListPaymentsRequest {

	o.FilterAdmissionID = nil

	return o
}

func (o *ListPaymentsRequest) WithFilterAdmissionSchemeStatusCode(filterAdmissionSchemeStatusCode string) *ListPaymentsRequest {

	o.FilterAdmissionSchemeStatusCode = &filterAdmissionSchemeStatusCode

	return o
}

func (o *ListPaymentsRequest) WithoutFilterAdmissionSchemeStatusCode() *ListPaymentsRequest {

	o.FilterAdmissionSchemeStatusCode = nil

	return o
}

func (o *ListPaymentsRequest) WithFilterAdmissionSettlementCycle(filterAdmissionSettlementCycle int64) *ListPaymentsRequest {

	o.FilterAdmissionSettlementCycle = &filterAdmissionSettlementCycle

	return o
}

func (o *ListPaymentsRequest) WithoutFilterAdmissionSettlementCycle() *ListPaymentsRequest {

	o.FilterAdmissionSettlementCycle = nil

	return o
}

func (o *ListPaymentsRequest) WithFilterAdmissionSettlementDate(filterAdmissionSettlementDate strfmt.Date) *ListPaymentsRequest {

	o.FilterAdmissionSettlementDate = &filterAdmissionSettlementDate

	return o
}

func (o *ListPaymentsRequest) WithoutFilterAdmissionSettlementDate() *ListPaymentsRequest {

	o.FilterAdmissionSettlementDate = nil

	return o
}

func (o *ListPaymentsRequest) WithFilterAdmissionStatus(filterAdmissionStatus string) *ListPaymentsRequest {

	o.FilterAdmissionStatus = &filterAdmissionStatus

	return o
}

func (o *ListPaymentsRequest) WithoutFilterAdmissionStatus() *ListPaymentsRequest {

	o.FilterAdmissionStatus = nil

	return o
}

func (o *ListPaymentsRequest) WithFilterAmount(filterAmount string) *ListPaymentsRequest {

	o.FilterAmount = &filterAmount

	return o
}

func (o *ListPaymentsRequest) WithoutFilterAmount() *ListPaymentsRequest {

	o.FilterAmount = nil

	return o
}

func (o *ListPaymentsRequest) WithFilterAmountFrom(filterAmountFrom float64) *ListPaymentsRequest {

	o.FilterAmountFrom = &filterAmountFrom

	return o
}

func (o *ListPaymentsRequest) WithoutFilterAmountFrom() *ListPaymentsRequest {

	o.FilterAmountFrom = nil

	return o
}

func (o *ListPaymentsRequest) WithFilterAmountTo(filterAmountTo float64) *ListPaymentsRequest {

	o.FilterAmountTo = &filterAmountTo

	return o
}

func (o *ListPaymentsRequest) WithoutFilterAmountTo() *ListPaymentsRequest {

	o.FilterAmountTo = nil

	return o
}

func (o *ListPaymentsRequest) WithFilterBeneficiaryPartyAccountName(filterBeneficiaryPartyAccountName string) *ListPaymentsRequest {

	o.FilterBeneficiaryPartyAccountName = &filterBeneficiaryPartyAccountName

	return o
}

func (o *ListPaymentsRequest) WithoutFilterBeneficiaryPartyAccountName() *ListPaymentsRequest {

	o.FilterBeneficiaryPartyAccountName = nil

	return o
}

func (o *ListPaymentsRequest) WithFilterBeneficiaryPartyAccountNumber(filterBeneficiaryPartyAccountNumber string) *ListPaymentsRequest {

	o.FilterBeneficiaryPartyAccountNumber = &filterBeneficiaryPartyAccountNumber

	return o
}

func (o *ListPaymentsRequest) WithoutFilterBeneficiaryPartyAccountNumber() *ListPaymentsRequest {

	o.FilterBeneficiaryPartyAccountNumber = nil

	return o
}

func (o *ListPaymentsRequest) WithFilterBeneficiaryPartyBankID(filterBeneficiaryPartyBankID string) *ListPaymentsRequest {

	o.FilterBeneficiaryPartyBankID = &filterBeneficiaryPartyBankID

	return o
}

func (o *ListPaymentsRequest) WithoutFilterBeneficiaryPartyBankID() *ListPaymentsRequest {

	o.FilterBeneficiaryPartyBankID = nil

	return o
}

func (o *ListPaymentsRequest) WithFilterCreatedDateFrom(filterCreatedDateFrom strfmt.Date) *ListPaymentsRequest {

	o.FilterCreatedDateFrom = &filterCreatedDateFrom

	return o
}

func (o *ListPaymentsRequest) WithoutFilterCreatedDateFrom() *ListPaymentsRequest {

	o.FilterCreatedDateFrom = nil

	return o
}

func (o *ListPaymentsRequest) WithFilterCreatedDateTo(filterCreatedDateTo strfmt.Date) *ListPaymentsRequest {

	o.FilterCreatedDateTo = &filterCreatedDateTo

	return o
}

func (o *ListPaymentsRequest) WithoutFilterCreatedDateTo() *ListPaymentsRequest {

	o.FilterCreatedDateTo = nil

	return o
}

func (o *ListPaymentsRequest) WithFilterCurrency(filterCurrency string) *ListPaymentsRequest {

	o.FilterCurrency = &filterCurrency

	return o
}

func (o *ListPaymentsRequest) WithoutFilterCurrency() *ListPaymentsRequest {

	o.FilterCurrency = nil

	return o
}

func (o *ListPaymentsRequest) WithFilterDebtorPartyAccountName(filterDebtorPartyAccountName string) *ListPaymentsRequest {

	o.FilterDebtorPartyAccountName = &filterDebtorPartyAccountName

	return o
}

func (o *ListPaymentsRequest) WithoutFilterDebtorPartyAccountName() *ListPaymentsRequest {

	o.FilterDebtorPartyAccountName = nil

	return o
}

func (o *ListPaymentsRequest) WithFilterDebtorPartyAccountNumber(filterDebtorPartyAccountNumber string) *ListPaymentsRequest {

	o.FilterDebtorPartyAccountNumber = &filterDebtorPartyAccountNumber

	return o
}

func (o *ListPaymentsRequest) WithoutFilterDebtorPartyAccountNumber() *ListPaymentsRequest {

	o.FilterDebtorPartyAccountNumber = nil

	return o
}

func (o *ListPaymentsRequest) WithFilterDebtorPartyBankID(filterDebtorPartyBankID string) *ListPaymentsRequest {

	o.FilterDebtorPartyBankID = &filterDebtorPartyBankID

	return o
}

func (o *ListPaymentsRequest) WithoutFilterDebtorPartyBankID() *ListPaymentsRequest {

	o.FilterDebtorPartyBankID = nil

	return o
}

func (o *ListPaymentsRequest) WithFilterEndToEndReference(filterEndToEndReference string) *ListPaymentsRequest {

	o.FilterEndToEndReference = &filterEndToEndReference

	return o
}

func (o *ListPaymentsRequest) WithoutFilterEndToEndReference() *ListPaymentsRequest {

	o.FilterEndToEndReference = nil

	return o
}

func (o *ListPaymentsRequest) WithFilterNotRelationships(filterNotRelationships []string) *ListPaymentsRequest {

	o.FilterNotRelationships = filterNotRelationships

	return o
}

func (o *ListPaymentsRequest) WithoutFilterNotRelationships() *ListPaymentsRequest {

	o.FilterNotRelationships = nil

	return o
}

func (o *ListPaymentsRequest) WithFilterOrganisationID(filterOrganisationID []strfmt.UUID) *ListPaymentsRequest {

	o.FilterOrganisationID = filterOrganisationID

	return o
}

func (o *ListPaymentsRequest) WithoutFilterOrganisationID() *ListPaymentsRequest {

	o.FilterOrganisationID = nil

	return o
}

func (o *ListPaymentsRequest) WithFilterPaymentScheme(filterPaymentScheme string) *ListPaymentsRequest {

	o.FilterPaymentScheme = &filterPaymentScheme

	return o
}

func (o *ListPaymentsRequest) WithoutFilterPaymentScheme() *ListPaymentsRequest {

	o.FilterPaymentScheme = nil

	return o
}

func (o *ListPaymentsRequest) WithFilterPaymentType(filterPaymentType string) *ListPaymentsRequest {

	o.FilterPaymentType = &filterPaymentType

	return o
}

func (o *ListPaymentsRequest) WithoutFilterPaymentType() *ListPaymentsRequest {

	o.FilterPaymentType = nil

	return o
}

func (o *ListPaymentsRequest) WithFilterProcessingDateFrom(filterProcessingDateFrom strfmt.Date) *ListPaymentsRequest {

	o.FilterProcessingDateFrom = &filterProcessingDateFrom

	return o
}

func (o *ListPaymentsRequest) WithoutFilterProcessingDateFrom() *ListPaymentsRequest {

	o.FilterProcessingDateFrom = nil

	return o
}

func (o *ListPaymentsRequest) WithFilterProcessingDateTo(filterProcessingDateTo strfmt.Date) *ListPaymentsRequest {

	o.FilterProcessingDateTo = &filterProcessingDateTo

	return o
}

func (o *ListPaymentsRequest) WithoutFilterProcessingDateTo() *ListPaymentsRequest {

	o.FilterProcessingDateTo = nil

	return o
}

func (o *ListPaymentsRequest) WithFilterRecallID(filterRecallID strfmt.UUID) *ListPaymentsRequest {

	o.FilterRecallID = &filterRecallID

	return o
}

func (o *ListPaymentsRequest) WithoutFilterRecallID() *ListPaymentsRequest {

	o.FilterRecallID = nil

	return o
}

func (o *ListPaymentsRequest) WithFilterRecallAdmissionAdmissionDateFrom(filterRecallAdmissionAdmissionDateFrom strfmt.DateTime) *ListPaymentsRequest {

	o.FilterRecallAdmissionAdmissionDateFrom = &filterRecallAdmissionAdmissionDateFrom

	return o
}

func (o *ListPaymentsRequest) WithoutFilterRecallAdmissionAdmissionDateFrom() *ListPaymentsRequest {

	o.FilterRecallAdmissionAdmissionDateFrom = nil

	return o
}

func (o *ListPaymentsRequest) WithFilterRecallAdmissionAdmissionDateTo(filterRecallAdmissionAdmissionDateTo strfmt.DateTime) *ListPaymentsRequest {

	o.FilterRecallAdmissionAdmissionDateTo = &filterRecallAdmissionAdmissionDateTo

	return o
}

func (o *ListPaymentsRequest) WithoutFilterRecallAdmissionAdmissionDateTo() *ListPaymentsRequest {

	o.FilterRecallAdmissionAdmissionDateTo = nil

	return o
}

func (o *ListPaymentsRequest) WithFilterRecallAdmissionStatus(filterRecallAdmissionStatus string) *ListPaymentsRequest {

	o.FilterRecallAdmissionStatus = &filterRecallAdmissionStatus

	return o
}

func (o *ListPaymentsRequest) WithoutFilterRecallAdmissionStatus() *ListPaymentsRequest {

	o.FilterRecallAdmissionStatus = nil

	return o
}

func (o *ListPaymentsRequest) WithFilterRecallDecisionSubmissionStatus(filterRecallDecisionSubmissionStatus string) *ListPaymentsRequest {

	o.FilterRecallDecisionSubmissionStatus = &filterRecallDecisionSubmissionStatus

	return o
}

func (o *ListPaymentsRequest) WithoutFilterRecallDecisionSubmissionStatus() *ListPaymentsRequest {

	o.FilterRecallDecisionSubmissionStatus = nil

	return o
}

func (o *ListPaymentsRequest) WithFilterRecallDecisionSubmissionSubmissionDateFrom(filterRecallDecisionSubmissionSubmissionDateFrom strfmt.DateTime) *ListPaymentsRequest {

	o.FilterRecallDecisionSubmissionSubmissionDateFrom = &filterRecallDecisionSubmissionSubmissionDateFrom

	return o
}

func (o *ListPaymentsRequest) WithoutFilterRecallDecisionSubmissionSubmissionDateFrom() *ListPaymentsRequest {

	o.FilterRecallDecisionSubmissionSubmissionDateFrom = nil

	return o
}

func (o *ListPaymentsRequest) WithFilterRecallDecisionSubmissionSubmissionDateTo(filterRecallDecisionSubmissionSubmissionDateTo strfmt.DateTime) *ListPaymentsRequest {

	o.FilterRecallDecisionSubmissionSubmissionDateTo = &filterRecallDecisionSubmissionSubmissionDateTo

	return o
}

func (o *ListPaymentsRequest) WithoutFilterRecallDecisionSubmissionSubmissionDateTo() *ListPaymentsRequest {

	o.FilterRecallDecisionSubmissionSubmissionDateTo = nil

	return o
}

func (o *ListPaymentsRequest) WithFilterRecallSubmissionStatus(filterRecallSubmissionStatus string) *ListPaymentsRequest {

	o.FilterRecallSubmissionStatus = &filterRecallSubmissionStatus

	return o
}

func (o *ListPaymentsRequest) WithoutFilterRecallSubmissionStatus() *ListPaymentsRequest {

	o.FilterRecallSubmissionStatus = nil

	return o
}

func (o *ListPaymentsRequest) WithFilterRecallSubmissionSubmissionDateFrom(filterRecallSubmissionSubmissionDateFrom strfmt.DateTime) *ListPaymentsRequest {

	o.FilterRecallSubmissionSubmissionDateFrom = &filterRecallSubmissionSubmissionDateFrom

	return o
}

func (o *ListPaymentsRequest) WithoutFilterRecallSubmissionSubmissionDateFrom() *ListPaymentsRequest {

	o.FilterRecallSubmissionSubmissionDateFrom = nil

	return o
}

func (o *ListPaymentsRequest) WithFilterRecallSubmissionSubmissionDateTo(filterRecallSubmissionSubmissionDateTo strfmt.DateTime) *ListPaymentsRequest {

	o.FilterRecallSubmissionSubmissionDateTo = &filterRecallSubmissionSubmissionDateTo

	return o
}

func (o *ListPaymentsRequest) WithoutFilterRecallSubmissionSubmissionDateTo() *ListPaymentsRequest {

	o.FilterRecallSubmissionSubmissionDateTo = nil

	return o
}

func (o *ListPaymentsRequest) WithFilterReference(filterReference string) *ListPaymentsRequest {

	o.FilterReference = &filterReference

	return o
}

func (o *ListPaymentsRequest) WithoutFilterReference() *ListPaymentsRequest {

	o.FilterReference = nil

	return o
}

func (o *ListPaymentsRequest) WithFilterRelationships(filterRelationships []string) *ListPaymentsRequest {

	o.FilterRelationships = filterRelationships

	return o
}

func (o *ListPaymentsRequest) WithoutFilterRelationships() *ListPaymentsRequest {

	o.FilterRelationships = nil

	return o
}

func (o *ListPaymentsRequest) WithFilterReturnID(filterReturnID strfmt.UUID) *ListPaymentsRequest {

	o.FilterReturnID = &filterReturnID

	return o
}

func (o *ListPaymentsRequest) WithoutFilterReturnID() *ListPaymentsRequest {

	o.FilterReturnID = nil

	return o
}

func (o *ListPaymentsRequest) WithFilterReturnUniqueSchemeID(filterReturnUniqueSchemeID string) *ListPaymentsRequest {

	o.FilterReturnUniqueSchemeID = &filterReturnUniqueSchemeID

	return o
}

func (o *ListPaymentsRequest) WithoutFilterReturnUniqueSchemeID() *ListPaymentsRequest {

	o.FilterReturnUniqueSchemeID = nil

	return o
}

func (o *ListPaymentsRequest) WithFilterReturnAdmissionAdmissionDateFrom(filterReturnAdmissionAdmissionDateFrom strfmt.DateTime) *ListPaymentsRequest {

	o.FilterReturnAdmissionAdmissionDateFrom = &filterReturnAdmissionAdmissionDateFrom

	return o
}

func (o *ListPaymentsRequest) WithoutFilterReturnAdmissionAdmissionDateFrom() *ListPaymentsRequest {

	o.FilterReturnAdmissionAdmissionDateFrom = nil

	return o
}

func (o *ListPaymentsRequest) WithFilterReturnAdmissionAdmissionDateTo(filterReturnAdmissionAdmissionDateTo strfmt.DateTime) *ListPaymentsRequest {

	o.FilterReturnAdmissionAdmissionDateTo = &filterReturnAdmissionAdmissionDateTo

	return o
}

func (o *ListPaymentsRequest) WithoutFilterReturnAdmissionAdmissionDateTo() *ListPaymentsRequest {

	o.FilterReturnAdmissionAdmissionDateTo = nil

	return o
}

func (o *ListPaymentsRequest) WithFilterReturnAdmissionSettlementCycle(filterReturnAdmissionSettlementCycle int64) *ListPaymentsRequest {

	o.FilterReturnAdmissionSettlementCycle = &filterReturnAdmissionSettlementCycle

	return o
}

func (o *ListPaymentsRequest) WithoutFilterReturnAdmissionSettlementCycle() *ListPaymentsRequest {

	o.FilterReturnAdmissionSettlementCycle = nil

	return o
}

func (o *ListPaymentsRequest) WithFilterReturnAdmissionSettlementDate(filterReturnAdmissionSettlementDate strfmt.Date) *ListPaymentsRequest {

	o.FilterReturnAdmissionSettlementDate = &filterReturnAdmissionSettlementDate

	return o
}

func (o *ListPaymentsRequest) WithoutFilterReturnAdmissionSettlementDate() *ListPaymentsRequest {

	o.FilterReturnAdmissionSettlementDate = nil

	return o
}

func (o *ListPaymentsRequest) WithFilterReturnAdmissionStatus(filterReturnAdmissionStatus string) *ListPaymentsRequest {

	o.FilterReturnAdmissionStatus = &filterReturnAdmissionStatus

	return o
}

func (o *ListPaymentsRequest) WithoutFilterReturnAdmissionStatus() *ListPaymentsRequest {

	o.FilterReturnAdmissionStatus = nil

	return o
}

func (o *ListPaymentsRequest) WithFilterReturnSubmissionSettlementCycle(filterReturnSubmissionSettlementCycle int64) *ListPaymentsRequest {

	o.FilterReturnSubmissionSettlementCycle = &filterReturnSubmissionSettlementCycle

	return o
}

func (o *ListPaymentsRequest) WithoutFilterReturnSubmissionSettlementCycle() *ListPaymentsRequest {

	o.FilterReturnSubmissionSettlementCycle = nil

	return o
}

func (o *ListPaymentsRequest) WithFilterReturnSubmissionSettlementDate(filterReturnSubmissionSettlementDate strfmt.Date) *ListPaymentsRequest {

	o.FilterReturnSubmissionSettlementDate = &filterReturnSubmissionSettlementDate

	return o
}

func (o *ListPaymentsRequest) WithoutFilterReturnSubmissionSettlementDate() *ListPaymentsRequest {

	o.FilterReturnSubmissionSettlementDate = nil

	return o
}

func (o *ListPaymentsRequest) WithFilterReturnSubmissionStatus(filterReturnSubmissionStatus string) *ListPaymentsRequest {

	o.FilterReturnSubmissionStatus = &filterReturnSubmissionStatus

	return o
}

func (o *ListPaymentsRequest) WithoutFilterReturnSubmissionStatus() *ListPaymentsRequest {

	o.FilterReturnSubmissionStatus = nil

	return o
}

func (o *ListPaymentsRequest) WithFilterReturnSubmissionSubmissionDateFrom(filterReturnSubmissionSubmissionDateFrom strfmt.DateTime) *ListPaymentsRequest {

	o.FilterReturnSubmissionSubmissionDateFrom = &filterReturnSubmissionSubmissionDateFrom

	return o
}

func (o *ListPaymentsRequest) WithoutFilterReturnSubmissionSubmissionDateFrom() *ListPaymentsRequest {

	o.FilterReturnSubmissionSubmissionDateFrom = nil

	return o
}

func (o *ListPaymentsRequest) WithFilterReturnSubmissionSubmissionDateTo(filterReturnSubmissionSubmissionDateTo strfmt.DateTime) *ListPaymentsRequest {

	o.FilterReturnSubmissionSubmissionDateTo = &filterReturnSubmissionSubmissionDateTo

	return o
}

func (o *ListPaymentsRequest) WithoutFilterReturnSubmissionSubmissionDateTo() *ListPaymentsRequest {

	o.FilterReturnSubmissionSubmissionDateTo = nil

	return o
}

func (o *ListPaymentsRequest) WithFilterReversalID(filterReversalID strfmt.UUID) *ListPaymentsRequest {

	o.FilterReversalID = &filterReversalID

	return o
}

func (o *ListPaymentsRequest) WithoutFilterReversalID() *ListPaymentsRequest {

	o.FilterReversalID = nil

	return o
}

func (o *ListPaymentsRequest) WithFilterReversalAdmissionAdmissionDateFrom(filterReversalAdmissionAdmissionDateFrom strfmt.DateTime) *ListPaymentsRequest {

	o.FilterReversalAdmissionAdmissionDateFrom = &filterReversalAdmissionAdmissionDateFrom

	return o
}

func (o *ListPaymentsRequest) WithoutFilterReversalAdmissionAdmissionDateFrom() *ListPaymentsRequest {

	o.FilterReversalAdmissionAdmissionDateFrom = nil

	return o
}

func (o *ListPaymentsRequest) WithFilterReversalAdmissionAdmissionDateTo(filterReversalAdmissionAdmissionDateTo strfmt.DateTime) *ListPaymentsRequest {

	o.FilterReversalAdmissionAdmissionDateTo = &filterReversalAdmissionAdmissionDateTo

	return o
}

func (o *ListPaymentsRequest) WithoutFilterReversalAdmissionAdmissionDateTo() *ListPaymentsRequest {

	o.FilterReversalAdmissionAdmissionDateTo = nil

	return o
}

func (o *ListPaymentsRequest) WithFilterReversalAdmissionStatus(filterReversalAdmissionStatus string) *ListPaymentsRequest {

	o.FilterReversalAdmissionStatus = &filterReversalAdmissionStatus

	return o
}

func (o *ListPaymentsRequest) WithoutFilterReversalAdmissionStatus() *ListPaymentsRequest {

	o.FilterReversalAdmissionStatus = nil

	return o
}

func (o *ListPaymentsRequest) WithFilterReversalSubmissionStatus(filterReversalSubmissionStatus string) *ListPaymentsRequest {

	o.FilterReversalSubmissionStatus = &filterReversalSubmissionStatus

	return o
}

func (o *ListPaymentsRequest) WithoutFilterReversalSubmissionStatus() *ListPaymentsRequest {

	o.FilterReversalSubmissionStatus = nil

	return o
}

func (o *ListPaymentsRequest) WithFilterReversalSubmissionSubmissionDateFrom(filterReversalSubmissionSubmissionDateFrom strfmt.DateTime) *ListPaymentsRequest {

	o.FilterReversalSubmissionSubmissionDateFrom = &filterReversalSubmissionSubmissionDateFrom

	return o
}

func (o *ListPaymentsRequest) WithoutFilterReversalSubmissionSubmissionDateFrom() *ListPaymentsRequest {

	o.FilterReversalSubmissionSubmissionDateFrom = nil

	return o
}

func (o *ListPaymentsRequest) WithFilterReversalSubmissionSubmissionDateTo(filterReversalSubmissionSubmissionDateTo strfmt.DateTime) *ListPaymentsRequest {

	o.FilterReversalSubmissionSubmissionDateTo = &filterReversalSubmissionSubmissionDateTo

	return o
}

func (o *ListPaymentsRequest) WithoutFilterReversalSubmissionSubmissionDateTo() *ListPaymentsRequest {

	o.FilterReversalSubmissionSubmissionDateTo = nil

	return o
}

func (o *ListPaymentsRequest) WithFilterRoute(filterRoute string) *ListPaymentsRequest {

	o.FilterRoute = &filterRoute

	return o
}

func (o *ListPaymentsRequest) WithoutFilterRoute() *ListPaymentsRequest {

	o.FilterRoute = nil

	return o
}

func (o *ListPaymentsRequest) WithFilterSchemeTransactionID(filterSchemeTransactionID string) *ListPaymentsRequest {

	o.FilterSchemeTransactionID = &filterSchemeTransactionID

	return o
}

func (o *ListPaymentsRequest) WithoutFilterSchemeTransactionID() *ListPaymentsRequest {

	o.FilterSchemeTransactionID = nil

	return o
}

func (o *ListPaymentsRequest) WithFilterSubmissionID(filterSubmissionID strfmt.UUID) *ListPaymentsRequest {

	o.FilterSubmissionID = &filterSubmissionID

	return o
}

func (o *ListPaymentsRequest) WithoutFilterSubmissionID() *ListPaymentsRequest {

	o.FilterSubmissionID = nil

	return o
}

func (o *ListPaymentsRequest) WithFilterSubmissionSchemeStatusCode(filterSubmissionSchemeStatusCode string) *ListPaymentsRequest {

	o.FilterSubmissionSchemeStatusCode = &filterSubmissionSchemeStatusCode

	return o
}

func (o *ListPaymentsRequest) WithoutFilterSubmissionSchemeStatusCode() *ListPaymentsRequest {

	o.FilterSubmissionSchemeStatusCode = nil

	return o
}

func (o *ListPaymentsRequest) WithFilterSubmissionSettlementCycle(filterSubmissionSettlementCycle int64) *ListPaymentsRequest {

	o.FilterSubmissionSettlementCycle = &filterSubmissionSettlementCycle

	return o
}

func (o *ListPaymentsRequest) WithoutFilterSubmissionSettlementCycle() *ListPaymentsRequest {

	o.FilterSubmissionSettlementCycle = nil

	return o
}

func (o *ListPaymentsRequest) WithFilterSubmissionSettlementDate(filterSubmissionSettlementDate strfmt.Date) *ListPaymentsRequest {

	o.FilterSubmissionSettlementDate = &filterSubmissionSettlementDate

	return o
}

func (o *ListPaymentsRequest) WithoutFilterSubmissionSettlementDate() *ListPaymentsRequest {

	o.FilterSubmissionSettlementDate = nil

	return o
}

func (o *ListPaymentsRequest) WithFilterSubmissionStatus(filterSubmissionStatus string) *ListPaymentsRequest {

	o.FilterSubmissionStatus = &filterSubmissionStatus

	return o
}

func (o *ListPaymentsRequest) WithoutFilterSubmissionStatus() *ListPaymentsRequest {

	o.FilterSubmissionStatus = nil

	return o
}

func (o *ListPaymentsRequest) WithFilterSubmissionSubmissionDateFrom(filterSubmissionSubmissionDateFrom strfmt.DateTime) *ListPaymentsRequest {

	o.FilterSubmissionSubmissionDateFrom = &filterSubmissionSubmissionDateFrom

	return o
}

func (o *ListPaymentsRequest) WithoutFilterSubmissionSubmissionDateFrom() *ListPaymentsRequest {

	o.FilterSubmissionSubmissionDateFrom = nil

	return o
}

func (o *ListPaymentsRequest) WithFilterSubmissionSubmissionDateTo(filterSubmissionSubmissionDateTo strfmt.DateTime) *ListPaymentsRequest {

	o.FilterSubmissionSubmissionDateTo = &filterSubmissionSubmissionDateTo

	return o
}

func (o *ListPaymentsRequest) WithoutFilterSubmissionSubmissionDateTo() *ListPaymentsRequest {

	o.FilterSubmissionSubmissionDateTo = nil

	return o
}

func (o *ListPaymentsRequest) WithFilterUniqueSchemeID(filterUniqueSchemeID string) *ListPaymentsRequest {

	o.FilterUniqueSchemeID = &filterUniqueSchemeID

	return o
}

func (o *ListPaymentsRequest) WithoutFilterUniqueSchemeID() *ListPaymentsRequest {

	o.FilterUniqueSchemeID = nil

	return o
}

func (o *ListPaymentsRequest) WithPageAfter(pageAfter string) *ListPaymentsRequest {

	o.PageAfter = &pageAfter

	return o
}

func (o *ListPaymentsRequest) WithoutPageAfter() *ListPaymentsRequest {

	o.PageAfter = nil

	return o
}

func (o *ListPaymentsRequest) WithPageBefore(pageBefore string) *ListPaymentsRequest {

	o.PageBefore = &pageBefore

	return o
}

func (o *ListPaymentsRequest) WithoutPageBefore() *ListPaymentsRequest {

	o.PageBefore = nil

	return o
}

func (o *ListPaymentsRequest) WithPageNumber(pageNumber string) *ListPaymentsRequest {

	o.PageNumber = &pageNumber

	return o
}

func (o *ListPaymentsRequest) WithoutPageNumber() *ListPaymentsRequest {

	o.PageNumber = nil

	return o
}

func (o *ListPaymentsRequest) WithPageSize(pageSize int64) *ListPaymentsRequest {

	o.PageSize = &pageSize

	return o
}

func (o *ListPaymentsRequest) WithoutPageSize() *ListPaymentsRequest {

	o.PageSize = nil

	return o
}

// ////////////////
// WithContext adds the context to the list payments Request
func (o *ListPaymentsRequest) WithContext(ctx context.Context) *ListPaymentsRequest {
	o.Context = ctx
	return o
}

// WithHTTPClient adds the HTTPClient to the list payments Request
func (o *ListPaymentsRequest) WithHTTPClient(client *http.Client) *ListPaymentsRequest {
	o.HTTPClient = client
	return o
}

// WriteToRequest writes these Request to a swagger request
func (o *ListPaymentsRequest) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.FilterAdmissionAdmissionDateFrom != nil {

		// query param filter[admission.admission_date_from]
		var qrFilterAdmissionAdmissionDateFrom strfmt.DateTime
		if o.FilterAdmissionAdmissionDateFrom != nil {
			qrFilterAdmissionAdmissionDateFrom = *o.FilterAdmissionAdmissionDateFrom
		}
		qFilterAdmissionAdmissionDateFrom := qrFilterAdmissionAdmissionDateFrom.String()
		if qFilterAdmissionAdmissionDateFrom != "" {
			if err := r.SetQueryParam("filter[admission.admission_date_from]", qFilterAdmissionAdmissionDateFrom); err != nil {
				return err
			}
		}

	}

	if o.FilterAdmissionAdmissionDateTo != nil {

		// query param filter[admission.admission_date_to]
		var qrFilterAdmissionAdmissionDateTo strfmt.DateTime
		if o.FilterAdmissionAdmissionDateTo != nil {
			qrFilterAdmissionAdmissionDateTo = *o.FilterAdmissionAdmissionDateTo
		}
		qFilterAdmissionAdmissionDateTo := qrFilterAdmissionAdmissionDateTo.String()
		if qFilterAdmissionAdmissionDateTo != "" {
			if err := r.SetQueryParam("filter[admission.admission_date_to]", qFilterAdmissionAdmissionDateTo); err != nil {
				return err
			}
		}

	}

	if o.FilterAdmissionID != nil {

		// query param filter[admission.id]
		var qrFilterAdmissionID strfmt.UUID
		if o.FilterAdmissionID != nil {
			qrFilterAdmissionID = *o.FilterAdmissionID
		}
		qFilterAdmissionID := qrFilterAdmissionID.String()
		if qFilterAdmissionID != "" {
			if err := r.SetQueryParam("filter[admission.id]", qFilterAdmissionID); err != nil {
				return err
			}
		}

	}

	if o.FilterAdmissionSchemeStatusCode != nil {

		// query param filter[admission.scheme_status_code]
		var qrFilterAdmissionSchemeStatusCode string
		if o.FilterAdmissionSchemeStatusCode != nil {
			qrFilterAdmissionSchemeStatusCode = *o.FilterAdmissionSchemeStatusCode
		}
		qFilterAdmissionSchemeStatusCode := qrFilterAdmissionSchemeStatusCode
		if qFilterAdmissionSchemeStatusCode != "" {
			if err := r.SetQueryParam("filter[admission.scheme_status_code]", qFilterAdmissionSchemeStatusCode); err != nil {
				return err
			}
		}

	}

	if o.FilterAdmissionSettlementCycle != nil {

		// query param filter[admission.settlement_cycle]
		var qrFilterAdmissionSettlementCycle int64
		if o.FilterAdmissionSettlementCycle != nil {
			qrFilterAdmissionSettlementCycle = *o.FilterAdmissionSettlementCycle
		}
		qFilterAdmissionSettlementCycle := swag.FormatInt64(qrFilterAdmissionSettlementCycle)
		if qFilterAdmissionSettlementCycle != "" {
			if err := r.SetQueryParam("filter[admission.settlement_cycle]", qFilterAdmissionSettlementCycle); err != nil {
				return err
			}
		}

	}

	if o.FilterAdmissionSettlementDate != nil {

		// query param filter[admission.settlement_date]
		var qrFilterAdmissionSettlementDate strfmt.Date
		if o.FilterAdmissionSettlementDate != nil {
			qrFilterAdmissionSettlementDate = *o.FilterAdmissionSettlementDate
		}
		qFilterAdmissionSettlementDate := qrFilterAdmissionSettlementDate.String()
		if qFilterAdmissionSettlementDate != "" {
			if err := r.SetQueryParam("filter[admission.settlement_date]", qFilterAdmissionSettlementDate); err != nil {
				return err
			}
		}

	}

	if o.FilterAdmissionStatus != nil {

		// query param filter[admission.status]
		var qrFilterAdmissionStatus string
		if o.FilterAdmissionStatus != nil {
			qrFilterAdmissionStatus = *o.FilterAdmissionStatus
		}
		qFilterAdmissionStatus := qrFilterAdmissionStatus
		if qFilterAdmissionStatus != "" {
			if err := r.SetQueryParam("filter[admission.status]", qFilterAdmissionStatus); err != nil {
				return err
			}
		}

	}

	if o.FilterAmount != nil {

		// query param filter[amount]
		var qrFilterAmount string
		if o.FilterAmount != nil {
			qrFilterAmount = *o.FilterAmount
		}
		qFilterAmount := qrFilterAmount
		if qFilterAmount != "" {
			if err := r.SetQueryParam("filter[amount]", qFilterAmount); err != nil {
				return err
			}
		}

	}

	if o.FilterAmountFrom != nil {

		// query param filter[amount][from]
		var qrFilterAmountFrom float64
		if o.FilterAmountFrom != nil {
			qrFilterAmountFrom = *o.FilterAmountFrom
		}
		qFilterAmountFrom := swag.FormatFloat64(qrFilterAmountFrom)
		if qFilterAmountFrom != "" {
			if err := r.SetQueryParam("filter[amount][from]", qFilterAmountFrom); err != nil {
				return err
			}
		}

	}

	if o.FilterAmountTo != nil {

		// query param filter[amount][to]
		var qrFilterAmountTo float64
		if o.FilterAmountTo != nil {
			qrFilterAmountTo = *o.FilterAmountTo
		}
		qFilterAmountTo := swag.FormatFloat64(qrFilterAmountTo)
		if qFilterAmountTo != "" {
			if err := r.SetQueryParam("filter[amount][to]", qFilterAmountTo); err != nil {
				return err
			}
		}

	}

	if o.FilterBeneficiaryPartyAccountName != nil {

		// query param filter[beneficiary_party.account_name]
		var qrFilterBeneficiaryPartyAccountName string
		if o.FilterBeneficiaryPartyAccountName != nil {
			qrFilterBeneficiaryPartyAccountName = *o.FilterBeneficiaryPartyAccountName
		}
		qFilterBeneficiaryPartyAccountName := qrFilterBeneficiaryPartyAccountName
		if qFilterBeneficiaryPartyAccountName != "" {
			if err := r.SetQueryParam("filter[beneficiary_party.account_name]", qFilterBeneficiaryPartyAccountName); err != nil {
				return err
			}
		}

	}

	if o.FilterBeneficiaryPartyAccountNumber != nil {

		// query param filter[beneficiary_party.account_number]
		var qrFilterBeneficiaryPartyAccountNumber string
		if o.FilterBeneficiaryPartyAccountNumber != nil {
			qrFilterBeneficiaryPartyAccountNumber = *o.FilterBeneficiaryPartyAccountNumber
		}
		qFilterBeneficiaryPartyAccountNumber := qrFilterBeneficiaryPartyAccountNumber
		if qFilterBeneficiaryPartyAccountNumber != "" {
			if err := r.SetQueryParam("filter[beneficiary_party.account_number]", qFilterBeneficiaryPartyAccountNumber); err != nil {
				return err
			}
		}

	}

	if o.FilterBeneficiaryPartyBankID != nil {

		// query param filter[beneficiary_party.bank_id]
		var qrFilterBeneficiaryPartyBankID string
		if o.FilterBeneficiaryPartyBankID != nil {
			qrFilterBeneficiaryPartyBankID = *o.FilterBeneficiaryPartyBankID
		}
		qFilterBeneficiaryPartyBankID := qrFilterBeneficiaryPartyBankID
		if qFilterBeneficiaryPartyBankID != "" {
			if err := r.SetQueryParam("filter[beneficiary_party.bank_id]", qFilterBeneficiaryPartyBankID); err != nil {
				return err
			}
		}

	}

	if o.FilterCreatedDateFrom != nil {

		// query param filter[created_date_from]
		var qrFilterCreatedDateFrom strfmt.Date
		if o.FilterCreatedDateFrom != nil {
			qrFilterCreatedDateFrom = *o.FilterCreatedDateFrom
		}
		qFilterCreatedDateFrom := qrFilterCreatedDateFrom.String()
		if qFilterCreatedDateFrom != "" {
			if err := r.SetQueryParam("filter[created_date_from]", qFilterCreatedDateFrom); err != nil {
				return err
			}
		}

	}

	if o.FilterCreatedDateTo != nil {

		// query param filter[created_date_to]
		var qrFilterCreatedDateTo strfmt.Date
		if o.FilterCreatedDateTo != nil {
			qrFilterCreatedDateTo = *o.FilterCreatedDateTo
		}
		qFilterCreatedDateTo := qrFilterCreatedDateTo.String()
		if qFilterCreatedDateTo != "" {
			if err := r.SetQueryParam("filter[created_date_to]", qFilterCreatedDateTo); err != nil {
				return err
			}
		}

	}

	if o.FilterCurrency != nil {

		// query param filter[currency]
		var qrFilterCurrency string
		if o.FilterCurrency != nil {
			qrFilterCurrency = *o.FilterCurrency
		}
		qFilterCurrency := qrFilterCurrency
		if qFilterCurrency != "" {
			if err := r.SetQueryParam("filter[currency]", qFilterCurrency); err != nil {
				return err
			}
		}

	}

	if o.FilterDebtorPartyAccountName != nil {

		// query param filter[debtor_party.account_name]
		var qrFilterDebtorPartyAccountName string
		if o.FilterDebtorPartyAccountName != nil {
			qrFilterDebtorPartyAccountName = *o.FilterDebtorPartyAccountName
		}
		qFilterDebtorPartyAccountName := qrFilterDebtorPartyAccountName
		if qFilterDebtorPartyAccountName != "" {
			if err := r.SetQueryParam("filter[debtor_party.account_name]", qFilterDebtorPartyAccountName); err != nil {
				return err
			}
		}

	}

	if o.FilterDebtorPartyAccountNumber != nil {

		// query param filter[debtor_party.account_number]
		var qrFilterDebtorPartyAccountNumber string
		if o.FilterDebtorPartyAccountNumber != nil {
			qrFilterDebtorPartyAccountNumber = *o.FilterDebtorPartyAccountNumber
		}
		qFilterDebtorPartyAccountNumber := qrFilterDebtorPartyAccountNumber
		if qFilterDebtorPartyAccountNumber != "" {
			if err := r.SetQueryParam("filter[debtor_party.account_number]", qFilterDebtorPartyAccountNumber); err != nil {
				return err
			}
		}

	}

	if o.FilterDebtorPartyBankID != nil {

		// query param filter[debtor_party.bank_id]
		var qrFilterDebtorPartyBankID string
		if o.FilterDebtorPartyBankID != nil {
			qrFilterDebtorPartyBankID = *o.FilterDebtorPartyBankID
		}
		qFilterDebtorPartyBankID := qrFilterDebtorPartyBankID
		if qFilterDebtorPartyBankID != "" {
			if err := r.SetQueryParam("filter[debtor_party.bank_id]", qFilterDebtorPartyBankID); err != nil {
				return err
			}
		}

	}

	if o.FilterEndToEndReference != nil {

		// query param filter[end_to_end_reference]
		var qrFilterEndToEndReference string
		if o.FilterEndToEndReference != nil {
			qrFilterEndToEndReference = *o.FilterEndToEndReference
		}
		qFilterEndToEndReference := qrFilterEndToEndReference
		if qFilterEndToEndReference != "" {
			if err := r.SetQueryParam("filter[end_to_end_reference]", qFilterEndToEndReference); err != nil {
				return err
			}
		}

	}

	valuesFilterNotRelationships := o.FilterNotRelationships

	joinedFilterNotRelationships := swag.JoinByFormat(valuesFilterNotRelationships, "csv")
	// query array param filter[not_relationships]
	if err := r.SetQueryParam("filter[not_relationships]", joinedFilterNotRelationships...); err != nil {
		return err
	}

	var valuesFilterOrganisationID []string
	for _, v := range o.FilterOrganisationID {
		valuesFilterOrganisationID = append(valuesFilterOrganisationID, v.String())
	}

	joinedFilterOrganisationID := swag.JoinByFormat(valuesFilterOrganisationID, "")
	// query array param filter[organisation_id]
	if err := r.SetQueryParam("filter[organisation_id]", joinedFilterOrganisationID...); err != nil {
		return err
	}

	if o.FilterPaymentScheme != nil {

		// query param filter[payment_scheme]
		var qrFilterPaymentScheme string
		if o.FilterPaymentScheme != nil {
			qrFilterPaymentScheme = *o.FilterPaymentScheme
		}
		qFilterPaymentScheme := qrFilterPaymentScheme
		if qFilterPaymentScheme != "" {
			if err := r.SetQueryParam("filter[payment_scheme]", qFilterPaymentScheme); err != nil {
				return err
			}
		}

	}

	if o.FilterPaymentType != nil {

		// query param filter[payment_type]
		var qrFilterPaymentType string
		if o.FilterPaymentType != nil {
			qrFilterPaymentType = *o.FilterPaymentType
		}
		qFilterPaymentType := qrFilterPaymentType
		if qFilterPaymentType != "" {
			if err := r.SetQueryParam("filter[payment_type]", qFilterPaymentType); err != nil {
				return err
			}
		}

	}

	if o.FilterProcessingDateFrom != nil {

		// query param filter[processing_date_from]
		var qrFilterProcessingDateFrom strfmt.Date
		if o.FilterProcessingDateFrom != nil {
			qrFilterProcessingDateFrom = *o.FilterProcessingDateFrom
		}
		qFilterProcessingDateFrom := qrFilterProcessingDateFrom.String()
		if qFilterProcessingDateFrom != "" {
			if err := r.SetQueryParam("filter[processing_date_from]", qFilterProcessingDateFrom); err != nil {
				return err
			}
		}

	}

	if o.FilterProcessingDateTo != nil {

		// query param filter[processing_date_to]
		var qrFilterProcessingDateTo strfmt.Date
		if o.FilterProcessingDateTo != nil {
			qrFilterProcessingDateTo = *o.FilterProcessingDateTo
		}
		qFilterProcessingDateTo := qrFilterProcessingDateTo.String()
		if qFilterProcessingDateTo != "" {
			if err := r.SetQueryParam("filter[processing_date_to]", qFilterProcessingDateTo); err != nil {
				return err
			}
		}

	}

	if o.FilterRecallID != nil {

		// query param filter[recall.id]
		var qrFilterRecallID strfmt.UUID
		if o.FilterRecallID != nil {
			qrFilterRecallID = *o.FilterRecallID
		}
		qFilterRecallID := qrFilterRecallID.String()
		if qFilterRecallID != "" {
			if err := r.SetQueryParam("filter[recall.id]", qFilterRecallID); err != nil {
				return err
			}
		}

	}

	if o.FilterRecallAdmissionAdmissionDateFrom != nil {

		// query param filter[recall_admission.admission_date_from]
		var qrFilterRecallAdmissionAdmissionDateFrom strfmt.DateTime
		if o.FilterRecallAdmissionAdmissionDateFrom != nil {
			qrFilterRecallAdmissionAdmissionDateFrom = *o.FilterRecallAdmissionAdmissionDateFrom
		}
		qFilterRecallAdmissionAdmissionDateFrom := qrFilterRecallAdmissionAdmissionDateFrom.String()
		if qFilterRecallAdmissionAdmissionDateFrom != "" {
			if err := r.SetQueryParam("filter[recall_admission.admission_date_from]", qFilterRecallAdmissionAdmissionDateFrom); err != nil {
				return err
			}
		}

	}

	if o.FilterRecallAdmissionAdmissionDateTo != nil {

		// query param filter[recall_admission.admission_date_to]
		var qrFilterRecallAdmissionAdmissionDateTo strfmt.DateTime
		if o.FilterRecallAdmissionAdmissionDateTo != nil {
			qrFilterRecallAdmissionAdmissionDateTo = *o.FilterRecallAdmissionAdmissionDateTo
		}
		qFilterRecallAdmissionAdmissionDateTo := qrFilterRecallAdmissionAdmissionDateTo.String()
		if qFilterRecallAdmissionAdmissionDateTo != "" {
			if err := r.SetQueryParam("filter[recall_admission.admission_date_to]", qFilterRecallAdmissionAdmissionDateTo); err != nil {
				return err
			}
		}

	}

	if o.FilterRecallAdmissionStatus != nil {

		// query param filter[recall_admission.status]
		var qrFilterRecallAdmissionStatus string
		if o.FilterRecallAdmissionStatus != nil {
			qrFilterRecallAdmissionStatus = *o.FilterRecallAdmissionStatus
		}
		qFilterRecallAdmissionStatus := qrFilterRecallAdmissionStatus
		if qFilterRecallAdmissionStatus != "" {
			if err := r.SetQueryParam("filter[recall_admission.status]", qFilterRecallAdmissionStatus); err != nil {
				return err
			}
		}

	}

	if o.FilterRecallDecisionSubmissionStatus != nil {

		// query param filter[recall_decision_submission.status]
		var qrFilterRecallDecisionSubmissionStatus string
		if o.FilterRecallDecisionSubmissionStatus != nil {
			qrFilterRecallDecisionSubmissionStatus = *o.FilterRecallDecisionSubmissionStatus
		}
		qFilterRecallDecisionSubmissionStatus := qrFilterRecallDecisionSubmissionStatus
		if qFilterRecallDecisionSubmissionStatus != "" {
			if err := r.SetQueryParam("filter[recall_decision_submission.status]", qFilterRecallDecisionSubmissionStatus); err != nil {
				return err
			}
		}

	}

	if o.FilterRecallDecisionSubmissionSubmissionDateFrom != nil {

		// query param filter[recall_decision_submission.submission_date_from]
		var qrFilterRecallDecisionSubmissionSubmissionDateFrom strfmt.DateTime
		if o.FilterRecallDecisionSubmissionSubmissionDateFrom != nil {
			qrFilterRecallDecisionSubmissionSubmissionDateFrom = *o.FilterRecallDecisionSubmissionSubmissionDateFrom
		}
		qFilterRecallDecisionSubmissionSubmissionDateFrom := qrFilterRecallDecisionSubmissionSubmissionDateFrom.String()
		if qFilterRecallDecisionSubmissionSubmissionDateFrom != "" {
			if err := r.SetQueryParam("filter[recall_decision_submission.submission_date_from]", qFilterRecallDecisionSubmissionSubmissionDateFrom); err != nil {
				return err
			}
		}

	}

	if o.FilterRecallDecisionSubmissionSubmissionDateTo != nil {

		// query param filter[recall_decision_submission.submission_date_to]
		var qrFilterRecallDecisionSubmissionSubmissionDateTo strfmt.DateTime
		if o.FilterRecallDecisionSubmissionSubmissionDateTo != nil {
			qrFilterRecallDecisionSubmissionSubmissionDateTo = *o.FilterRecallDecisionSubmissionSubmissionDateTo
		}
		qFilterRecallDecisionSubmissionSubmissionDateTo := qrFilterRecallDecisionSubmissionSubmissionDateTo.String()
		if qFilterRecallDecisionSubmissionSubmissionDateTo != "" {
			if err := r.SetQueryParam("filter[recall_decision_submission.submission_date_to]", qFilterRecallDecisionSubmissionSubmissionDateTo); err != nil {
				return err
			}
		}

	}

	if o.FilterRecallSubmissionStatus != nil {

		// query param filter[recall_submission.status]
		var qrFilterRecallSubmissionStatus string
		if o.FilterRecallSubmissionStatus != nil {
			qrFilterRecallSubmissionStatus = *o.FilterRecallSubmissionStatus
		}
		qFilterRecallSubmissionStatus := qrFilterRecallSubmissionStatus
		if qFilterRecallSubmissionStatus != "" {
			if err := r.SetQueryParam("filter[recall_submission.status]", qFilterRecallSubmissionStatus); err != nil {
				return err
			}
		}

	}

	if o.FilterRecallSubmissionSubmissionDateFrom != nil {

		// query param filter[recall_submission.submission_date_from]
		var qrFilterRecallSubmissionSubmissionDateFrom strfmt.DateTime
		if o.FilterRecallSubmissionSubmissionDateFrom != nil {
			qrFilterRecallSubmissionSubmissionDateFrom = *o.FilterRecallSubmissionSubmissionDateFrom
		}
		qFilterRecallSubmissionSubmissionDateFrom := qrFilterRecallSubmissionSubmissionDateFrom.String()
		if qFilterRecallSubmissionSubmissionDateFrom != "" {
			if err := r.SetQueryParam("filter[recall_submission.submission_date_from]", qFilterRecallSubmissionSubmissionDateFrom); err != nil {
				return err
			}
		}

	}

	if o.FilterRecallSubmissionSubmissionDateTo != nil {

		// query param filter[recall_submission.submission_date_to]
		var qrFilterRecallSubmissionSubmissionDateTo strfmt.DateTime
		if o.FilterRecallSubmissionSubmissionDateTo != nil {
			qrFilterRecallSubmissionSubmissionDateTo = *o.FilterRecallSubmissionSubmissionDateTo
		}
		qFilterRecallSubmissionSubmissionDateTo := qrFilterRecallSubmissionSubmissionDateTo.String()
		if qFilterRecallSubmissionSubmissionDateTo != "" {
			if err := r.SetQueryParam("filter[recall_submission.submission_date_to]", qFilterRecallSubmissionSubmissionDateTo); err != nil {
				return err
			}
		}

	}

	if o.FilterReference != nil {

		// query param filter[reference]
		var qrFilterReference string
		if o.FilterReference != nil {
			qrFilterReference = *o.FilterReference
		}
		qFilterReference := qrFilterReference
		if qFilterReference != "" {
			if err := r.SetQueryParam("filter[reference]", qFilterReference); err != nil {
				return err
			}
		}

	}

	valuesFilterRelationships := o.FilterRelationships

	joinedFilterRelationships := swag.JoinByFormat(valuesFilterRelationships, "")
	// query array param filter[relationships]
	if err := r.SetQueryParam("filter[relationships]", joinedFilterRelationships...); err != nil {
		return err
	}

	if o.FilterReturnID != nil {

		// query param filter[return.id]
		var qrFilterReturnID strfmt.UUID
		if o.FilterReturnID != nil {
			qrFilterReturnID = *o.FilterReturnID
		}
		qFilterReturnID := qrFilterReturnID.String()
		if qFilterReturnID != "" {
			if err := r.SetQueryParam("filter[return.id]", qFilterReturnID); err != nil {
				return err
			}
		}

	}

	if o.FilterReturnUniqueSchemeID != nil {

		// query param filter[return.unique_scheme_id]
		var qrFilterReturnUniqueSchemeID string
		if o.FilterReturnUniqueSchemeID != nil {
			qrFilterReturnUniqueSchemeID = *o.FilterReturnUniqueSchemeID
		}
		qFilterReturnUniqueSchemeID := qrFilterReturnUniqueSchemeID
		if qFilterReturnUniqueSchemeID != "" {
			if err := r.SetQueryParam("filter[return.unique_scheme_id]", qFilterReturnUniqueSchemeID); err != nil {
				return err
			}
		}

	}

	if o.FilterReturnAdmissionAdmissionDateFrom != nil {

		// query param filter[return_admission.admission_date_from]
		var qrFilterReturnAdmissionAdmissionDateFrom strfmt.DateTime
		if o.FilterReturnAdmissionAdmissionDateFrom != nil {
			qrFilterReturnAdmissionAdmissionDateFrom = *o.FilterReturnAdmissionAdmissionDateFrom
		}
		qFilterReturnAdmissionAdmissionDateFrom := qrFilterReturnAdmissionAdmissionDateFrom.String()
		if qFilterReturnAdmissionAdmissionDateFrom != "" {
			if err := r.SetQueryParam("filter[return_admission.admission_date_from]", qFilterReturnAdmissionAdmissionDateFrom); err != nil {
				return err
			}
		}

	}

	if o.FilterReturnAdmissionAdmissionDateTo != nil {

		// query param filter[return_admission.admission_date_to]
		var qrFilterReturnAdmissionAdmissionDateTo strfmt.DateTime
		if o.FilterReturnAdmissionAdmissionDateTo != nil {
			qrFilterReturnAdmissionAdmissionDateTo = *o.FilterReturnAdmissionAdmissionDateTo
		}
		qFilterReturnAdmissionAdmissionDateTo := qrFilterReturnAdmissionAdmissionDateTo.String()
		if qFilterReturnAdmissionAdmissionDateTo != "" {
			if err := r.SetQueryParam("filter[return_admission.admission_date_to]", qFilterReturnAdmissionAdmissionDateTo); err != nil {
				return err
			}
		}

	}

	if o.FilterReturnAdmissionSettlementCycle != nil {

		// query param filter[return_admission.settlement_cycle]
		var qrFilterReturnAdmissionSettlementCycle int64
		if o.FilterReturnAdmissionSettlementCycle != nil {
			qrFilterReturnAdmissionSettlementCycle = *o.FilterReturnAdmissionSettlementCycle
		}
		qFilterReturnAdmissionSettlementCycle := swag.FormatInt64(qrFilterReturnAdmissionSettlementCycle)
		if qFilterReturnAdmissionSettlementCycle != "" {
			if err := r.SetQueryParam("filter[return_admission.settlement_cycle]", qFilterReturnAdmissionSettlementCycle); err != nil {
				return err
			}
		}

	}

	if o.FilterReturnAdmissionSettlementDate != nil {

		// query param filter[return_admission.settlement_date]
		var qrFilterReturnAdmissionSettlementDate strfmt.Date
		if o.FilterReturnAdmissionSettlementDate != nil {
			qrFilterReturnAdmissionSettlementDate = *o.FilterReturnAdmissionSettlementDate
		}
		qFilterReturnAdmissionSettlementDate := qrFilterReturnAdmissionSettlementDate.String()
		if qFilterReturnAdmissionSettlementDate != "" {
			if err := r.SetQueryParam("filter[return_admission.settlement_date]", qFilterReturnAdmissionSettlementDate); err != nil {
				return err
			}
		}

	}

	if o.FilterReturnAdmissionStatus != nil {

		// query param filter[return_admission.status]
		var qrFilterReturnAdmissionStatus string
		if o.FilterReturnAdmissionStatus != nil {
			qrFilterReturnAdmissionStatus = *o.FilterReturnAdmissionStatus
		}
		qFilterReturnAdmissionStatus := qrFilterReturnAdmissionStatus
		if qFilterReturnAdmissionStatus != "" {
			if err := r.SetQueryParam("filter[return_admission.status]", qFilterReturnAdmissionStatus); err != nil {
				return err
			}
		}

	}

	if o.FilterReturnSubmissionSettlementCycle != nil {

		// query param filter[return_submission.settlement_cycle]
		var qrFilterReturnSubmissionSettlementCycle int64
		if o.FilterReturnSubmissionSettlementCycle != nil {
			qrFilterReturnSubmissionSettlementCycle = *o.FilterReturnSubmissionSettlementCycle
		}
		qFilterReturnSubmissionSettlementCycle := swag.FormatInt64(qrFilterReturnSubmissionSettlementCycle)
		if qFilterReturnSubmissionSettlementCycle != "" {
			if err := r.SetQueryParam("filter[return_submission.settlement_cycle]", qFilterReturnSubmissionSettlementCycle); err != nil {
				return err
			}
		}

	}

	if o.FilterReturnSubmissionSettlementDate != nil {

		// query param filter[return_submission.settlement_date]
		var qrFilterReturnSubmissionSettlementDate strfmt.Date
		if o.FilterReturnSubmissionSettlementDate != nil {
			qrFilterReturnSubmissionSettlementDate = *o.FilterReturnSubmissionSettlementDate
		}
		qFilterReturnSubmissionSettlementDate := qrFilterReturnSubmissionSettlementDate.String()
		if qFilterReturnSubmissionSettlementDate != "" {
			if err := r.SetQueryParam("filter[return_submission.settlement_date]", qFilterReturnSubmissionSettlementDate); err != nil {
				return err
			}
		}

	}

	if o.FilterReturnSubmissionStatus != nil {

		// query param filter[return_submission.status]
		var qrFilterReturnSubmissionStatus string
		if o.FilterReturnSubmissionStatus != nil {
			qrFilterReturnSubmissionStatus = *o.FilterReturnSubmissionStatus
		}
		qFilterReturnSubmissionStatus := qrFilterReturnSubmissionStatus
		if qFilterReturnSubmissionStatus != "" {
			if err := r.SetQueryParam("filter[return_submission.status]", qFilterReturnSubmissionStatus); err != nil {
				return err
			}
		}

	}

	if o.FilterReturnSubmissionSubmissionDateFrom != nil {

		// query param filter[return_submission.submission_date_from]
		var qrFilterReturnSubmissionSubmissionDateFrom strfmt.DateTime
		if o.FilterReturnSubmissionSubmissionDateFrom != nil {
			qrFilterReturnSubmissionSubmissionDateFrom = *o.FilterReturnSubmissionSubmissionDateFrom
		}
		qFilterReturnSubmissionSubmissionDateFrom := qrFilterReturnSubmissionSubmissionDateFrom.String()
		if qFilterReturnSubmissionSubmissionDateFrom != "" {
			if err := r.SetQueryParam("filter[return_submission.submission_date_from]", qFilterReturnSubmissionSubmissionDateFrom); err != nil {
				return err
			}
		}

	}

	if o.FilterReturnSubmissionSubmissionDateTo != nil {

		// query param filter[return_submission.submission_date_to]
		var qrFilterReturnSubmissionSubmissionDateTo strfmt.DateTime
		if o.FilterReturnSubmissionSubmissionDateTo != nil {
			qrFilterReturnSubmissionSubmissionDateTo = *o.FilterReturnSubmissionSubmissionDateTo
		}
		qFilterReturnSubmissionSubmissionDateTo := qrFilterReturnSubmissionSubmissionDateTo.String()
		if qFilterReturnSubmissionSubmissionDateTo != "" {
			if err := r.SetQueryParam("filter[return_submission.submission_date_to]", qFilterReturnSubmissionSubmissionDateTo); err != nil {
				return err
			}
		}

	}

	if o.FilterReversalID != nil {

		// query param filter[reversal.id]
		var qrFilterReversalID strfmt.UUID
		if o.FilterReversalID != nil {
			qrFilterReversalID = *o.FilterReversalID
		}
		qFilterReversalID := qrFilterReversalID.String()
		if qFilterReversalID != "" {
			if err := r.SetQueryParam("filter[reversal.id]", qFilterReversalID); err != nil {
				return err
			}
		}

	}

	if o.FilterReversalAdmissionAdmissionDateFrom != nil {

		// query param filter[reversal_admission.admission_date_from]
		var qrFilterReversalAdmissionAdmissionDateFrom strfmt.DateTime
		if o.FilterReversalAdmissionAdmissionDateFrom != nil {
			qrFilterReversalAdmissionAdmissionDateFrom = *o.FilterReversalAdmissionAdmissionDateFrom
		}
		qFilterReversalAdmissionAdmissionDateFrom := qrFilterReversalAdmissionAdmissionDateFrom.String()
		if qFilterReversalAdmissionAdmissionDateFrom != "" {
			if err := r.SetQueryParam("filter[reversal_admission.admission_date_from]", qFilterReversalAdmissionAdmissionDateFrom); err != nil {
				return err
			}
		}

	}

	if o.FilterReversalAdmissionAdmissionDateTo != nil {

		// query param filter[reversal_admission.admission_date_to]
		var qrFilterReversalAdmissionAdmissionDateTo strfmt.DateTime
		if o.FilterReversalAdmissionAdmissionDateTo != nil {
			qrFilterReversalAdmissionAdmissionDateTo = *o.FilterReversalAdmissionAdmissionDateTo
		}
		qFilterReversalAdmissionAdmissionDateTo := qrFilterReversalAdmissionAdmissionDateTo.String()
		if qFilterReversalAdmissionAdmissionDateTo != "" {
			if err := r.SetQueryParam("filter[reversal_admission.admission_date_to]", qFilterReversalAdmissionAdmissionDateTo); err != nil {
				return err
			}
		}

	}

	if o.FilterReversalAdmissionStatus != nil {

		// query param filter[reversal_admission.status]
		var qrFilterReversalAdmissionStatus string
		if o.FilterReversalAdmissionStatus != nil {
			qrFilterReversalAdmissionStatus = *o.FilterReversalAdmissionStatus
		}
		qFilterReversalAdmissionStatus := qrFilterReversalAdmissionStatus
		if qFilterReversalAdmissionStatus != "" {
			if err := r.SetQueryParam("filter[reversal_admission.status]", qFilterReversalAdmissionStatus); err != nil {
				return err
			}
		}

	}

	if o.FilterReversalSubmissionStatus != nil {

		// query param filter[reversal_submission.status]
		var qrFilterReversalSubmissionStatus string
		if o.FilterReversalSubmissionStatus != nil {
			qrFilterReversalSubmissionStatus = *o.FilterReversalSubmissionStatus
		}
		qFilterReversalSubmissionStatus := qrFilterReversalSubmissionStatus
		if qFilterReversalSubmissionStatus != "" {
			if err := r.SetQueryParam("filter[reversal_submission.status]", qFilterReversalSubmissionStatus); err != nil {
				return err
			}
		}

	}

	if o.FilterReversalSubmissionSubmissionDateFrom != nil {

		// query param filter[reversal_submission.submission_date_from]
		var qrFilterReversalSubmissionSubmissionDateFrom strfmt.DateTime
		if o.FilterReversalSubmissionSubmissionDateFrom != nil {
			qrFilterReversalSubmissionSubmissionDateFrom = *o.FilterReversalSubmissionSubmissionDateFrom
		}
		qFilterReversalSubmissionSubmissionDateFrom := qrFilterReversalSubmissionSubmissionDateFrom.String()
		if qFilterReversalSubmissionSubmissionDateFrom != "" {
			if err := r.SetQueryParam("filter[reversal_submission.submission_date_from]", qFilterReversalSubmissionSubmissionDateFrom); err != nil {
				return err
			}
		}

	}

	if o.FilterReversalSubmissionSubmissionDateTo != nil {

		// query param filter[reversal_submission.submission_date_to]
		var qrFilterReversalSubmissionSubmissionDateTo strfmt.DateTime
		if o.FilterReversalSubmissionSubmissionDateTo != nil {
			qrFilterReversalSubmissionSubmissionDateTo = *o.FilterReversalSubmissionSubmissionDateTo
		}
		qFilterReversalSubmissionSubmissionDateTo := qrFilterReversalSubmissionSubmissionDateTo.String()
		if qFilterReversalSubmissionSubmissionDateTo != "" {
			if err := r.SetQueryParam("filter[reversal_submission.submission_date_to]", qFilterReversalSubmissionSubmissionDateTo); err != nil {
				return err
			}
		}

	}

	if o.FilterRoute != nil {

		// query param filter[route]
		var qrFilterRoute string
		if o.FilterRoute != nil {
			qrFilterRoute = *o.FilterRoute
		}
		qFilterRoute := qrFilterRoute
		if qFilterRoute != "" {
			if err := r.SetQueryParam("filter[route]", qFilterRoute); err != nil {
				return err
			}
		}

	}

	if o.FilterSchemeTransactionID != nil {

		// query param filter[scheme_transaction_id]
		var qrFilterSchemeTransactionID string
		if o.FilterSchemeTransactionID != nil {
			qrFilterSchemeTransactionID = *o.FilterSchemeTransactionID
		}
		qFilterSchemeTransactionID := qrFilterSchemeTransactionID
		if qFilterSchemeTransactionID != "" {
			if err := r.SetQueryParam("filter[scheme_transaction_id]", qFilterSchemeTransactionID); err != nil {
				return err
			}
		}

	}

	if o.FilterSubmissionID != nil {

		// query param filter[submission.id]
		var qrFilterSubmissionID strfmt.UUID
		if o.FilterSubmissionID != nil {
			qrFilterSubmissionID = *o.FilterSubmissionID
		}
		qFilterSubmissionID := qrFilterSubmissionID.String()
		if qFilterSubmissionID != "" {
			if err := r.SetQueryParam("filter[submission.id]", qFilterSubmissionID); err != nil {
				return err
			}
		}

	}

	if o.FilterSubmissionSchemeStatusCode != nil {

		// query param filter[submission.scheme_status_code]
		var qrFilterSubmissionSchemeStatusCode string
		if o.FilterSubmissionSchemeStatusCode != nil {
			qrFilterSubmissionSchemeStatusCode = *o.FilterSubmissionSchemeStatusCode
		}
		qFilterSubmissionSchemeStatusCode := qrFilterSubmissionSchemeStatusCode
		if qFilterSubmissionSchemeStatusCode != "" {
			if err := r.SetQueryParam("filter[submission.scheme_status_code]", qFilterSubmissionSchemeStatusCode); err != nil {
				return err
			}
		}

	}

	if o.FilterSubmissionSettlementCycle != nil {

		// query param filter[submission.settlement_cycle]
		var qrFilterSubmissionSettlementCycle int64
		if o.FilterSubmissionSettlementCycle != nil {
			qrFilterSubmissionSettlementCycle = *o.FilterSubmissionSettlementCycle
		}
		qFilterSubmissionSettlementCycle := swag.FormatInt64(qrFilterSubmissionSettlementCycle)
		if qFilterSubmissionSettlementCycle != "" {
			if err := r.SetQueryParam("filter[submission.settlement_cycle]", qFilterSubmissionSettlementCycle); err != nil {
				return err
			}
		}

	}

	if o.FilterSubmissionSettlementDate != nil {

		// query param filter[submission.settlement_date]
		var qrFilterSubmissionSettlementDate strfmt.Date
		if o.FilterSubmissionSettlementDate != nil {
			qrFilterSubmissionSettlementDate = *o.FilterSubmissionSettlementDate
		}
		qFilterSubmissionSettlementDate := qrFilterSubmissionSettlementDate.String()
		if qFilterSubmissionSettlementDate != "" {
			if err := r.SetQueryParam("filter[submission.settlement_date]", qFilterSubmissionSettlementDate); err != nil {
				return err
			}
		}

	}

	if o.FilterSubmissionStatus != nil {

		// query param filter[submission.status]
		var qrFilterSubmissionStatus string
		if o.FilterSubmissionStatus != nil {
			qrFilterSubmissionStatus = *o.FilterSubmissionStatus
		}
		qFilterSubmissionStatus := qrFilterSubmissionStatus
		if qFilterSubmissionStatus != "" {
			if err := r.SetQueryParam("filter[submission.status]", qFilterSubmissionStatus); err != nil {
				return err
			}
		}

	}

	if o.FilterSubmissionSubmissionDateFrom != nil {

		// query param filter[submission.submission_date_from]
		var qrFilterSubmissionSubmissionDateFrom strfmt.DateTime
		if o.FilterSubmissionSubmissionDateFrom != nil {
			qrFilterSubmissionSubmissionDateFrom = *o.FilterSubmissionSubmissionDateFrom
		}
		qFilterSubmissionSubmissionDateFrom := qrFilterSubmissionSubmissionDateFrom.String()
		if qFilterSubmissionSubmissionDateFrom != "" {
			if err := r.SetQueryParam("filter[submission.submission_date_from]", qFilterSubmissionSubmissionDateFrom); err != nil {
				return err
			}
		}

	}

	if o.FilterSubmissionSubmissionDateTo != nil {

		// query param filter[submission.submission_date_to]
		var qrFilterSubmissionSubmissionDateTo strfmt.DateTime
		if o.FilterSubmissionSubmissionDateTo != nil {
			qrFilterSubmissionSubmissionDateTo = *o.FilterSubmissionSubmissionDateTo
		}
		qFilterSubmissionSubmissionDateTo := qrFilterSubmissionSubmissionDateTo.String()
		if qFilterSubmissionSubmissionDateTo != "" {
			if err := r.SetQueryParam("filter[submission.submission_date_to]", qFilterSubmissionSubmissionDateTo); err != nil {
				return err
			}
		}

	}

	if o.FilterUniqueSchemeID != nil {

		// query param filter[unique_scheme_id]
		var qrFilterUniqueSchemeID string
		if o.FilterUniqueSchemeID != nil {
			qrFilterUniqueSchemeID = *o.FilterUniqueSchemeID
		}
		qFilterUniqueSchemeID := qrFilterUniqueSchemeID
		if qFilterUniqueSchemeID != "" {
			if err := r.SetQueryParam("filter[unique_scheme_id]", qFilterUniqueSchemeID); err != nil {
				return err
			}
		}

	}

	if o.PageAfter != nil {

		// query param page[after]
		var qrPageAfter string
		if o.PageAfter != nil {
			qrPageAfter = *o.PageAfter
		}
		qPageAfter := qrPageAfter
		if qPageAfter != "" {
			if err := r.SetQueryParam("page[after]", qPageAfter); err != nil {
				return err
			}
		}

	}

	if o.PageBefore != nil {

		// query param page[before]
		var qrPageBefore string
		if o.PageBefore != nil {
			qrPageBefore = *o.PageBefore
		}
		qPageBefore := qrPageBefore
		if qPageBefore != "" {
			if err := r.SetQueryParam("page[before]", qPageBefore); err != nil {
				return err
			}
		}

	}

	if o.PageNumber != nil {

		// query param page[number]
		var qrPageNumber string
		if o.PageNumber != nil {
			qrPageNumber = *o.PageNumber
		}
		qPageNumber := qrPageNumber
		if qPageNumber != "" {
			if err := r.SetQueryParam("page[number]", qPageNumber); err != nil {
				return err
			}
		}

	}

	if o.PageSize != nil {

		// query param page[size]
		var qrPageSize int64
		if o.PageSize != nil {
			qrPageSize = *o.PageSize
		}
		qPageSize := swag.FormatInt64(qrPageSize)
		if qPageSize != "" {
			if err := r.SetQueryParam("page[size]", qPageSize); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
