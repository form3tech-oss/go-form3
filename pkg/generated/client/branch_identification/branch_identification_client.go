// Code generated by go-swagger; DO NOT EDIT.

// :Form3: Testing!

package branch_identification

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/form3tech-oss/go-form3/v6/pkg/client"
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new branch identification API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry, defaults client.Defaults) *Client {
	return &Client{transport: transport, formats: formats, Defaults: defaults}
}

/*
Client for branch identification API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
	Defaults  client.Defaults
}

// range of operations

/*
delete organisation branches branch ID identifications identification ID API
*/
func (a *DeleteOrganisationBranchesBranchIDIdentificationsIdentificationIDRequest) Do() (*DeleteOrganisationBranchesBranchIDIdentificationsIdentificationIDNoContent, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteOrganisationBranchesBranchIDIdentificationsIdentificationID",
		Method:             "DELETE",
		PathPattern:        "/organisation/branches/{branch_id}/identifications/{identification_id}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.api+json"},
		ConsumesMediaTypes: []string{"application/json", "application/vnd.api+json"},
		Schemes:            []string{"https"},
		Params:             a,
		Reader:             &DeleteOrganisationBranchesBranchIDIdentificationsIdentificationIDReader{formats: a.formats},
		//AuthInfo: authInfo,
		Context: a.Context,
		Client:  a.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteOrganisationBranchesBranchIDIdentificationsIdentificationIDNoContent), nil

}

func (a *DeleteOrganisationBranchesBranchIDIdentificationsIdentificationIDRequest) MustDo() *DeleteOrganisationBranchesBranchIDIdentificationsIdentificationIDNoContent {
	r0, err := a.Do()
	if err != nil {
		panic(err)
	}
	return r0
}

/*
get organisation branches branch ID identifications API
*/
func (a *GetOrganisationBranchesBranchIDIdentificationsRequest) Do() (*GetOrganisationBranchesBranchIDIdentificationsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetOrganisationBranchesBranchIDIdentifications",
		Method:             "GET",
		PathPattern:        "/organisation/branches/{branch_id}/identifications",
		ProducesMediaTypes: []string{"application/json", "application/vnd.api+json"},
		ConsumesMediaTypes: []string{"application/json", "application/vnd.api+json"},
		Schemes:            []string{"https"},
		Params:             a,
		Reader:             &GetOrganisationBranchesBranchIDIdentificationsReader{formats: a.formats},
		//AuthInfo: authInfo,
		Context: a.Context,
		Client:  a.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetOrganisationBranchesBranchIDIdentificationsOK), nil

}

func (a *GetOrganisationBranchesBranchIDIdentificationsRequest) MustDo() *GetOrganisationBranchesBranchIDIdentificationsOK {
	r0, err := a.Do()
	if err != nil {
		panic(err)
	}
	return r0
}

/*
get organisation branches branch ID identifications identification ID API
*/
func (a *GetOrganisationBranchesBranchIDIdentificationsIdentificationIDRequest) Do() (*GetOrganisationBranchesBranchIDIdentificationsIdentificationIDOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetOrganisationBranchesBranchIDIdentificationsIdentificationID",
		Method:             "GET",
		PathPattern:        "/organisation/branches/{branch_id}/identifications/{identification_id}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.api+json"},
		ConsumesMediaTypes: []string{"application/json", "application/vnd.api+json"},
		Schemes:            []string{"https"},
		Params:             a,
		Reader:             &GetOrganisationBranchesBranchIDIdentificationsIdentificationIDReader{formats: a.formats},
		//AuthInfo: authInfo,
		Context: a.Context,
		Client:  a.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetOrganisationBranchesBranchIDIdentificationsIdentificationIDOK), nil

}

func (a *GetOrganisationBranchesBranchIDIdentificationsIdentificationIDRequest) MustDo() *GetOrganisationBranchesBranchIDIdentificationsIdentificationIDOK {
	r0, err := a.Do()
	if err != nil {
		panic(err)
	}
	return r0
}

/*
patch organisation branches branch ID identifications identification ID API
*/
func (a *PatchOrganisationBranchesBranchIDIdentificationsIdentificationIDRequest) Do() (*PatchOrganisationBranchesBranchIDIdentificationsIdentificationIDOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PatchOrganisationBranchesBranchIDIdentificationsIdentificationID",
		Method:             "PATCH",
		PathPattern:        "/organisation/branches/{branch_id}/identifications/{identification_id}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.api+json"},
		ConsumesMediaTypes: []string{"application/json", "application/vnd.api+json"},
		Schemes:            []string{"https"},
		Params:             a,
		Reader:             &PatchOrganisationBranchesBranchIDIdentificationsIdentificationIDReader{formats: a.formats},
		//AuthInfo: authInfo,
		Context: a.Context,
		Client:  a.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PatchOrganisationBranchesBranchIDIdentificationsIdentificationIDOK), nil

}

func (a *PatchOrganisationBranchesBranchIDIdentificationsIdentificationIDRequest) MustDo() *PatchOrganisationBranchesBranchIDIdentificationsIdentificationIDOK {
	r0, err := a.Do()
	if err != nil {
		panic(err)
	}
	return r0
}

/*
post organisation branches branch ID identifications API
*/
func (a *PostOrganisationBranchesBranchIDIdentificationsRequest) Do() (*PostOrganisationBranchesBranchIDIdentificationsCreated, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostOrganisationBranchesBranchIDIdentifications",
		Method:             "POST",
		PathPattern:        "/organisation/branches/{branch_id}/identifications",
		ProducesMediaTypes: []string{"application/json", "application/vnd.api+json"},
		ConsumesMediaTypes: []string{"application/json", "application/vnd.api+json"},
		Schemes:            []string{"https"},
		Params:             a,
		Reader:             &PostOrganisationBranchesBranchIDIdentificationsReader{formats: a.formats},
		//AuthInfo: authInfo,
		Context: a.Context,
		Client:  a.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostOrganisationBranchesBranchIDIdentificationsCreated), nil

}

func (a *PostOrganisationBranchesBranchIDIdentificationsRequest) MustDo() *PostOrganisationBranchesBranchIDIdentificationsCreated {
	r0, err := a.Do()
	if err != nil {
		panic(err)
	}
	return r0
}

/////////

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
