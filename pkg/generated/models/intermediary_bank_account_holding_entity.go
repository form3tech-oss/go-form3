// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"log"

	"github.com/form3tech-oss/go-form3/v4/pkg/client"
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// IntermediaryBankAccountHoldingEntity intermediary bank account holding entity
// swagger:model IntermediaryBankAccountHoldingEntity
type IntermediaryBankAccountHoldingEntity struct {

	// Financial institution address
	BankAddress []string `json:"bank_address,omitempty"`

	// Financial institution identification
	BankID string `json:"bank_id,omitempty"`

	// bank id code
	BankIDCode BankIDCode `json:"bank_id_code,omitempty"`

	// Financial institution name
	BankName string `json:"bank_name,omitempty"`

	// Identifier of the financial institution which services the account
	BankPartyID string `json:"bank_party_id,omitempty"`
}

func IntermediaryBankAccountHoldingEntityWithDefaults(defaults client.Defaults) *IntermediaryBankAccountHoldingEntity {
	return &IntermediaryBankAccountHoldingEntity{

		BankAddress: make([]string, 0),

		BankID: defaults.GetString("IntermediaryBankAccountHoldingEntity", "bank_id"),

		// TODO BankIDCode: BankIDCode,

		BankName: defaults.GetString("IntermediaryBankAccountHoldingEntity", "bank_name"),

		BankPartyID: defaults.GetString("IntermediaryBankAccountHoldingEntity", "bank_party_id"),
	}
}

func (m *IntermediaryBankAccountHoldingEntity) WithBankAddress(bankAddress []string) *IntermediaryBankAccountHoldingEntity {

	m.BankAddress = bankAddress

	return m
}

func (m *IntermediaryBankAccountHoldingEntity) WithBankID(bankID string) *IntermediaryBankAccountHoldingEntity {

	m.BankID = bankID

	return m
}

func (m *IntermediaryBankAccountHoldingEntity) WithBankIDCode(bankIDCode BankIDCode) *IntermediaryBankAccountHoldingEntity {

	m.BankIDCode = bankIDCode

	return m
}

func (m *IntermediaryBankAccountHoldingEntity) WithBankName(bankName string) *IntermediaryBankAccountHoldingEntity {

	m.BankName = bankName

	return m
}

func (m *IntermediaryBankAccountHoldingEntity) WithBankPartyID(bankPartyID string) *IntermediaryBankAccountHoldingEntity {

	m.BankPartyID = bankPartyID

	return m
}

// Validate validates this intermediary bank account holding entity
func (m *IntermediaryBankAccountHoldingEntity) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBankIDCode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IntermediaryBankAccountHoldingEntity) validateBankIDCode(formats strfmt.Registry) error {

	if swag.IsZero(m.BankIDCode) { // not required
		return nil
	}

	if err := m.BankIDCode.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("bank_id_code")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *IntermediaryBankAccountHoldingEntity) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IntermediaryBankAccountHoldingEntity) UnmarshalBinary(b []byte) error {
	var res IntermediaryBankAccountHoldingEntity
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
func (m *IntermediaryBankAccountHoldingEntity) Json() string {
	json, err := json.MarshalIndent(m, "  ", "  ")
	if err != nil {
		log.Fatal(err)
	}
	return string(json)
}
