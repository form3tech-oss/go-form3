// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"log"
	"strconv"

	"github.com/form3tech-oss/go-form3/v7/pkg/client"
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// QueryBeneficiaryDebtorParty query beneficiary debtor party
// swagger:model QueryBeneficiaryDebtorParty
type QueryBeneficiaryDebtorParty struct {

	// Debtor/Beneficiary account number. Allows upper case and numeric characters.
	// Max Length: 34
	AccountNumber string `json:"account_number,omitempty"`

	// account number code
	AccountNumberCode QueryAccountNumberCode `json:"account_number_code,omitempty"`

	// account proxy
	AccountProxy *QueryBeneficiaryDebtorAccountProxy `json:"account_proxy,omitempty"`

	// account with
	AccountWith *QueryBeneficiaryDebtorPartyAccountWith `json:"account_with,omitempty"`

	// Additional address line of the debtor/beneficiary address
	AdditionalAddressLine string `json:"additional_address_line,omitempty"`

	// Debtor/Beneficiary birth city
	BirthCity string `json:"birth_city,omitempty"`

	// Debtor/Beneficiary birth country. ISO 3166 format country code
	BirthCountry string `json:"birth_country,omitempty"`

	// Debtor/Beneficiary birth date. Formatted ISO 8601 format YYYY-MM-DD
	// Format: date
	BirthDate *strfmt.Date `json:"birth_date,omitempty"`

	// Debtor/Beneficiary birth province
	BirthProvince string `json:"birth_province,omitempty"`

	// Building number of the debtor/beneficiary address
	BuildingNumber string `json:"building_number,omitempty"`

	// City/Town of the debtor/beneficiary address
	City string `json:"city,omitempty"`

	// Country of debtor/beneficiary address. ISO 3166 format country code
	Country string `json:"country,omitempty"`

	// Country of residence of the debtor/beneficiary, ISO 3166 format country code
	CountryOfResidence string `json:"country_of_residence,omitempty"`

	// Debtor/Beneficiary name
	Name string `json:"name,omitempty"`

	// Organisation identification of a debtor/beneficiary, in the case that the debtor/beneficiary is an organisation and not a private person.
	OrganisationIdentification string `json:"organisation_identification,omitempty"`

	// The code that specifies the type of `organisation_identification`
	OrganisationIdentificationCode string `json:"organisation_identification_code,omitempty"`

	// Issuer of the `organisation_identification`
	OrganisationIdentificationIssuer string `json:"organisation_identification_issuer,omitempty"`

	// The code that specifies the scheme of `organisation_identification`
	OrganisationIdentificationScheme string `json:"organisation_identification_scheme,omitempty"`

	// Array for additional ID(s) of ultimate organisation
	OrganisationIdentifications []*QueryBeneficiaryDebtorOrganisationIdentification `json:"organisation_identifications,omitempty"`

	// Post code of the debtor/beneficiary address
	PostCode string `json:"post_code,omitempty"`

	// private identification
	PrivateIdentification *QueryPrivateIdentification `json:"private_identification,omitempty"`

	// Province of the debtor/beneficiary address
	Province string `json:"province,omitempty"`

	// Street name of the debtor/beneficiary address
	StreetName string `json:"street_name,omitempty"`
}

func QueryBeneficiaryDebtorPartyWithDefaults(defaults client.Defaults) *QueryBeneficiaryDebtorParty {
	return &QueryBeneficiaryDebtorParty{

		AccountNumber: defaults.GetString("QueryBeneficiaryDebtorParty", "account_number"),

		// TODO AccountNumberCode: QueryAccountNumberCode,

		AccountProxy: QueryBeneficiaryDebtorAccountProxyWithDefaults(defaults),

		AccountWith: QueryBeneficiaryDebtorPartyAccountWithWithDefaults(defaults),

		AdditionalAddressLine: defaults.GetString("QueryBeneficiaryDebtorParty", "additional_address_line"),

		BirthCity: defaults.GetString("QueryBeneficiaryDebtorParty", "birth_city"),

		BirthCountry: defaults.GetString("QueryBeneficiaryDebtorParty", "birth_country"),

		BirthDate: defaults.GetStrfmtDatePtr("QueryBeneficiaryDebtorParty", "birth_date"),

		BirthProvince: defaults.GetString("QueryBeneficiaryDebtorParty", "birth_province"),

		BuildingNumber: defaults.GetString("QueryBeneficiaryDebtorParty", "building_number"),

		City: defaults.GetString("QueryBeneficiaryDebtorParty", "city"),

		Country: defaults.GetString("QueryBeneficiaryDebtorParty", "country"),

		CountryOfResidence: defaults.GetString("QueryBeneficiaryDebtorParty", "country_of_residence"),

		Name: defaults.GetString("QueryBeneficiaryDebtorParty", "name"),

		OrganisationIdentification: defaults.GetString("QueryBeneficiaryDebtorParty", "organisation_identification"),

		OrganisationIdentificationCode: defaults.GetString("QueryBeneficiaryDebtorParty", "organisation_identification_code"),

		OrganisationIdentificationIssuer: defaults.GetString("QueryBeneficiaryDebtorParty", "organisation_identification_issuer"),

		OrganisationIdentificationScheme: defaults.GetString("QueryBeneficiaryDebtorParty", "organisation_identification_scheme"),

		OrganisationIdentifications: make([]*QueryBeneficiaryDebtorOrganisationIdentification, 0),

		PostCode: defaults.GetString("QueryBeneficiaryDebtorParty", "post_code"),

		PrivateIdentification: QueryPrivateIdentificationWithDefaults(defaults),

		Province: defaults.GetString("QueryBeneficiaryDebtorParty", "province"),

		StreetName: defaults.GetString("QueryBeneficiaryDebtorParty", "street_name"),
	}
}

func (m *QueryBeneficiaryDebtorParty) WithAccountNumber(accountNumber string) *QueryBeneficiaryDebtorParty {

	m.AccountNumber = accountNumber

	return m
}

func (m *QueryBeneficiaryDebtorParty) WithAccountNumberCode(accountNumberCode QueryAccountNumberCode) *QueryBeneficiaryDebtorParty {

	m.AccountNumberCode = accountNumberCode

	return m
}

func (m *QueryBeneficiaryDebtorParty) WithAccountProxy(accountProxy QueryBeneficiaryDebtorAccountProxy) *QueryBeneficiaryDebtorParty {

	m.AccountProxy = &accountProxy

	return m
}

func (m *QueryBeneficiaryDebtorParty) WithoutAccountProxy() *QueryBeneficiaryDebtorParty {
	m.AccountProxy = nil
	return m
}

func (m *QueryBeneficiaryDebtorParty) WithAccountWith(accountWith QueryBeneficiaryDebtorPartyAccountWith) *QueryBeneficiaryDebtorParty {

	m.AccountWith = &accountWith

	return m
}

func (m *QueryBeneficiaryDebtorParty) WithoutAccountWith() *QueryBeneficiaryDebtorParty {
	m.AccountWith = nil
	return m
}

func (m *QueryBeneficiaryDebtorParty) WithAdditionalAddressLine(additionalAddressLine string) *QueryBeneficiaryDebtorParty {

	m.AdditionalAddressLine = additionalAddressLine

	return m
}

func (m *QueryBeneficiaryDebtorParty) WithBirthCity(birthCity string) *QueryBeneficiaryDebtorParty {

	m.BirthCity = birthCity

	return m
}

func (m *QueryBeneficiaryDebtorParty) WithBirthCountry(birthCountry string) *QueryBeneficiaryDebtorParty {

	m.BirthCountry = birthCountry

	return m
}

func (m *QueryBeneficiaryDebtorParty) WithBirthDate(birthDate strfmt.Date) *QueryBeneficiaryDebtorParty {

	m.BirthDate = &birthDate

	return m
}

func (m *QueryBeneficiaryDebtorParty) WithoutBirthDate() *QueryBeneficiaryDebtorParty {
	m.BirthDate = nil
	return m
}

func (m *QueryBeneficiaryDebtorParty) WithBirthProvince(birthProvince string) *QueryBeneficiaryDebtorParty {

	m.BirthProvince = birthProvince

	return m
}

func (m *QueryBeneficiaryDebtorParty) WithBuildingNumber(buildingNumber string) *QueryBeneficiaryDebtorParty {

	m.BuildingNumber = buildingNumber

	return m
}

func (m *QueryBeneficiaryDebtorParty) WithCity(city string) *QueryBeneficiaryDebtorParty {

	m.City = city

	return m
}

func (m *QueryBeneficiaryDebtorParty) WithCountry(country string) *QueryBeneficiaryDebtorParty {

	m.Country = country

	return m
}

func (m *QueryBeneficiaryDebtorParty) WithCountryOfResidence(countryOfResidence string) *QueryBeneficiaryDebtorParty {

	m.CountryOfResidence = countryOfResidence

	return m
}

func (m *QueryBeneficiaryDebtorParty) WithName(name string) *QueryBeneficiaryDebtorParty {

	m.Name = name

	return m
}

func (m *QueryBeneficiaryDebtorParty) WithOrganisationIdentification(organisationIdentification string) *QueryBeneficiaryDebtorParty {

	m.OrganisationIdentification = organisationIdentification

	return m
}

func (m *QueryBeneficiaryDebtorParty) WithOrganisationIdentificationCode(organisationIdentificationCode string) *QueryBeneficiaryDebtorParty {

	m.OrganisationIdentificationCode = organisationIdentificationCode

	return m
}

func (m *QueryBeneficiaryDebtorParty) WithOrganisationIdentificationIssuer(organisationIdentificationIssuer string) *QueryBeneficiaryDebtorParty {

	m.OrganisationIdentificationIssuer = organisationIdentificationIssuer

	return m
}

func (m *QueryBeneficiaryDebtorParty) WithOrganisationIdentificationScheme(organisationIdentificationScheme string) *QueryBeneficiaryDebtorParty {

	m.OrganisationIdentificationScheme = organisationIdentificationScheme

	return m
}

func (m *QueryBeneficiaryDebtorParty) WithOrganisationIdentifications(organisationIdentifications []*QueryBeneficiaryDebtorOrganisationIdentification) *QueryBeneficiaryDebtorParty {

	m.OrganisationIdentifications = organisationIdentifications

	return m
}

func (m *QueryBeneficiaryDebtorParty) WithPostCode(postCode string) *QueryBeneficiaryDebtorParty {

	m.PostCode = postCode

	return m
}

func (m *QueryBeneficiaryDebtorParty) WithPrivateIdentification(privateIdentification QueryPrivateIdentification) *QueryBeneficiaryDebtorParty {

	m.PrivateIdentification = &privateIdentification

	return m
}

func (m *QueryBeneficiaryDebtorParty) WithoutPrivateIdentification() *QueryBeneficiaryDebtorParty {
	m.PrivateIdentification = nil
	return m
}

func (m *QueryBeneficiaryDebtorParty) WithProvince(province string) *QueryBeneficiaryDebtorParty {

	m.Province = province

	return m
}

func (m *QueryBeneficiaryDebtorParty) WithStreetName(streetName string) *QueryBeneficiaryDebtorParty {

	m.StreetName = streetName

	return m
}

// Validate validates this query beneficiary debtor party
func (m *QueryBeneficiaryDebtorParty) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccountNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAccountNumberCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAccountProxy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAccountWith(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBirthDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrganisationIdentifications(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrivateIdentification(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *QueryBeneficiaryDebtorParty) validateAccountNumber(formats strfmt.Registry) error {

	if swag.IsZero(m.AccountNumber) { // not required
		return nil
	}

	if err := validate.MaxLength("account_number", "body", m.AccountNumber, 34); err != nil {
		return err
	}

	return nil
}

func (m *QueryBeneficiaryDebtorParty) validateAccountNumberCode(formats strfmt.Registry) error {

	if swag.IsZero(m.AccountNumberCode) { // not required
		return nil
	}

	if err := m.AccountNumberCode.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("account_number_code")
		}
		return err
	}

	return nil
}

func (m *QueryBeneficiaryDebtorParty) validateAccountProxy(formats strfmt.Registry) error {

	if swag.IsZero(m.AccountProxy) { // not required
		return nil
	}

	if m.AccountProxy != nil {
		if err := m.AccountProxy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("account_proxy")
			}
			return err
		}
	}

	return nil
}

func (m *QueryBeneficiaryDebtorParty) validateAccountWith(formats strfmt.Registry) error {

	if swag.IsZero(m.AccountWith) { // not required
		return nil
	}

	if m.AccountWith != nil {
		if err := m.AccountWith.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("account_with")
			}
			return err
		}
	}

	return nil
}

func (m *QueryBeneficiaryDebtorParty) validateBirthDate(formats strfmt.Registry) error {

	if swag.IsZero(m.BirthDate) { // not required
		return nil
	}

	if err := validate.FormatOf("birth_date", "body", "date", m.BirthDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *QueryBeneficiaryDebtorParty) validateOrganisationIdentifications(formats strfmt.Registry) error {

	if swag.IsZero(m.OrganisationIdentifications) { // not required
		return nil
	}

	for i := 0; i < len(m.OrganisationIdentifications); i++ {
		if swag.IsZero(m.OrganisationIdentifications[i]) { // not required
			continue
		}

		if m.OrganisationIdentifications[i] != nil {
			if err := m.OrganisationIdentifications[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("organisation_identifications" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *QueryBeneficiaryDebtorParty) validatePrivateIdentification(formats strfmt.Registry) error {

	if swag.IsZero(m.PrivateIdentification) { // not required
		return nil
	}

	if m.PrivateIdentification != nil {
		if err := m.PrivateIdentification.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("private_identification")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *QueryBeneficiaryDebtorParty) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *QueryBeneficiaryDebtorParty) UnmarshalBinary(b []byte) error {
	var res QueryBeneficiaryDebtorParty
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
func (m *QueryBeneficiaryDebtorParty) Json() string {
	json, err := json.MarshalIndent(m, "  ", "  ")
	if err != nil {
		log.Fatal(err)
	}
	return string(json)
}

// QueryBeneficiaryDebtorPartyAccountWith Debtor/Beneficiary agents bank information.
// swagger:model QueryBeneficiaryDebtorPartyAccountWith
type QueryBeneficiaryDebtorPartyAccountWith struct {

	// Identification of a member of a clearing system.
	// Max Length: 35
	BankID string `json:"bank_id,omitempty"`

	// Identification of a clearing system, in a coded form as published in an external list.
	// Max Length: 5
	BankIDCode string `json:"bank_id_code,omitempty"`

	// Name by which an agent is known and which is usually used to identify that agent.
	// Max Length: 140
	BankName string `json:"bank_name,omitempty"`
}

func QueryBeneficiaryDebtorPartyAccountWithWithDefaults(defaults client.Defaults) *QueryBeneficiaryDebtorPartyAccountWith {
	return &QueryBeneficiaryDebtorPartyAccountWith{

		BankID: defaults.GetString("QueryBeneficiaryDebtorPartyAccountWith", "bank_id"),

		BankIDCode: defaults.GetString("QueryBeneficiaryDebtorPartyAccountWith", "bank_id_code"),

		BankName: defaults.GetString("QueryBeneficiaryDebtorPartyAccountWith", "bank_name"),
	}
}

func (m *QueryBeneficiaryDebtorPartyAccountWith) WithBankID(bankID string) *QueryBeneficiaryDebtorPartyAccountWith {

	m.BankID = bankID

	return m
}

func (m *QueryBeneficiaryDebtorPartyAccountWith) WithBankIDCode(bankIDCode string) *QueryBeneficiaryDebtorPartyAccountWith {

	m.BankIDCode = bankIDCode

	return m
}

func (m *QueryBeneficiaryDebtorPartyAccountWith) WithBankName(bankName string) *QueryBeneficiaryDebtorPartyAccountWith {

	m.BankName = bankName

	return m
}

// Validate validates this query beneficiary debtor party account with
func (m *QueryBeneficiaryDebtorPartyAccountWith) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBankID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBankIDCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBankName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *QueryBeneficiaryDebtorPartyAccountWith) validateBankID(formats strfmt.Registry) error {

	if swag.IsZero(m.BankID) { // not required
		return nil
	}

	if err := validate.MaxLength("account_with"+"."+"bank_id", "body", m.BankID, 35); err != nil {
		return err
	}

	return nil
}

func (m *QueryBeneficiaryDebtorPartyAccountWith) validateBankIDCode(formats strfmt.Registry) error {

	if swag.IsZero(m.BankIDCode) { // not required
		return nil
	}

	if err := validate.MaxLength("account_with"+"."+"bank_id_code", "body", m.BankIDCode, 5); err != nil {
		return err
	}

	return nil
}

func (m *QueryBeneficiaryDebtorPartyAccountWith) validateBankName(formats strfmt.Registry) error {

	if swag.IsZero(m.BankName) { // not required
		return nil
	}

	if err := validate.MaxLength("account_with"+"."+"bank_name", "body", m.BankName, 140); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *QueryBeneficiaryDebtorPartyAccountWith) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *QueryBeneficiaryDebtorPartyAccountWith) UnmarshalBinary(b []byte) error {
	var res QueryBeneficiaryDebtorPartyAccountWith
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
func (m *QueryBeneficiaryDebtorPartyAccountWith) Json() string {
	json, err := json.MarshalIndent(m, "  ", "  ")
	if err != nil {
		log.Fatal(err)
	}
	return string(json)
}
