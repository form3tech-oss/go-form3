// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"log"
	"strconv"

	"github.com/form3tech-oss/go-form3/v7/pkg/client"
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PaymentAttributes payment attributes
// swagger:model PaymentAttributes
type PaymentAttributes struct {

	// Block to represent further information related to the processing of payment instructions from one agent to another.
	AgentInstructions []*AgentInstruction `json:"agent_instructions,omitempty"`

	// Block to represent a Financial Institution/agent in the payment chain
	Agents []*Agent `json:"agents,omitempty"`

	// Amount of money moved between the instructing agent and instructed agent
	// Pattern: ^[0-9]{0,20}(?:\.[0-9]{1,10})?$
	Amount string `json:"amount,omitempty"`

	// batch booking indicator
	BatchBookingIndicator string `json:"batch_booking_indicator,omitempty"`

	// batch id
	BatchID string `json:"batch_id,omitempty"`

	// batch type
	BatchType string `json:"batch_type,omitempty"`

	// beneficiary party
	BeneficiaryParty *PaymentAttributesBeneficiaryParty `json:"beneficiary_party,omitempty"`

	// Category purpose in proprietary form. Specifies the high level purpose of the instruction. Cannot be used at the same time as `category_purpose_coded`.
	CategoryPurpose string `json:"category_purpose,omitempty"`

	// Category purpose in a coded form. Specifies the high level purpose of the instruction. Cannot be used at the same time as `category_purpose`.
	CategoryPurposeCoded string `json:"category_purpose_coded,omitempty"`

	// charges information
	ChargesInformation *ChargesInformation `json:"charges_information,omitempty"`

	// Unique identifier for organisations collecting payments
	ClearingID string `json:"clearing_id,omitempty"`

	// Currency of the transaction amount. Currency code as defined in [ISO 4217](http://www.iso.org/iso/home/standards/currency_codes.htm)
	Currency string `json:"currency,omitempty"`

	// debtor party
	DebtorParty *PaymentAttributesDebtorParty `json:"debtor_party,omitempty"`

	// Unique identification, as assigned by the initiating party, to unambiguously identify the transaction. This identification is passed on, unchanged, throughout the entire end-to-end chain.
	EndToEndReference string `json:"end_to_end_reference,omitempty"`

	// file number
	FileNumber string `json:"file_number,omitempty"`

	// fx
	Fx *PaymentAttributesFx `json:"fx,omitempty"`

	// Unique identification, as assigned by the initiating party to unambiguously identify the transaction. This identification is an point-to-point reference and is passed on, unchanged, throughout the entire chain. Cannot include leading, trailing or internal spaces.
	InstructionID string `json:"instruction_id,omitempty"`

	// intermediary bank
	IntermediaryBank *IntermediaryBankAccountHoldingEntity `json:"intermediary_bank,omitempty"`

	// Numeric reference field, see scheme specific descriptions for usage
	NumericReference string `json:"numeric_reference,omitempty"`

	// Block to represent parties involved in the payment instruction
	Parties []*Party `json:"parties,omitempty"`

	// Timestamp of when the payment instruction meets the set processing conditions. Format: YYYY-MM-DDThh:mm:ss:mmm+hh:mm
	// Format: date-time
	PaymentAcceptanceDatetime *strfmt.DateTime `json:"payment_acceptance_datetime,omitempty"`

	// Purpose of the payment in a proprietary form
	PaymentPurpose string `json:"payment_purpose,omitempty"`

	// Purpose of the payment in a coded form
	PaymentPurposeCoded string `json:"payment_purpose_coded,omitempty"`

	// Clearing infrastructure through which the payment instruction is to be processed. Default for given organisation ID is used if left empty. Has to be a valid [scheme identifier](http://draft-api-docs.form3.tech/api.html#enumerations-schemes).
	// Pattern: ^[A-Za-z_]*$
	PaymentScheme string `json:"payment_scheme,omitempty"`

	// payment type
	PaymentType string `json:"payment_type,omitempty"`

	// Date on which the payment is to be debited from the debtor account. Formatted according to ISO 8601 format: YYYY-MM-DD.
	// Format: date
	ProcessingDate *strfmt.Date `json:"processing_date,omitempty"`

	// receivers correspondent
	ReceiversCorrespondent *ReceiversCorrespondentAccountHoldingEntity `json:"receivers_correspondent,omitempty"`

	// Payment reference for beneficiary use
	Reference string `json:"reference,omitempty"`

	// Block to represent a list of references
	References []*Reference `json:"references,omitempty"`

	// Regulatory reporting information
	RegulatoryReporting string `json:"regulatory_reporting,omitempty"`

	// reimbursement
	Reimbursement *ReimbursementAccountHoldingEntity `json:"reimbursement,omitempty"`

	// Information supplied to enable the matching of an entry with the items that the transfer is intended to settle, such as commercial invoices in an accounts receivable system provided by the debtor for the beneficiary.
	RemittanceInformation string `json:"remittance_information,omitempty"`

	// The scheme specific payment [sub type](http://api-docs.form3.tech/api.html#enumerations-scheme-specific-payment-sub-types)
	SchemePaymentSubType string `json:"scheme_payment_sub_type,omitempty"`

	// The [scheme-specific payment type](#enumerations-scheme-payment-types)
	SchemePaymentType string `json:"scheme_payment_type,omitempty"`

	// Date on which the payment is processed by the scheme. Only used if different from `processing_date`.
	// Format: date
	SchemeProcessingDate *strfmt.Date `json:"scheme_processing_date,omitempty"`

	// Unique identification, as assigned by the first instructing agent, to unambiguously identify the transaction that is passed on, unchanged, throughout the entire interbank chain.
	SchemeTransactionID string `json:"scheme_transaction_id,omitempty"`

	// senders correspondent
	SendersCorrespondent *SendersCorrespondentAccountHoldingEntity `json:"senders_correspondent,omitempty"`

	// settlement
	Settlement *Settlement `json:"settlement,omitempty"`

	// structured reference
	StructuredReference *PaymentAttributesStructuredReference `json:"structured_reference,omitempty"`

	// swift
	Swift *PaymentAttributesSwift `json:"swift,omitempty"`

	// ultimate beneficiary
	UltimateBeneficiary *UltimateEntity `json:"ultimate_beneficiary,omitempty"`

	// ultimate debtor
	UltimateDebtor *UltimateEntity `json:"ultimate_debtor,omitempty"`

	// The scheme-specific unique transaction ID. Populated by the scheme.
	UniqueSchemeID string `json:"unique_scheme_id,omitempty"`

	// All purpose list of key-value pairs specific data stored on the payment.
	// Max Items: 10
	UserDefinedData []*UserDefinedData `json:"user_defined_data,omitempty"`
}

func PaymentAttributesWithDefaults(defaults client.Defaults) *PaymentAttributes {
	return &PaymentAttributes{

		AgentInstructions: make([]*AgentInstruction, 0),

		Agents: make([]*Agent, 0),

		Amount: defaults.GetString("PaymentAttributes", "amount"),

		BatchBookingIndicator: defaults.GetString("PaymentAttributes", "batch_booking_indicator"),

		BatchID: defaults.GetString("PaymentAttributes", "batch_id"),

		BatchType: defaults.GetString("PaymentAttributes", "batch_type"),

		BeneficiaryParty: PaymentAttributesBeneficiaryPartyWithDefaults(defaults),

		CategoryPurpose: defaults.GetString("PaymentAttributes", "category_purpose"),

		CategoryPurposeCoded: defaults.GetString("PaymentAttributes", "category_purpose_coded"),

		ChargesInformation: ChargesInformationWithDefaults(defaults),

		ClearingID: defaults.GetString("PaymentAttributes", "clearing_id"),

		Currency: defaults.GetString("PaymentAttributes", "currency"),

		DebtorParty: PaymentAttributesDebtorPartyWithDefaults(defaults),

		EndToEndReference: defaults.GetString("PaymentAttributes", "end_to_end_reference"),

		FileNumber: defaults.GetString("PaymentAttributes", "file_number"),

		Fx: PaymentAttributesFxWithDefaults(defaults),

		InstructionID: defaults.GetString("PaymentAttributes", "instruction_id"),

		IntermediaryBank: IntermediaryBankAccountHoldingEntityWithDefaults(defaults),

		NumericReference: defaults.GetString("PaymentAttributes", "numeric_reference"),

		Parties: make([]*Party, 0),

		PaymentAcceptanceDatetime: defaults.GetStrfmtDateTimePtr("PaymentAttributes", "payment_acceptance_datetime"),

		PaymentPurpose: defaults.GetString("PaymentAttributes", "payment_purpose"),

		PaymentPurposeCoded: defaults.GetString("PaymentAttributes", "payment_purpose_coded"),

		PaymentScheme: defaults.GetString("PaymentAttributes", "payment_scheme"),

		PaymentType: defaults.GetString("PaymentAttributes", "payment_type"),

		ProcessingDate: defaults.GetStrfmtDatePtr("PaymentAttributes", "processing_date"),

		ReceiversCorrespondent: ReceiversCorrespondentAccountHoldingEntityWithDefaults(defaults),

		Reference: defaults.GetString("PaymentAttributes", "reference"),

		References: make([]*Reference, 0),

		RegulatoryReporting: defaults.GetString("PaymentAttributes", "regulatory_reporting"),

		Reimbursement: ReimbursementAccountHoldingEntityWithDefaults(defaults),

		RemittanceInformation: defaults.GetString("PaymentAttributes", "remittance_information"),

		SchemePaymentSubType: defaults.GetString("PaymentAttributes", "scheme_payment_sub_type"),

		SchemePaymentType: defaults.GetString("PaymentAttributes", "scheme_payment_type"),

		SchemeProcessingDate: defaults.GetStrfmtDatePtr("PaymentAttributes", "scheme_processing_date"),

		SchemeTransactionID: defaults.GetString("PaymentAttributes", "scheme_transaction_id"),

		SendersCorrespondent: SendersCorrespondentAccountHoldingEntityWithDefaults(defaults),

		Settlement: SettlementWithDefaults(defaults),

		StructuredReference: PaymentAttributesStructuredReferenceWithDefaults(defaults),

		Swift: PaymentAttributesSwiftWithDefaults(defaults),

		UltimateBeneficiary: UltimateEntityWithDefaults(defaults),

		UltimateDebtor: UltimateEntityWithDefaults(defaults),

		UniqueSchemeID: defaults.GetString("PaymentAttributes", "unique_scheme_id"),

		UserDefinedData: make([]*UserDefinedData, 0),
	}
}

func (m *PaymentAttributes) WithAgentInstructions(agentInstructions []*AgentInstruction) *PaymentAttributes {

	m.AgentInstructions = agentInstructions

	return m
}

func (m *PaymentAttributes) WithAgents(agents []*Agent) *PaymentAttributes {

	m.Agents = agents

	return m
}

func (m *PaymentAttributes) WithAmount(amount string) *PaymentAttributes {

	m.Amount = amount

	return m
}

func (m *PaymentAttributes) WithBatchBookingIndicator(batchBookingIndicator string) *PaymentAttributes {

	m.BatchBookingIndicator = batchBookingIndicator

	return m
}

func (m *PaymentAttributes) WithBatchID(batchID string) *PaymentAttributes {

	m.BatchID = batchID

	return m
}

func (m *PaymentAttributes) WithBatchType(batchType string) *PaymentAttributes {

	m.BatchType = batchType

	return m
}

func (m *PaymentAttributes) WithBeneficiaryParty(beneficiaryParty PaymentAttributesBeneficiaryParty) *PaymentAttributes {

	m.BeneficiaryParty = &beneficiaryParty

	return m
}

func (m *PaymentAttributes) WithoutBeneficiaryParty() *PaymentAttributes {
	m.BeneficiaryParty = nil
	return m
}

func (m *PaymentAttributes) WithCategoryPurpose(categoryPurpose string) *PaymentAttributes {

	m.CategoryPurpose = categoryPurpose

	return m
}

func (m *PaymentAttributes) WithCategoryPurposeCoded(categoryPurposeCoded string) *PaymentAttributes {

	m.CategoryPurposeCoded = categoryPurposeCoded

	return m
}

func (m *PaymentAttributes) WithChargesInformation(chargesInformation ChargesInformation) *PaymentAttributes {

	m.ChargesInformation = &chargesInformation

	return m
}

func (m *PaymentAttributes) WithoutChargesInformation() *PaymentAttributes {
	m.ChargesInformation = nil
	return m
}

func (m *PaymentAttributes) WithClearingID(clearingID string) *PaymentAttributes {

	m.ClearingID = clearingID

	return m
}

func (m *PaymentAttributes) WithCurrency(currency string) *PaymentAttributes {

	m.Currency = currency

	return m
}

func (m *PaymentAttributes) WithDebtorParty(debtorParty PaymentAttributesDebtorParty) *PaymentAttributes {

	m.DebtorParty = &debtorParty

	return m
}

func (m *PaymentAttributes) WithoutDebtorParty() *PaymentAttributes {
	m.DebtorParty = nil
	return m
}

func (m *PaymentAttributes) WithEndToEndReference(endToEndReference string) *PaymentAttributes {

	m.EndToEndReference = endToEndReference

	return m
}

func (m *PaymentAttributes) WithFileNumber(fileNumber string) *PaymentAttributes {

	m.FileNumber = fileNumber

	return m
}

func (m *PaymentAttributes) WithFx(fx PaymentAttributesFx) *PaymentAttributes {

	m.Fx = &fx

	return m
}

func (m *PaymentAttributes) WithoutFx() *PaymentAttributes {
	m.Fx = nil
	return m
}

func (m *PaymentAttributes) WithInstructionID(instructionID string) *PaymentAttributes {

	m.InstructionID = instructionID

	return m
}

func (m *PaymentAttributes) WithIntermediaryBank(intermediaryBank IntermediaryBankAccountHoldingEntity) *PaymentAttributes {

	m.IntermediaryBank = &intermediaryBank

	return m
}

func (m *PaymentAttributes) WithoutIntermediaryBank() *PaymentAttributes {
	m.IntermediaryBank = nil
	return m
}

func (m *PaymentAttributes) WithNumericReference(numericReference string) *PaymentAttributes {

	m.NumericReference = numericReference

	return m
}

func (m *PaymentAttributes) WithParties(parties []*Party) *PaymentAttributes {

	m.Parties = parties

	return m
}

func (m *PaymentAttributes) WithPaymentAcceptanceDatetime(paymentAcceptanceDatetime strfmt.DateTime) *PaymentAttributes {

	m.PaymentAcceptanceDatetime = &paymentAcceptanceDatetime

	return m
}

func (m *PaymentAttributes) WithoutPaymentAcceptanceDatetime() *PaymentAttributes {
	m.PaymentAcceptanceDatetime = nil
	return m
}

func (m *PaymentAttributes) WithPaymentPurpose(paymentPurpose string) *PaymentAttributes {

	m.PaymentPurpose = paymentPurpose

	return m
}

func (m *PaymentAttributes) WithPaymentPurposeCoded(paymentPurposeCoded string) *PaymentAttributes {

	m.PaymentPurposeCoded = paymentPurposeCoded

	return m
}

func (m *PaymentAttributes) WithPaymentScheme(paymentScheme string) *PaymentAttributes {

	m.PaymentScheme = paymentScheme

	return m
}

func (m *PaymentAttributes) WithPaymentType(paymentType string) *PaymentAttributes {

	m.PaymentType = paymentType

	return m
}

func (m *PaymentAttributes) WithProcessingDate(processingDate strfmt.Date) *PaymentAttributes {

	m.ProcessingDate = &processingDate

	return m
}

func (m *PaymentAttributes) WithoutProcessingDate() *PaymentAttributes {
	m.ProcessingDate = nil
	return m
}

func (m *PaymentAttributes) WithReceiversCorrespondent(receiversCorrespondent ReceiversCorrespondentAccountHoldingEntity) *PaymentAttributes {

	m.ReceiversCorrespondent = &receiversCorrespondent

	return m
}

func (m *PaymentAttributes) WithoutReceiversCorrespondent() *PaymentAttributes {
	m.ReceiversCorrespondent = nil
	return m
}

func (m *PaymentAttributes) WithReference(reference string) *PaymentAttributes {

	m.Reference = reference

	return m
}

func (m *PaymentAttributes) WithReferences(references []*Reference) *PaymentAttributes {

	m.References = references

	return m
}

func (m *PaymentAttributes) WithRegulatoryReporting(regulatoryReporting string) *PaymentAttributes {

	m.RegulatoryReporting = regulatoryReporting

	return m
}

func (m *PaymentAttributes) WithReimbursement(reimbursement ReimbursementAccountHoldingEntity) *PaymentAttributes {

	m.Reimbursement = &reimbursement

	return m
}

func (m *PaymentAttributes) WithoutReimbursement() *PaymentAttributes {
	m.Reimbursement = nil
	return m
}

func (m *PaymentAttributes) WithRemittanceInformation(remittanceInformation string) *PaymentAttributes {

	m.RemittanceInformation = remittanceInformation

	return m
}

func (m *PaymentAttributes) WithSchemePaymentSubType(schemePaymentSubType string) *PaymentAttributes {

	m.SchemePaymentSubType = schemePaymentSubType

	return m
}

func (m *PaymentAttributes) WithSchemePaymentType(schemePaymentType string) *PaymentAttributes {

	m.SchemePaymentType = schemePaymentType

	return m
}

func (m *PaymentAttributes) WithSchemeProcessingDate(schemeProcessingDate strfmt.Date) *PaymentAttributes {

	m.SchemeProcessingDate = &schemeProcessingDate

	return m
}

func (m *PaymentAttributes) WithoutSchemeProcessingDate() *PaymentAttributes {
	m.SchemeProcessingDate = nil
	return m
}

func (m *PaymentAttributes) WithSchemeTransactionID(schemeTransactionID string) *PaymentAttributes {

	m.SchemeTransactionID = schemeTransactionID

	return m
}

func (m *PaymentAttributes) WithSendersCorrespondent(sendersCorrespondent SendersCorrespondentAccountHoldingEntity) *PaymentAttributes {

	m.SendersCorrespondent = &sendersCorrespondent

	return m
}

func (m *PaymentAttributes) WithoutSendersCorrespondent() *PaymentAttributes {
	m.SendersCorrespondent = nil
	return m
}

func (m *PaymentAttributes) WithSettlement(settlement Settlement) *PaymentAttributes {

	m.Settlement = &settlement

	return m
}

func (m *PaymentAttributes) WithoutSettlement() *PaymentAttributes {
	m.Settlement = nil
	return m
}

func (m *PaymentAttributes) WithStructuredReference(structuredReference PaymentAttributesStructuredReference) *PaymentAttributes {

	m.StructuredReference = &structuredReference

	return m
}

func (m *PaymentAttributes) WithoutStructuredReference() *PaymentAttributes {
	m.StructuredReference = nil
	return m
}

func (m *PaymentAttributes) WithSwift(swift PaymentAttributesSwift) *PaymentAttributes {

	m.Swift = &swift

	return m
}

func (m *PaymentAttributes) WithoutSwift() *PaymentAttributes {
	m.Swift = nil
	return m
}

func (m *PaymentAttributes) WithUltimateBeneficiary(ultimateBeneficiary UltimateEntity) *PaymentAttributes {

	m.UltimateBeneficiary = &ultimateBeneficiary

	return m
}

func (m *PaymentAttributes) WithoutUltimateBeneficiary() *PaymentAttributes {
	m.UltimateBeneficiary = nil
	return m
}

func (m *PaymentAttributes) WithUltimateDebtor(ultimateDebtor UltimateEntity) *PaymentAttributes {

	m.UltimateDebtor = &ultimateDebtor

	return m
}

func (m *PaymentAttributes) WithoutUltimateDebtor() *PaymentAttributes {
	m.UltimateDebtor = nil
	return m
}

func (m *PaymentAttributes) WithUniqueSchemeID(uniqueSchemeID string) *PaymentAttributes {

	m.UniqueSchemeID = uniqueSchemeID

	return m
}

func (m *PaymentAttributes) WithUserDefinedData(userDefinedData []*UserDefinedData) *PaymentAttributes {

	m.UserDefinedData = userDefinedData

	return m
}

// Validate validates this payment attributes
func (m *PaymentAttributes) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAgentInstructions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAgents(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBeneficiaryParty(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateChargesInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDebtorParty(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFx(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIntermediaryBank(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateParties(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePaymentAcceptanceDatetime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePaymentScheme(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProcessingDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReceiversCorrespondent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReferences(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReimbursement(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSchemeProcessingDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSendersCorrespondent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSettlement(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStructuredReference(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSwift(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUltimateBeneficiary(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUltimateDebtor(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserDefinedData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PaymentAttributes) validateAgentInstructions(formats strfmt.Registry) error {

	if swag.IsZero(m.AgentInstructions) { // not required
		return nil
	}

	for i := 0; i < len(m.AgentInstructions); i++ {
		if swag.IsZero(m.AgentInstructions[i]) { // not required
			continue
		}

		if m.AgentInstructions[i] != nil {
			if err := m.AgentInstructions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("agent_instructions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PaymentAttributes) validateAgents(formats strfmt.Registry) error {

	if swag.IsZero(m.Agents) { // not required
		return nil
	}

	for i := 0; i < len(m.Agents); i++ {
		if swag.IsZero(m.Agents[i]) { // not required
			continue
		}

		if m.Agents[i] != nil {
			if err := m.Agents[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("agents" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PaymentAttributes) validateAmount(formats strfmt.Registry) error {

	if swag.IsZero(m.Amount) { // not required
		return nil
	}

	if err := validate.Pattern("amount", "body", m.Amount, `^[0-9]{0,20}(?:\.[0-9]{1,10})?$`); err != nil {
		return err
	}

	return nil
}

func (m *PaymentAttributes) validateBeneficiaryParty(formats strfmt.Registry) error {

	if swag.IsZero(m.BeneficiaryParty) { // not required
		return nil
	}

	if m.BeneficiaryParty != nil {
		if err := m.BeneficiaryParty.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("beneficiary_party")
			}
			return err
		}
	}

	return nil
}

func (m *PaymentAttributes) validateChargesInformation(formats strfmt.Registry) error {

	if swag.IsZero(m.ChargesInformation) { // not required
		return nil
	}

	if m.ChargesInformation != nil {
		if err := m.ChargesInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("charges_information")
			}
			return err
		}
	}

	return nil
}

func (m *PaymentAttributes) validateDebtorParty(formats strfmt.Registry) error {

	if swag.IsZero(m.DebtorParty) { // not required
		return nil
	}

	if m.DebtorParty != nil {
		if err := m.DebtorParty.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("debtor_party")
			}
			return err
		}
	}

	return nil
}

func (m *PaymentAttributes) validateFx(formats strfmt.Registry) error {

	if swag.IsZero(m.Fx) { // not required
		return nil
	}

	if m.Fx != nil {
		if err := m.Fx.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("fx")
			}
			return err
		}
	}

	return nil
}

func (m *PaymentAttributes) validateIntermediaryBank(formats strfmt.Registry) error {

	if swag.IsZero(m.IntermediaryBank) { // not required
		return nil
	}

	if m.IntermediaryBank != nil {
		if err := m.IntermediaryBank.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("intermediary_bank")
			}
			return err
		}
	}

	return nil
}

func (m *PaymentAttributes) validateParties(formats strfmt.Registry) error {

	if swag.IsZero(m.Parties) { // not required
		return nil
	}

	for i := 0; i < len(m.Parties); i++ {
		if swag.IsZero(m.Parties[i]) { // not required
			continue
		}

		if m.Parties[i] != nil {
			if err := m.Parties[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("parties" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PaymentAttributes) validatePaymentAcceptanceDatetime(formats strfmt.Registry) error {

	if swag.IsZero(m.PaymentAcceptanceDatetime) { // not required
		return nil
	}

	if err := validate.FormatOf("payment_acceptance_datetime", "body", "date-time", m.PaymentAcceptanceDatetime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *PaymentAttributes) validatePaymentScheme(formats strfmt.Registry) error {

	if swag.IsZero(m.PaymentScheme) { // not required
		return nil
	}

	if err := validate.Pattern("payment_scheme", "body", m.PaymentScheme, `^[A-Za-z_]*$`); err != nil {
		return err
	}

	return nil
}

func (m *PaymentAttributes) validateProcessingDate(formats strfmt.Registry) error {

	if swag.IsZero(m.ProcessingDate) { // not required
		return nil
	}

	if err := validate.FormatOf("processing_date", "body", "date", m.ProcessingDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *PaymentAttributes) validateReceiversCorrespondent(formats strfmt.Registry) error {

	if swag.IsZero(m.ReceiversCorrespondent) { // not required
		return nil
	}

	if m.ReceiversCorrespondent != nil {
		if err := m.ReceiversCorrespondent.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("receivers_correspondent")
			}
			return err
		}
	}

	return nil
}

func (m *PaymentAttributes) validateReferences(formats strfmt.Registry) error {

	if swag.IsZero(m.References) { // not required
		return nil
	}

	for i := 0; i < len(m.References); i++ {
		if swag.IsZero(m.References[i]) { // not required
			continue
		}

		if m.References[i] != nil {
			if err := m.References[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("references" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PaymentAttributes) validateReimbursement(formats strfmt.Registry) error {

	if swag.IsZero(m.Reimbursement) { // not required
		return nil
	}

	if m.Reimbursement != nil {
		if err := m.Reimbursement.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("reimbursement")
			}
			return err
		}
	}

	return nil
}

func (m *PaymentAttributes) validateSchemeProcessingDate(formats strfmt.Registry) error {

	if swag.IsZero(m.SchemeProcessingDate) { // not required
		return nil
	}

	if err := validate.FormatOf("scheme_processing_date", "body", "date", m.SchemeProcessingDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *PaymentAttributes) validateSendersCorrespondent(formats strfmt.Registry) error {

	if swag.IsZero(m.SendersCorrespondent) { // not required
		return nil
	}

	if m.SendersCorrespondent != nil {
		if err := m.SendersCorrespondent.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("senders_correspondent")
			}
			return err
		}
	}

	return nil
}

func (m *PaymentAttributes) validateSettlement(formats strfmt.Registry) error {

	if swag.IsZero(m.Settlement) { // not required
		return nil
	}

	if m.Settlement != nil {
		if err := m.Settlement.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("settlement")
			}
			return err
		}
	}

	return nil
}

func (m *PaymentAttributes) validateStructuredReference(formats strfmt.Registry) error {

	if swag.IsZero(m.StructuredReference) { // not required
		return nil
	}

	if m.StructuredReference != nil {
		if err := m.StructuredReference.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("structured_reference")
			}
			return err
		}
	}

	return nil
}

func (m *PaymentAttributes) validateSwift(formats strfmt.Registry) error {

	if swag.IsZero(m.Swift) { // not required
		return nil
	}

	if m.Swift != nil {
		if err := m.Swift.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("swift")
			}
			return err
		}
	}

	return nil
}

func (m *PaymentAttributes) validateUltimateBeneficiary(formats strfmt.Registry) error {

	if swag.IsZero(m.UltimateBeneficiary) { // not required
		return nil
	}

	if m.UltimateBeneficiary != nil {
		if err := m.UltimateBeneficiary.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ultimate_beneficiary")
			}
			return err
		}
	}

	return nil
}

func (m *PaymentAttributes) validateUltimateDebtor(formats strfmt.Registry) error {

	if swag.IsZero(m.UltimateDebtor) { // not required
		return nil
	}

	if m.UltimateDebtor != nil {
		if err := m.UltimateDebtor.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ultimate_debtor")
			}
			return err
		}
	}

	return nil
}

func (m *PaymentAttributes) validateUserDefinedData(formats strfmt.Registry) error {

	if swag.IsZero(m.UserDefinedData) { // not required
		return nil
	}

	iUserDefinedDataSize := int64(len(m.UserDefinedData))

	if err := validate.MaxItems("user_defined_data", "body", iUserDefinedDataSize, 10); err != nil {
		return err
	}

	for i := 0; i < len(m.UserDefinedData); i++ {
		if swag.IsZero(m.UserDefinedData[i]) { // not required
			continue
		}

		if m.UserDefinedData[i] != nil {
			if err := m.UserDefinedData[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("user_defined_data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *PaymentAttributes) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PaymentAttributes) UnmarshalBinary(b []byte) error {
	var res PaymentAttributes
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
func (m *PaymentAttributes) Json() string {
	json, err := json.MarshalIndent(m, "  ", "  ")
	if err != nil {
		log.Fatal(err)
	}
	return string(json)
}

// PaymentAttributesBeneficiaryParty payment attributes beneficiary party
// swagger:model PaymentAttributesBeneficiaryParty
type PaymentAttributesBeneficiaryParty struct {

	// Name of beneficiary as given with account
	AccountName string `json:"account_name,omitempty"`

	// Beneficiary account number
	AccountNumber string `json:"account_number,omitempty"`

	// account number code
	AccountNumberCode AccountNumberCode `json:"account_number_code,omitempty"`

	// account proxy
	AccountProxy *BeneficiaryDebtorAccountProxy `json:"account_proxy,omitempty"`

	// The type of the account given with `beneficiary_party.account_number`. Single digit number. Only required if requested by the beneficiary party. Defaults to 0.
	AccountType int64 `json:"account_type"`

	// ISO20022 four character account type code, or a proprietary equivalent
	AccountTypeCode string `json:"account_type_code,omitempty"`

	// account with
	AccountWith *BeneficiaryDebtorAccountHoldingEntity `json:"account_with,omitempty"`

	// Additional address line of the beneficiary address
	AdditionalAddressLine string `json:"additional_address_line,omitempty"`

	// Beneficiary address
	Address []string `json:"address,omitempty"`

	// Beneficiary birth city
	BirthCity string `json:"birth_city,omitempty"`

	// Beneficiary birth country, ISO 3166 format country code
	BirthCountry string `json:"birth_country,omitempty"`

	// Beneficiary birth date. Formatted according to ISO 8601 format: YYYY-MM-DD
	// Format: date
	BirthDate *strfmt.Date `json:"birth_date,omitempty"`

	// Beneficiary birth province
	BirthProvince string `json:"birth_province,omitempty"`

	// Building number of the beneficiary address
	BuildingNumber string `json:"building_number,omitempty"`

	// City/Town of the Beneficiary address
	City string `json:"city,omitempty"`

	// Country of the beneficiary address, ISO 3166 format country code
	Country string `json:"country,omitempty"`

	// Country of residence of the beneficiary party, ISO 3166 format country code
	CountryOfResidence string `json:"country_of_residence,omitempty"`

	// Beneficiary name
	Name string `json:"name,omitempty"`

	// Organisation identification of a beneficiary, used in the case that the beneficiary is an organisation and not a private person
	OrganisationIdentification string `json:"organisation_identification,omitempty"`

	// The code that specifies the type of `organisation_identification`
	OrganisationIdentificationCode string `json:"organisation_identification_code,omitempty"`

	// Issuer of the `organisation_identification`
	OrganisationIdentificationIssuer string `json:"organisation_identification_issuer,omitempty"`

	// The code that specifies the scheme of `organisation_identification`
	OrganisationIdentificationScheme string `json:"organisation_identification_scheme,omitempty"`

	// Array for additional ID(s) of beneficiary organisation
	OrganisationIdentifications []*BeneficiaryDebtorOrganisationIdentification `json:"organisation_identifications,omitempty"`

	// Post code of the beneficiary address
	PostCode string `json:"post_code,omitempty"`

	// Beneficiary postal address
	PostalAddress *PostalAddress `json:"postal_address,omitempty"`

	// private identification
	PrivateIdentification *PrivateIdentification `json:"private_identification,omitempty"`

	// Province of the beneficiary address
	Province string `json:"province,omitempty"`

	// Street name of the beneficiary address
	StreetName string `json:"street_name,omitempty"`

	// Beneficiary phone number
	TelephoneNumber string `json:"telephone_number,omitempty"`
}

func PaymentAttributesBeneficiaryPartyWithDefaults(defaults client.Defaults) *PaymentAttributesBeneficiaryParty {
	return &PaymentAttributesBeneficiaryParty{

		AccountName: defaults.GetString("PaymentAttributesBeneficiaryParty", "account_name"),

		AccountNumber: defaults.GetString("PaymentAttributesBeneficiaryParty", "account_number"),

		// TODO AccountNumberCode: AccountNumberCode,

		AccountProxy: BeneficiaryDebtorAccountProxyWithDefaults(defaults),

		AccountType: defaults.GetInt64("PaymentAttributesBeneficiaryParty", "account_type"),

		AccountTypeCode: defaults.GetString("PaymentAttributesBeneficiaryParty", "account_type_code"),

		AccountWith: BeneficiaryDebtorAccountHoldingEntityWithDefaults(defaults),

		AdditionalAddressLine: defaults.GetString("PaymentAttributesBeneficiaryParty", "additional_address_line"),

		Address: make([]string, 0),

		BirthCity: defaults.GetString("PaymentAttributesBeneficiaryParty", "birth_city"),

		BirthCountry: defaults.GetString("PaymentAttributesBeneficiaryParty", "birth_country"),

		BirthDate: defaults.GetStrfmtDatePtr("PaymentAttributesBeneficiaryParty", "birth_date"),

		BirthProvince: defaults.GetString("PaymentAttributesBeneficiaryParty", "birth_province"),

		BuildingNumber: defaults.GetString("PaymentAttributesBeneficiaryParty", "building_number"),

		City: defaults.GetString("PaymentAttributesBeneficiaryParty", "city"),

		Country: defaults.GetString("PaymentAttributesBeneficiaryParty", "country"),

		CountryOfResidence: defaults.GetString("PaymentAttributesBeneficiaryParty", "country_of_residence"),

		Name: defaults.GetString("PaymentAttributesBeneficiaryParty", "name"),

		OrganisationIdentification: defaults.GetString("PaymentAttributesBeneficiaryParty", "organisation_identification"),

		OrganisationIdentificationCode: defaults.GetString("PaymentAttributesBeneficiaryParty", "organisation_identification_code"),

		OrganisationIdentificationIssuer: defaults.GetString("PaymentAttributesBeneficiaryParty", "organisation_identification_issuer"),

		OrganisationIdentificationScheme: defaults.GetString("PaymentAttributesBeneficiaryParty", "organisation_identification_scheme"),

		OrganisationIdentifications: make([]*BeneficiaryDebtorOrganisationIdentification, 0),

		PostCode: defaults.GetString("PaymentAttributesBeneficiaryParty", "post_code"),

		PostalAddress: PostalAddressWithDefaults(defaults),

		PrivateIdentification: PrivateIdentificationWithDefaults(defaults),

		Province: defaults.GetString("PaymentAttributesBeneficiaryParty", "province"),

		StreetName: defaults.GetString("PaymentAttributesBeneficiaryParty", "street_name"),

		TelephoneNumber: defaults.GetString("PaymentAttributesBeneficiaryParty", "telephone_number"),
	}
}

func (m *PaymentAttributesBeneficiaryParty) WithAccountName(accountName string) *PaymentAttributesBeneficiaryParty {

	m.AccountName = accountName

	return m
}

func (m *PaymentAttributesBeneficiaryParty) WithAccountNumber(accountNumber string) *PaymentAttributesBeneficiaryParty {

	m.AccountNumber = accountNumber

	return m
}

func (m *PaymentAttributesBeneficiaryParty) WithAccountNumberCode(accountNumberCode AccountNumberCode) *PaymentAttributesBeneficiaryParty {

	m.AccountNumberCode = accountNumberCode

	return m
}

func (m *PaymentAttributesBeneficiaryParty) WithAccountProxy(accountProxy BeneficiaryDebtorAccountProxy) *PaymentAttributesBeneficiaryParty {

	m.AccountProxy = &accountProxy

	return m
}

func (m *PaymentAttributesBeneficiaryParty) WithoutAccountProxy() *PaymentAttributesBeneficiaryParty {
	m.AccountProxy = nil
	return m
}

func (m *PaymentAttributesBeneficiaryParty) WithAccountType(accountType int64) *PaymentAttributesBeneficiaryParty {

	m.AccountType = accountType

	return m
}

func (m *PaymentAttributesBeneficiaryParty) WithAccountTypeCode(accountTypeCode string) *PaymentAttributesBeneficiaryParty {

	m.AccountTypeCode = accountTypeCode

	return m
}

func (m *PaymentAttributesBeneficiaryParty) WithAccountWith(accountWith BeneficiaryDebtorAccountHoldingEntity) *PaymentAttributesBeneficiaryParty {

	m.AccountWith = &accountWith

	return m
}

func (m *PaymentAttributesBeneficiaryParty) WithoutAccountWith() *PaymentAttributesBeneficiaryParty {
	m.AccountWith = nil
	return m
}

func (m *PaymentAttributesBeneficiaryParty) WithAdditionalAddressLine(additionalAddressLine string) *PaymentAttributesBeneficiaryParty {

	m.AdditionalAddressLine = additionalAddressLine

	return m
}

func (m *PaymentAttributesBeneficiaryParty) WithAddress(address []string) *PaymentAttributesBeneficiaryParty {

	m.Address = address

	return m
}

func (m *PaymentAttributesBeneficiaryParty) WithBirthCity(birthCity string) *PaymentAttributesBeneficiaryParty {

	m.BirthCity = birthCity

	return m
}

func (m *PaymentAttributesBeneficiaryParty) WithBirthCountry(birthCountry string) *PaymentAttributesBeneficiaryParty {

	m.BirthCountry = birthCountry

	return m
}

func (m *PaymentAttributesBeneficiaryParty) WithBirthDate(birthDate strfmt.Date) *PaymentAttributesBeneficiaryParty {

	m.BirthDate = &birthDate

	return m
}

func (m *PaymentAttributesBeneficiaryParty) WithoutBirthDate() *PaymentAttributesBeneficiaryParty {
	m.BirthDate = nil
	return m
}

func (m *PaymentAttributesBeneficiaryParty) WithBirthProvince(birthProvince string) *PaymentAttributesBeneficiaryParty {

	m.BirthProvince = birthProvince

	return m
}

func (m *PaymentAttributesBeneficiaryParty) WithBuildingNumber(buildingNumber string) *PaymentAttributesBeneficiaryParty {

	m.BuildingNumber = buildingNumber

	return m
}

func (m *PaymentAttributesBeneficiaryParty) WithCity(city string) *PaymentAttributesBeneficiaryParty {

	m.City = city

	return m
}

func (m *PaymentAttributesBeneficiaryParty) WithCountry(country string) *PaymentAttributesBeneficiaryParty {

	m.Country = country

	return m
}

func (m *PaymentAttributesBeneficiaryParty) WithCountryOfResidence(countryOfResidence string) *PaymentAttributesBeneficiaryParty {

	m.CountryOfResidence = countryOfResidence

	return m
}

func (m *PaymentAttributesBeneficiaryParty) WithName(name string) *PaymentAttributesBeneficiaryParty {

	m.Name = name

	return m
}

func (m *PaymentAttributesBeneficiaryParty) WithOrganisationIdentification(organisationIdentification string) *PaymentAttributesBeneficiaryParty {

	m.OrganisationIdentification = organisationIdentification

	return m
}

func (m *PaymentAttributesBeneficiaryParty) WithOrganisationIdentificationCode(organisationIdentificationCode string) *PaymentAttributesBeneficiaryParty {

	m.OrganisationIdentificationCode = organisationIdentificationCode

	return m
}

func (m *PaymentAttributesBeneficiaryParty) WithOrganisationIdentificationIssuer(organisationIdentificationIssuer string) *PaymentAttributesBeneficiaryParty {

	m.OrganisationIdentificationIssuer = organisationIdentificationIssuer

	return m
}

func (m *PaymentAttributesBeneficiaryParty) WithOrganisationIdentificationScheme(organisationIdentificationScheme string) *PaymentAttributesBeneficiaryParty {

	m.OrganisationIdentificationScheme = organisationIdentificationScheme

	return m
}

func (m *PaymentAttributesBeneficiaryParty) WithOrganisationIdentifications(organisationIdentifications []*BeneficiaryDebtorOrganisationIdentification) *PaymentAttributesBeneficiaryParty {

	m.OrganisationIdentifications = organisationIdentifications

	return m
}

func (m *PaymentAttributesBeneficiaryParty) WithPostCode(postCode string) *PaymentAttributesBeneficiaryParty {

	m.PostCode = postCode

	return m
}

func (m *PaymentAttributesBeneficiaryParty) WithPostalAddress(postalAddress PostalAddress) *PaymentAttributesBeneficiaryParty {

	m.PostalAddress = &postalAddress

	return m
}

func (m *PaymentAttributesBeneficiaryParty) WithoutPostalAddress() *PaymentAttributesBeneficiaryParty {
	m.PostalAddress = nil
	return m
}

func (m *PaymentAttributesBeneficiaryParty) WithPrivateIdentification(privateIdentification PrivateIdentification) *PaymentAttributesBeneficiaryParty {

	m.PrivateIdentification = &privateIdentification

	return m
}

func (m *PaymentAttributesBeneficiaryParty) WithoutPrivateIdentification() *PaymentAttributesBeneficiaryParty {
	m.PrivateIdentification = nil
	return m
}

func (m *PaymentAttributesBeneficiaryParty) WithProvince(province string) *PaymentAttributesBeneficiaryParty {

	m.Province = province

	return m
}

func (m *PaymentAttributesBeneficiaryParty) WithStreetName(streetName string) *PaymentAttributesBeneficiaryParty {

	m.StreetName = streetName

	return m
}

func (m *PaymentAttributesBeneficiaryParty) WithTelephoneNumber(telephoneNumber string) *PaymentAttributesBeneficiaryParty {

	m.TelephoneNumber = telephoneNumber

	return m
}

// Validate validates this payment attributes beneficiary party
func (m *PaymentAttributesBeneficiaryParty) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccountNumberCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAccountProxy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAccountWith(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBirthDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrganisationIdentifications(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePostalAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrivateIdentification(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PaymentAttributesBeneficiaryParty) validateAccountNumberCode(formats strfmt.Registry) error {

	if swag.IsZero(m.AccountNumberCode) { // not required
		return nil
	}

	if err := m.AccountNumberCode.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("beneficiary_party" + "." + "account_number_code")
		}
		return err
	}

	return nil
}

func (m *PaymentAttributesBeneficiaryParty) validateAccountProxy(formats strfmt.Registry) error {

	if swag.IsZero(m.AccountProxy) { // not required
		return nil
	}

	if m.AccountProxy != nil {
		if err := m.AccountProxy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("beneficiary_party" + "." + "account_proxy")
			}
			return err
		}
	}

	return nil
}

func (m *PaymentAttributesBeneficiaryParty) validateAccountWith(formats strfmt.Registry) error {

	if swag.IsZero(m.AccountWith) { // not required
		return nil
	}

	if m.AccountWith != nil {
		if err := m.AccountWith.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("beneficiary_party" + "." + "account_with")
			}
			return err
		}
	}

	return nil
}

func (m *PaymentAttributesBeneficiaryParty) validateBirthDate(formats strfmt.Registry) error {

	if swag.IsZero(m.BirthDate) { // not required
		return nil
	}

	if err := validate.FormatOf("beneficiary_party"+"."+"birth_date", "body", "date", m.BirthDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *PaymentAttributesBeneficiaryParty) validateOrganisationIdentifications(formats strfmt.Registry) error {

	if swag.IsZero(m.OrganisationIdentifications) { // not required
		return nil
	}

	for i := 0; i < len(m.OrganisationIdentifications); i++ {
		if swag.IsZero(m.OrganisationIdentifications[i]) { // not required
			continue
		}

		if m.OrganisationIdentifications[i] != nil {
			if err := m.OrganisationIdentifications[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("beneficiary_party" + "." + "organisation_identifications" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PaymentAttributesBeneficiaryParty) validatePostalAddress(formats strfmt.Registry) error {

	if swag.IsZero(m.PostalAddress) { // not required
		return nil
	}

	if m.PostalAddress != nil {
		if err := m.PostalAddress.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("beneficiary_party" + "." + "postal_address")
			}
			return err
		}
	}

	return nil
}

func (m *PaymentAttributesBeneficiaryParty) validatePrivateIdentification(formats strfmt.Registry) error {

	if swag.IsZero(m.PrivateIdentification) { // not required
		return nil
	}

	if m.PrivateIdentification != nil {
		if err := m.PrivateIdentification.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("beneficiary_party" + "." + "private_identification")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PaymentAttributesBeneficiaryParty) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PaymentAttributesBeneficiaryParty) UnmarshalBinary(b []byte) error {
	var res PaymentAttributesBeneficiaryParty
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
func (m *PaymentAttributesBeneficiaryParty) Json() string {
	json, err := json.MarshalIndent(m, "  ", "  ")
	if err != nil {
		log.Fatal(err)
	}
	return string(json)
}

// PaymentAttributesDebtorParty payment attributes debtor party
// swagger:model PaymentAttributesDebtorParty
type PaymentAttributesDebtorParty struct {

	// Name of debtor as given with account
	AccountName string `json:"account_name,omitempty"`

	// Debtor account number. Allows upper case and numeric characters.
	AccountNumber string `json:"account_number,omitempty"`

	// account number code
	AccountNumberCode AccountNumberCode `json:"account_number_code,omitempty"`

	// account proxy
	AccountProxy *BeneficiaryDebtorAccountProxy `json:"account_proxy,omitempty"`

	// account with
	AccountWith *BeneficiaryDebtorAccountHoldingEntity `json:"account_with,omitempty"`

	// Additional address line of the Debtor address
	AdditionalAddressLine string `json:"additional_address_line,omitempty"`

	// Debtor address
	Address []string `json:"address,omitempty"`

	// Debtor birth city
	BirthCity string `json:"birth_city,omitempty"`

	// Debtor birth country. ISO 3166 format country code
	BirthCountry string `json:"birth_country,omitempty"`

	// Debtor birth date. Formatted according to ISO 8601 format: YYYY-MM-DD
	// Format: date
	BirthDate *strfmt.Date `json:"birth_date,omitempty"`

	// Debtor birth province
	BirthProvince string `json:"birth_province,omitempty"`

	// Building number of the Debtor address
	BuildingNumber string `json:"building_number,omitempty"`

	// City/Town of the Debtor address
	City string `json:"city,omitempty"`

	// Country of debtor address. ISO 3166 format country code"
	Country string `json:"country,omitempty"`

	// Country of residence of the debtor party, ISO 3166 format country code
	CountryOfResidence string `json:"country_of_residence,omitempty"`

	// SWIFT BIC for ordering customer, either BIC8 or BIC11
	CustomerID string `json:"customer_id,omitempty"`

	// Code for `customer_id`
	CustomerIDCode string `json:"customer_id_code,omitempty"`

	// Debtor name
	Name string `json:"name,omitempty"`

	// Organisation identification of a debtor, in the case that the debtor is an organisation and not a private person
	OrganisationIdentification string `json:"organisation_identification,omitempty"`

	// The code that specifies the type of `organisation_identification`
	OrganisationIdentificationCode string `json:"organisation_identification_code,omitempty"`

	// Issuer of the `organisation_identification`
	OrganisationIdentificationIssuer string `json:"organisation_identification_issuer,omitempty"`

	// The code that specifies the scheme of `organisation_identification`
	OrganisationIdentificationScheme string `json:"organisation_identification_scheme,omitempty"`

	// Array for additional ID(s) of debtor organisation
	OrganisationIdentifications []*BeneficiaryDebtorOrganisationIdentification `json:"organisation_identifications,omitempty"`

	// Post code of the Debtor address
	PostCode string `json:"post_code,omitempty"`

	// Debtor postal address
	PostalAddress *PostalAddress `json:"postal_address,omitempty"`

	// private identification
	PrivateIdentification *PrivateIdentification `json:"private_identification,omitempty"`

	// Province of the Debtor address
	Province string `json:"province,omitempty"`

	// Street name of the Debtor address
	StreetName string `json:"street_name,omitempty"`
}

func PaymentAttributesDebtorPartyWithDefaults(defaults client.Defaults) *PaymentAttributesDebtorParty {
	return &PaymentAttributesDebtorParty{

		AccountName: defaults.GetString("PaymentAttributesDebtorParty", "account_name"),

		AccountNumber: defaults.GetString("PaymentAttributesDebtorParty", "account_number"),

		// TODO AccountNumberCode: AccountNumberCode,

		AccountProxy: BeneficiaryDebtorAccountProxyWithDefaults(defaults),

		AccountWith: BeneficiaryDebtorAccountHoldingEntityWithDefaults(defaults),

		AdditionalAddressLine: defaults.GetString("PaymentAttributesDebtorParty", "additional_address_line"),

		Address: make([]string, 0),

		BirthCity: defaults.GetString("PaymentAttributesDebtorParty", "birth_city"),

		BirthCountry: defaults.GetString("PaymentAttributesDebtorParty", "birth_country"),

		BirthDate: defaults.GetStrfmtDatePtr("PaymentAttributesDebtorParty", "birth_date"),

		BirthProvince: defaults.GetString("PaymentAttributesDebtorParty", "birth_province"),

		BuildingNumber: defaults.GetString("PaymentAttributesDebtorParty", "building_number"),

		City: defaults.GetString("PaymentAttributesDebtorParty", "city"),

		Country: defaults.GetString("PaymentAttributesDebtorParty", "country"),

		CountryOfResidence: defaults.GetString("PaymentAttributesDebtorParty", "country_of_residence"),

		CustomerID: defaults.GetString("PaymentAttributesDebtorParty", "customer_id"),

		CustomerIDCode: defaults.GetString("PaymentAttributesDebtorParty", "customer_id_code"),

		Name: defaults.GetString("PaymentAttributesDebtorParty", "name"),

		OrganisationIdentification: defaults.GetString("PaymentAttributesDebtorParty", "organisation_identification"),

		OrganisationIdentificationCode: defaults.GetString("PaymentAttributesDebtorParty", "organisation_identification_code"),

		OrganisationIdentificationIssuer: defaults.GetString("PaymentAttributesDebtorParty", "organisation_identification_issuer"),

		OrganisationIdentificationScheme: defaults.GetString("PaymentAttributesDebtorParty", "organisation_identification_scheme"),

		OrganisationIdentifications: make([]*BeneficiaryDebtorOrganisationIdentification, 0),

		PostCode: defaults.GetString("PaymentAttributesDebtorParty", "post_code"),

		PostalAddress: PostalAddressWithDefaults(defaults),

		PrivateIdentification: PrivateIdentificationWithDefaults(defaults),

		Province: defaults.GetString("PaymentAttributesDebtorParty", "province"),

		StreetName: defaults.GetString("PaymentAttributesDebtorParty", "street_name"),
	}
}

func (m *PaymentAttributesDebtorParty) WithAccountName(accountName string) *PaymentAttributesDebtorParty {

	m.AccountName = accountName

	return m
}

func (m *PaymentAttributesDebtorParty) WithAccountNumber(accountNumber string) *PaymentAttributesDebtorParty {

	m.AccountNumber = accountNumber

	return m
}

func (m *PaymentAttributesDebtorParty) WithAccountNumberCode(accountNumberCode AccountNumberCode) *PaymentAttributesDebtorParty {

	m.AccountNumberCode = accountNumberCode

	return m
}

func (m *PaymentAttributesDebtorParty) WithAccountProxy(accountProxy BeneficiaryDebtorAccountProxy) *PaymentAttributesDebtorParty {

	m.AccountProxy = &accountProxy

	return m
}

func (m *PaymentAttributesDebtorParty) WithoutAccountProxy() *PaymentAttributesDebtorParty {
	m.AccountProxy = nil
	return m
}

func (m *PaymentAttributesDebtorParty) WithAccountWith(accountWith BeneficiaryDebtorAccountHoldingEntity) *PaymentAttributesDebtorParty {

	m.AccountWith = &accountWith

	return m
}

func (m *PaymentAttributesDebtorParty) WithoutAccountWith() *PaymentAttributesDebtorParty {
	m.AccountWith = nil
	return m
}

func (m *PaymentAttributesDebtorParty) WithAdditionalAddressLine(additionalAddressLine string) *PaymentAttributesDebtorParty {

	m.AdditionalAddressLine = additionalAddressLine

	return m
}

func (m *PaymentAttributesDebtorParty) WithAddress(address []string) *PaymentAttributesDebtorParty {

	m.Address = address

	return m
}

func (m *PaymentAttributesDebtorParty) WithBirthCity(birthCity string) *PaymentAttributesDebtorParty {

	m.BirthCity = birthCity

	return m
}

func (m *PaymentAttributesDebtorParty) WithBirthCountry(birthCountry string) *PaymentAttributesDebtorParty {

	m.BirthCountry = birthCountry

	return m
}

func (m *PaymentAttributesDebtorParty) WithBirthDate(birthDate strfmt.Date) *PaymentAttributesDebtorParty {

	m.BirthDate = &birthDate

	return m
}

func (m *PaymentAttributesDebtorParty) WithoutBirthDate() *PaymentAttributesDebtorParty {
	m.BirthDate = nil
	return m
}

func (m *PaymentAttributesDebtorParty) WithBirthProvince(birthProvince string) *PaymentAttributesDebtorParty {

	m.BirthProvince = birthProvince

	return m
}

func (m *PaymentAttributesDebtorParty) WithBuildingNumber(buildingNumber string) *PaymentAttributesDebtorParty {

	m.BuildingNumber = buildingNumber

	return m
}

func (m *PaymentAttributesDebtorParty) WithCity(city string) *PaymentAttributesDebtorParty {

	m.City = city

	return m
}

func (m *PaymentAttributesDebtorParty) WithCountry(country string) *PaymentAttributesDebtorParty {

	m.Country = country

	return m
}

func (m *PaymentAttributesDebtorParty) WithCountryOfResidence(countryOfResidence string) *PaymentAttributesDebtorParty {

	m.CountryOfResidence = countryOfResidence

	return m
}

func (m *PaymentAttributesDebtorParty) WithCustomerID(customerID string) *PaymentAttributesDebtorParty {

	m.CustomerID = customerID

	return m
}

func (m *PaymentAttributesDebtorParty) WithCustomerIDCode(customerIDCode string) *PaymentAttributesDebtorParty {

	m.CustomerIDCode = customerIDCode

	return m
}

func (m *PaymentAttributesDebtorParty) WithName(name string) *PaymentAttributesDebtorParty {

	m.Name = name

	return m
}

func (m *PaymentAttributesDebtorParty) WithOrganisationIdentification(organisationIdentification string) *PaymentAttributesDebtorParty {

	m.OrganisationIdentification = organisationIdentification

	return m
}

func (m *PaymentAttributesDebtorParty) WithOrganisationIdentificationCode(organisationIdentificationCode string) *PaymentAttributesDebtorParty {

	m.OrganisationIdentificationCode = organisationIdentificationCode

	return m
}

func (m *PaymentAttributesDebtorParty) WithOrganisationIdentificationIssuer(organisationIdentificationIssuer string) *PaymentAttributesDebtorParty {

	m.OrganisationIdentificationIssuer = organisationIdentificationIssuer

	return m
}

func (m *PaymentAttributesDebtorParty) WithOrganisationIdentificationScheme(organisationIdentificationScheme string) *PaymentAttributesDebtorParty {

	m.OrganisationIdentificationScheme = organisationIdentificationScheme

	return m
}

func (m *PaymentAttributesDebtorParty) WithOrganisationIdentifications(organisationIdentifications []*BeneficiaryDebtorOrganisationIdentification) *PaymentAttributesDebtorParty {

	m.OrganisationIdentifications = organisationIdentifications

	return m
}

func (m *PaymentAttributesDebtorParty) WithPostCode(postCode string) *PaymentAttributesDebtorParty {

	m.PostCode = postCode

	return m
}

func (m *PaymentAttributesDebtorParty) WithPostalAddress(postalAddress PostalAddress) *PaymentAttributesDebtorParty {

	m.PostalAddress = &postalAddress

	return m
}

func (m *PaymentAttributesDebtorParty) WithoutPostalAddress() *PaymentAttributesDebtorParty {
	m.PostalAddress = nil
	return m
}

func (m *PaymentAttributesDebtorParty) WithPrivateIdentification(privateIdentification PrivateIdentification) *PaymentAttributesDebtorParty {

	m.PrivateIdentification = &privateIdentification

	return m
}

func (m *PaymentAttributesDebtorParty) WithoutPrivateIdentification() *PaymentAttributesDebtorParty {
	m.PrivateIdentification = nil
	return m
}

func (m *PaymentAttributesDebtorParty) WithProvince(province string) *PaymentAttributesDebtorParty {

	m.Province = province

	return m
}

func (m *PaymentAttributesDebtorParty) WithStreetName(streetName string) *PaymentAttributesDebtorParty {

	m.StreetName = streetName

	return m
}

// Validate validates this payment attributes debtor party
func (m *PaymentAttributesDebtorParty) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccountNumberCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAccountProxy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAccountWith(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBirthDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrganisationIdentifications(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePostalAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrivateIdentification(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PaymentAttributesDebtorParty) validateAccountNumberCode(formats strfmt.Registry) error {

	if swag.IsZero(m.AccountNumberCode) { // not required
		return nil
	}

	if err := m.AccountNumberCode.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("debtor_party" + "." + "account_number_code")
		}
		return err
	}

	return nil
}

func (m *PaymentAttributesDebtorParty) validateAccountProxy(formats strfmt.Registry) error {

	if swag.IsZero(m.AccountProxy) { // not required
		return nil
	}

	if m.AccountProxy != nil {
		if err := m.AccountProxy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("debtor_party" + "." + "account_proxy")
			}
			return err
		}
	}

	return nil
}

func (m *PaymentAttributesDebtorParty) validateAccountWith(formats strfmt.Registry) error {

	if swag.IsZero(m.AccountWith) { // not required
		return nil
	}

	if m.AccountWith != nil {
		if err := m.AccountWith.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("debtor_party" + "." + "account_with")
			}
			return err
		}
	}

	return nil
}

func (m *PaymentAttributesDebtorParty) validateBirthDate(formats strfmt.Registry) error {

	if swag.IsZero(m.BirthDate) { // not required
		return nil
	}

	if err := validate.FormatOf("debtor_party"+"."+"birth_date", "body", "date", m.BirthDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *PaymentAttributesDebtorParty) validateOrganisationIdentifications(formats strfmt.Registry) error {

	if swag.IsZero(m.OrganisationIdentifications) { // not required
		return nil
	}

	for i := 0; i < len(m.OrganisationIdentifications); i++ {
		if swag.IsZero(m.OrganisationIdentifications[i]) { // not required
			continue
		}

		if m.OrganisationIdentifications[i] != nil {
			if err := m.OrganisationIdentifications[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("debtor_party" + "." + "organisation_identifications" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PaymentAttributesDebtorParty) validatePostalAddress(formats strfmt.Registry) error {

	if swag.IsZero(m.PostalAddress) { // not required
		return nil
	}

	if m.PostalAddress != nil {
		if err := m.PostalAddress.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("debtor_party" + "." + "postal_address")
			}
			return err
		}
	}

	return nil
}

func (m *PaymentAttributesDebtorParty) validatePrivateIdentification(formats strfmt.Registry) error {

	if swag.IsZero(m.PrivateIdentification) { // not required
		return nil
	}

	if m.PrivateIdentification != nil {
		if err := m.PrivateIdentification.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("debtor_party" + "." + "private_identification")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PaymentAttributesDebtorParty) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PaymentAttributesDebtorParty) UnmarshalBinary(b []byte) error {
	var res PaymentAttributesDebtorParty
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
func (m *PaymentAttributesDebtorParty) Json() string {
	json, err := json.MarshalIndent(m, "  ", "  ")
	if err != nil {
		log.Fatal(err)
	}
	return string(json)
}

// PaymentAttributesFx payment attributes fx
// swagger:model PaymentAttributesFx
type PaymentAttributesFx struct {

	// Reference to the foreign exchange contract associated with the transaction
	ContractReference string `json:"contract_reference,omitempty"`

	// Factor used to convert an amount from the instructed currency into the transaction currency: i.e. to convert the `fx.original_amount`, expressed in the `fx.original_currency`, to `amount` specified in `currency`. Decimal value, represented as a string, maximum length 12. Must be > 0.
	ExchangeRate string `json:"exchange_rate,omitempty"`

	// Amount of money to be moved between the debtor and creditor, before deduction of charges, expressed in the currency as instructed by the initiating party. Decimal value. Must be > 0.
	OriginalAmount string `json:"original_amount,omitempty"`

	// Currency of `original_amount`. Currency code as defined in ISO 4217.
	OriginalCurrency string `json:"original_currency,omitempty"`
}

func PaymentAttributesFxWithDefaults(defaults client.Defaults) *PaymentAttributesFx {
	return &PaymentAttributesFx{

		ContractReference: defaults.GetString("PaymentAttributesFx", "contract_reference"),

		ExchangeRate: defaults.GetString("PaymentAttributesFx", "exchange_rate"),

		OriginalAmount: defaults.GetString("PaymentAttributesFx", "original_amount"),

		OriginalCurrency: defaults.GetString("PaymentAttributesFx", "original_currency"),
	}
}

func (m *PaymentAttributesFx) WithContractReference(contractReference string) *PaymentAttributesFx {

	m.ContractReference = contractReference

	return m
}

func (m *PaymentAttributesFx) WithExchangeRate(exchangeRate string) *PaymentAttributesFx {

	m.ExchangeRate = exchangeRate

	return m
}

func (m *PaymentAttributesFx) WithOriginalAmount(originalAmount string) *PaymentAttributesFx {

	m.OriginalAmount = originalAmount

	return m
}

func (m *PaymentAttributesFx) WithOriginalCurrency(originalCurrency string) *PaymentAttributesFx {

	m.OriginalCurrency = originalCurrency

	return m
}

// Validate validates this payment attributes fx
func (m *PaymentAttributesFx) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PaymentAttributesFx) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PaymentAttributesFx) UnmarshalBinary(b []byte) error {
	var res PaymentAttributesFx
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
func (m *PaymentAttributesFx) Json() string {
	json, err := json.MarshalIndent(m, "  ", "  ")
	if err != nil {
		log.Fatal(err)
	}
	return string(json)
}

// PaymentAttributesStructuredReference payment attributes structured reference
// swagger:model PaymentAttributesStructuredReference
type PaymentAttributesStructuredReference struct {

	// Issuer of remittance reference
	Issuer string `json:"issuer,omitempty"`

	// Unique reference to unambiguously refer to the payment originated by the creditor, this reference enables reconciliation by the creditor upon receipt of the amount of money.
	Reference string `json:"reference,omitempty"`
}

func PaymentAttributesStructuredReferenceWithDefaults(defaults client.Defaults) *PaymentAttributesStructuredReference {
	return &PaymentAttributesStructuredReference{

		Issuer: defaults.GetString("PaymentAttributesStructuredReference", "issuer"),

		Reference: defaults.GetString("PaymentAttributesStructuredReference", "reference"),
	}
}

func (m *PaymentAttributesStructuredReference) WithIssuer(issuer string) *PaymentAttributesStructuredReference {

	m.Issuer = issuer

	return m
}

func (m *PaymentAttributesStructuredReference) WithReference(reference string) *PaymentAttributesStructuredReference {

	m.Reference = reference

	return m
}

// Validate validates this payment attributes structured reference
func (m *PaymentAttributesStructuredReference) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PaymentAttributesStructuredReference) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PaymentAttributesStructuredReference) UnmarshalBinary(b []byte) error {
	var res PaymentAttributesStructuredReference
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
func (m *PaymentAttributesStructuredReference) Json() string {
	json, err := json.MarshalIndent(m, "  ", "  ")
	if err != nil {
		log.Fatal(err)
	}
	return string(json)
}

// PaymentAttributesSwift payment attributes swift
// swagger:model PaymentAttributesSwift
type PaymentAttributesSwift struct {

	// SWIFT service level
	BankOperationCode string `json:"bank_operation_code,omitempty"`

	// header
	Header *PaymentAttributesSwiftHeader `json:"header,omitempty"`

	// A SWIFT instruction code
	InstructionCode string `json:"instruction_code,omitempty"`

	// This field specifies additional information for the Receiver or other party specified.
	SenderReceiverInformation string `json:"sender_receiver_information,omitempty"`

	// This repetitive field specifies one or several time indication(s) related to the processing of the payment instruction.
	TimeIndication string `json:"time_indication,omitempty"`
}

func PaymentAttributesSwiftWithDefaults(defaults client.Defaults) *PaymentAttributesSwift {
	return &PaymentAttributesSwift{

		BankOperationCode: defaults.GetString("PaymentAttributesSwift", "bank_operation_code"),

		Header: PaymentAttributesSwiftHeaderWithDefaults(defaults),

		InstructionCode: defaults.GetString("PaymentAttributesSwift", "instruction_code"),

		SenderReceiverInformation: defaults.GetString("PaymentAttributesSwift", "sender_receiver_information"),

		TimeIndication: defaults.GetString("PaymentAttributesSwift", "time_indication"),
	}
}

func (m *PaymentAttributesSwift) WithBankOperationCode(bankOperationCode string) *PaymentAttributesSwift {

	m.BankOperationCode = bankOperationCode

	return m
}

func (m *PaymentAttributesSwift) WithHeader(header PaymentAttributesSwiftHeader) *PaymentAttributesSwift {

	m.Header = &header

	return m
}

func (m *PaymentAttributesSwift) WithoutHeader() *PaymentAttributesSwift {
	m.Header = nil
	return m
}

func (m *PaymentAttributesSwift) WithInstructionCode(instructionCode string) *PaymentAttributesSwift {

	m.InstructionCode = instructionCode

	return m
}

func (m *PaymentAttributesSwift) WithSenderReceiverInformation(senderReceiverInformation string) *PaymentAttributesSwift {

	m.SenderReceiverInformation = senderReceiverInformation

	return m
}

func (m *PaymentAttributesSwift) WithTimeIndication(timeIndication string) *PaymentAttributesSwift {

	m.TimeIndication = timeIndication

	return m
}

// Validate validates this payment attributes swift
func (m *PaymentAttributesSwift) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHeader(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PaymentAttributesSwift) validateHeader(formats strfmt.Registry) error {

	if swag.IsZero(m.Header) { // not required
		return nil
	}

	if m.Header != nil {
		if err := m.Header.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("swift" + "." + "header")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PaymentAttributesSwift) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PaymentAttributesSwift) UnmarshalBinary(b []byte) error {
	var res PaymentAttributesSwift
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
func (m *PaymentAttributesSwift) Json() string {
	json, err := json.MarshalIndent(m, "  ", "  ")
	if err != nil {
		log.Fatal(err)
	}
	return string(json)
}

// PaymentAttributesSwiftHeader payment attributes swift header
// swagger:model PaymentAttributesSwiftHeader
type PaymentAttributesSwiftHeader struct {

	// Destination SWIFT logical terminal address. Complete 12-character SWIFT destination, including BIC (x8), logical terminal code (x1) and branch code (x).
	Destination string `json:"destination,omitempty"`

	// The message type of the SWIFT payment, has to match `[A-Z]{2}[0-9]{3}`. Currently `MT103` is the only supported value
	MessageType string `json:"message_type,omitempty"`

	// SWIFT priority. Either `Normal` or `Priority`.
	Priority string `json:"priority,omitempty"`

	// The destination SWIFT BIC for SWIFT MT messages being sent by Form3 client to SWIFT. Formatted as BIC8 or BIC11.
	Recipient string `json:"recipient,omitempty"`

	// The source SWIFT BIC for SWIFT MT messages being received by Form3 client from SWIFT. Formatted as BIC8 or BIC11.
	Source string `json:"source,omitempty"`

	// Message User Reference (MUR) value, which can be up to 16 characters, and will be returned in the ACK
	UserReference string `json:"user_reference,omitempty"`
}

func PaymentAttributesSwiftHeaderWithDefaults(defaults client.Defaults) *PaymentAttributesSwiftHeader {
	return &PaymentAttributesSwiftHeader{

		Destination: defaults.GetString("PaymentAttributesSwiftHeader", "destination"),

		MessageType: defaults.GetString("PaymentAttributesSwiftHeader", "message_type"),

		Priority: defaults.GetString("PaymentAttributesSwiftHeader", "priority"),

		Recipient: defaults.GetString("PaymentAttributesSwiftHeader", "recipient"),

		Source: defaults.GetString("PaymentAttributesSwiftHeader", "source"),

		UserReference: defaults.GetString("PaymentAttributesSwiftHeader", "user_reference"),
	}
}

func (m *PaymentAttributesSwiftHeader) WithDestination(destination string) *PaymentAttributesSwiftHeader {

	m.Destination = destination

	return m
}

func (m *PaymentAttributesSwiftHeader) WithMessageType(messageType string) *PaymentAttributesSwiftHeader {

	m.MessageType = messageType

	return m
}

func (m *PaymentAttributesSwiftHeader) WithPriority(priority string) *PaymentAttributesSwiftHeader {

	m.Priority = priority

	return m
}

func (m *PaymentAttributesSwiftHeader) WithRecipient(recipient string) *PaymentAttributesSwiftHeader {

	m.Recipient = recipient

	return m
}

func (m *PaymentAttributesSwiftHeader) WithSource(source string) *PaymentAttributesSwiftHeader {

	m.Source = source

	return m
}

func (m *PaymentAttributesSwiftHeader) WithUserReference(userReference string) *PaymentAttributesSwiftHeader {

	m.UserReference = userReference

	return m
}

// Validate validates this payment attributes swift header
func (m *PaymentAttributesSwiftHeader) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PaymentAttributesSwiftHeader) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PaymentAttributesSwiftHeader) UnmarshalBinary(b []byte) error {
	var res PaymentAttributesSwiftHeader
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
func (m *PaymentAttributesSwiftHeader) Json() string {
	json, err := json.MarshalIndent(m, "  ", "  ")
	if err != nil {
		log.Fatal(err)
	}
	return string(json)
}
