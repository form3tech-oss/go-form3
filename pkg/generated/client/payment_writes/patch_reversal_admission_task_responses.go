// Code generated by go-swagger; DO NOT EDIT.

package payment_writes

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/form3tech-oss/go-form3/v7/pkg/generated/models"
)

// PatchReversalAdmissionTaskReader is a Reader for the PatchReversalAdmissionTask structure.
type PatchReversalAdmissionTaskReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchReversalAdmissionTaskReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewPatchReversalAdmissionTaskOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewPatchReversalAdmissionTaskBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 409:
		result := NewPatchReversalAdmissionTaskConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewPatchReversalAdmissionTaskOK creates a PatchReversalAdmissionTaskOK with default headers values
func NewPatchReversalAdmissionTaskOK() *PatchReversalAdmissionTaskOK {
	return &PatchReversalAdmissionTaskOK{}
}

/*
PatchReversalAdmissionTaskOK handles this case with default header values.

Reversal Admission Task update response
*/
type PatchReversalAdmissionTaskOK struct {

	//Payload

	// isStream: false
	*models.ReversalAdmissionTaskDetailsResponse
}

func (o *PatchReversalAdmissionTaskOK) Error() string {
	return fmt.Sprintf("[PATCH /transaction/payments/{id}/reversals/{reversalId}/admissions/{admissionId}/tasks/{taskId}][%d] patchReversalAdmissionTaskOK", 200)
}

func (o *PatchReversalAdmissionTaskOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.ReversalAdmissionTaskDetailsResponse = new(models.ReversalAdmissionTaskDetailsResponse)

	// response payload

	if err := consumer.Consume(response.Body(), o.ReversalAdmissionTaskDetailsResponse); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchReversalAdmissionTaskBadRequest creates a PatchReversalAdmissionTaskBadRequest with default headers values
func NewPatchReversalAdmissionTaskBadRequest() *PatchReversalAdmissionTaskBadRequest {
	return &PatchReversalAdmissionTaskBadRequest{}
}

/*
PatchReversalAdmissionTaskBadRequest handles this case with default header values.

Error
*/
type PatchReversalAdmissionTaskBadRequest struct {

	//Payload

	// isStream: false
	*models.APIError
}

func (o *PatchReversalAdmissionTaskBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /transaction/payments/{id}/reversals/{reversalId}/admissions/{admissionId}/tasks/{taskId}][%d] patchReversalAdmissionTaskBadRequest", 400)
}

func (o *PatchReversalAdmissionTaskBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.APIError = new(models.APIError)

	// response payload

	if err := consumer.Consume(response.Body(), o.APIError); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchReversalAdmissionTaskConflict creates a PatchReversalAdmissionTaskConflict with default headers values
func NewPatchReversalAdmissionTaskConflict() *PatchReversalAdmissionTaskConflict {
	return &PatchReversalAdmissionTaskConflict{}
}

/*
PatchReversalAdmissionTaskConflict handles this case with default header values.

Conflict
*/
type PatchReversalAdmissionTaskConflict struct {

	//Payload

	// isStream: false
	*models.APIError
}

func (o *PatchReversalAdmissionTaskConflict) Error() string {
	return fmt.Sprintf("[PATCH /transaction/payments/{id}/reversals/{reversalId}/admissions/{admissionId}/tasks/{taskId}][%d] patchReversalAdmissionTaskConflict", 409)
}

func (o *PatchReversalAdmissionTaskConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.APIError = new(models.APIError)

	// response payload

	if err := consumer.Consume(response.Body(), o.APIError); err != nil && err != io.EOF {
		return err
	}

	return nil
}
