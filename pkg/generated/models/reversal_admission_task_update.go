// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"log"

	"github.com/form3tech-oss/go-form3/v7/pkg/client"
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ReversalAdmissionTaskUpdate reversal admission task update
// swagger:model ReversalAdmissionTaskUpdate
type ReversalAdmissionTaskUpdate struct {

	// attributes
	Attributes *ReversalAdmissionTaskUpdateAttributes `json:"attributes,omitempty"`

	// id
	// Format: uuid
	ID strfmt.UUID `json:"id,omitempty"`

	// Unique ID of the organisation this resource is created by
	// Format: uuid
	OrganisationID strfmt.UUID `json:"organisation_id,omitempty"`

	// type
	// Enum: ["reversal_admission_tasks"]
	Type string `json:"type,omitempty"`

	// Version number
	// Minimum: 0
	Version *int64 `json:"version,omitempty"`
}

func ReversalAdmissionTaskUpdateWithDefaults(defaults client.Defaults) *ReversalAdmissionTaskUpdate {
	return &ReversalAdmissionTaskUpdate{

		Attributes: ReversalAdmissionTaskUpdateAttributesWithDefaults(defaults),

		ID: defaults.GetStrfmtUUID("ReversalAdmissionTaskUpdate", "id"),

		OrganisationID: defaults.GetStrfmtUUID("ReversalAdmissionTaskUpdate", "organisation_id"),

		Type: defaults.GetString("ReversalAdmissionTaskUpdate", "type"),

		Version: defaults.GetInt64Ptr("ReversalAdmissionTaskUpdate", "version"),
	}
}

func (m *ReversalAdmissionTaskUpdate) WithAttributes(attributes ReversalAdmissionTaskUpdateAttributes) *ReversalAdmissionTaskUpdate {

	m.Attributes = &attributes

	return m
}

func (m *ReversalAdmissionTaskUpdate) WithoutAttributes() *ReversalAdmissionTaskUpdate {
	m.Attributes = nil
	return m
}

func (m *ReversalAdmissionTaskUpdate) WithID(id strfmt.UUID) *ReversalAdmissionTaskUpdate {

	m.ID = id

	return m
}

func (m *ReversalAdmissionTaskUpdate) WithOrganisationID(organisationID strfmt.UUID) *ReversalAdmissionTaskUpdate {

	m.OrganisationID = organisationID

	return m
}

func (m *ReversalAdmissionTaskUpdate) WithType(typeVar string) *ReversalAdmissionTaskUpdate {

	m.Type = typeVar

	return m
}

func (m *ReversalAdmissionTaskUpdate) WithVersion(version int64) *ReversalAdmissionTaskUpdate {

	m.Version = &version

	return m
}

func (m *ReversalAdmissionTaskUpdate) WithoutVersion() *ReversalAdmissionTaskUpdate {
	m.Version = nil
	return m
}

// Validate validates this reversal admission task update
func (m *ReversalAdmissionTaskUpdate) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAttributes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrganisationID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVersion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ReversalAdmissionTaskUpdate) validateAttributes(formats strfmt.Registry) error {

	if swag.IsZero(m.Attributes) { // not required
		return nil
	}

	if m.Attributes != nil {
		if err := m.Attributes.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("attributes")
			}
			return err
		}
	}

	return nil
}

func (m *ReversalAdmissionTaskUpdate) validateID(formats strfmt.Registry) error {

	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.FormatOf("id", "body", "uuid", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ReversalAdmissionTaskUpdate) validateOrganisationID(formats strfmt.Registry) error {

	if swag.IsZero(m.OrganisationID) { // not required
		return nil
	}

	if err := validate.FormatOf("organisation_id", "body", "uuid", m.OrganisationID.String(), formats); err != nil {
		return err
	}

	return nil
}

var reversalAdmissionTaskUpdateTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["reversal_admission_tasks"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		reversalAdmissionTaskUpdateTypeTypePropEnum = append(reversalAdmissionTaskUpdateTypeTypePropEnum, v)
	}
}

const (

	// ReversalAdmissionTaskUpdateTypeReversalAdmissionTasks captures enum value "reversal_admission_tasks"
	ReversalAdmissionTaskUpdateTypeReversalAdmissionTasks string = "reversal_admission_tasks"
)

// prop value enum
func (m *ReversalAdmissionTaskUpdate) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, reversalAdmissionTaskUpdateTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ReversalAdmissionTaskUpdate) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

func (m *ReversalAdmissionTaskUpdate) validateVersion(formats strfmt.Registry) error {

	if swag.IsZero(m.Version) { // not required
		return nil
	}

	if err := validate.MinimumInt("version", "body", int64(*m.Version), 0, false); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ReversalAdmissionTaskUpdate) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ReversalAdmissionTaskUpdate) UnmarshalBinary(b []byte) error {
	var res ReversalAdmissionTaskUpdate
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
func (m *ReversalAdmissionTaskUpdate) Json() string {
	json, err := json.MarshalIndent(m, "  ", "  ")
	if err != nil {
		log.Fatal(err)
	}
	return string(json)
}

// ReversalAdmissionTaskUpdateAttributes reversal admission task update attributes
// swagger:model ReversalAdmissionTaskUpdateAttributes
type ReversalAdmissionTaskUpdateAttributes struct {

	// Key Value map that contains the Task result.
	Output interface{} `json:"output,omitempty"`

	// status
	Status ReversalAdmissionTaskStatus `json:"status,omitempty"`
}

func ReversalAdmissionTaskUpdateAttributesWithDefaults(defaults client.Defaults) *ReversalAdmissionTaskUpdateAttributes {
	return &ReversalAdmissionTaskUpdateAttributes{

		// TODO Output: interface{},

		// TODO Status: ReversalAdmissionTaskStatus,

	}
}

func (m *ReversalAdmissionTaskUpdateAttributes) WithOutput(output interface{}) *ReversalAdmissionTaskUpdateAttributes {

	m.Output = output

	return m
}

func (m *ReversalAdmissionTaskUpdateAttributes) WithStatus(status ReversalAdmissionTaskStatus) *ReversalAdmissionTaskUpdateAttributes {

	m.Status = status

	return m
}

// Validate validates this reversal admission task update attributes
func (m *ReversalAdmissionTaskUpdateAttributes) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ReversalAdmissionTaskUpdateAttributes) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	if err := m.Status.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("attributes" + "." + "status")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ReversalAdmissionTaskUpdateAttributes) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ReversalAdmissionTaskUpdateAttributes) UnmarshalBinary(b []byte) error {
	var res ReversalAdmissionTaskUpdateAttributes
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
func (m *ReversalAdmissionTaskUpdateAttributes) Json() string {
	json, err := json.MarshalIndent(m, "  ", "  ")
	if err != nil {
		log.Fatal(err)
	}
	return string(json)
}
