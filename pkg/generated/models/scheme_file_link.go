// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"log"

	"github.com/form3tech-oss/go-form3/v4/pkg/client"
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SchemeFileLink scheme file link
// swagger:model SchemeFileLink
type SchemeFileLink struct {

	// href
	// Required: true
	// Format: uri
	Href *strfmt.URI `json:"href"`

	// meta
	Meta *SchemeFileLinkMeta `json:"meta,omitempty"`
}

func SchemeFileLinkWithDefaults(defaults client.Defaults) *SchemeFileLink {
	return &SchemeFileLink{

		Href: defaults.GetStrfmtURIPtr("SchemeFileLink", "href"),

		Meta: SchemeFileLinkMetaWithDefaults(defaults),
	}
}

func (m *SchemeFileLink) WithHref(href strfmt.URI) *SchemeFileLink {

	m.Href = &href

	return m
}

func (m *SchemeFileLink) WithoutHref() *SchemeFileLink {
	m.Href = nil
	return m
}

func (m *SchemeFileLink) WithMeta(meta SchemeFileLinkMeta) *SchemeFileLink {

	m.Meta = &meta

	return m
}

func (m *SchemeFileLink) WithoutMeta() *SchemeFileLink {
	m.Meta = nil
	return m
}

// Validate validates this scheme file link
func (m *SchemeFileLink) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHref(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMeta(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SchemeFileLink) validateHref(formats strfmt.Registry) error {

	if err := validate.Required("href", "body", m.Href); err != nil {
		return err
	}

	if err := validate.FormatOf("href", "body", "uri", m.Href.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *SchemeFileLink) validateMeta(formats strfmt.Registry) error {

	if swag.IsZero(m.Meta) { // not required
		return nil
	}

	if m.Meta != nil {
		if err := m.Meta.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("meta")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SchemeFileLink) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SchemeFileLink) UnmarshalBinary(b []byte) error {
	var res SchemeFileLink
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
func (m *SchemeFileLink) Json() string {
	json, err := json.MarshalIndent(m, "  ", "  ")
	if err != nil {
		log.Fatal(err)
	}
	return string(json)
}

// SchemeFileLinkMeta scheme file link meta
// swagger:model SchemeFileLinkMeta
type SchemeFileLinkMeta struct {

	// content type
	ContentType string `json:"content-type,omitempty"`
}

func SchemeFileLinkMetaWithDefaults(defaults client.Defaults) *SchemeFileLinkMeta {
	return &SchemeFileLinkMeta{

		ContentType: defaults.GetString("SchemeFileLinkMeta", "content-type"),
	}
}

func (m *SchemeFileLinkMeta) WithContentType(contentType string) *SchemeFileLinkMeta {

	m.ContentType = contentType

	return m
}

// Validate validates this scheme file link meta
func (m *SchemeFileLinkMeta) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *SchemeFileLinkMeta) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SchemeFileLinkMeta) UnmarshalBinary(b []byte) error {
	var res SchemeFileLinkMeta
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
func (m *SchemeFileLinkMeta) Json() string {
	json, err := json.MarshalIndent(m, "  ", "  ")
	if err != nil {
		log.Fatal(err)
	}
	return string(json)
}
