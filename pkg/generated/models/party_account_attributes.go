// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"log"

	"github.com/form3tech-oss/go-form3/pkg/client"
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// PartyAccountAttributes party account attributes
// swagger:model PartyAccountAttributes
type PartyAccountAttributes struct {

	// account name
	AccountName string `json:"account_name,omitempty"`

	// account number
	AccountNumber string `json:"account_number,omitempty"`

	// account number code
	AccountNumberCode string `json:"account_number_code,omitempty"`

	// account type
	AccountType string `json:"account_type,omitempty"`

	// account with
	AccountWith *PartyAccountAttributesAccountWith `json:"account_with,omitempty"`

	// country
	Country string `json:"country,omitempty"`

	// currency
	Currency string `json:"currency,omitempty"`
}

func PartyAccountAttributesWithDefaults(defaults client.Defaults) *PartyAccountAttributes {
	return &PartyAccountAttributes{

		AccountName: defaults.GetString("PartyAccountAttributes", "account_name"),

		AccountNumber: defaults.GetString("PartyAccountAttributes", "account_number"),

		AccountNumberCode: defaults.GetString("PartyAccountAttributes", "account_number_code"),

		AccountType: defaults.GetString("PartyAccountAttributes", "account_type"),

		AccountWith: PartyAccountAttributesAccountWithWithDefaults(defaults),

		Country: defaults.GetString("PartyAccountAttributes", "country"),

		Currency: defaults.GetString("PartyAccountAttributes", "currency"),
	}
}

func (m *PartyAccountAttributes) WithAccountName(accountName string) *PartyAccountAttributes {

	m.AccountName = accountName

	return m
}

func (m *PartyAccountAttributes) WithAccountNumber(accountNumber string) *PartyAccountAttributes {

	m.AccountNumber = accountNumber

	return m
}

func (m *PartyAccountAttributes) WithAccountNumberCode(accountNumberCode string) *PartyAccountAttributes {

	m.AccountNumberCode = accountNumberCode

	return m
}

func (m *PartyAccountAttributes) WithAccountType(accountType string) *PartyAccountAttributes {

	m.AccountType = accountType

	return m
}

func (m *PartyAccountAttributes) WithAccountWith(accountWith PartyAccountAttributesAccountWith) *PartyAccountAttributes {

	m.AccountWith = &accountWith

	return m
}

func (m *PartyAccountAttributes) WithoutAccountWith() *PartyAccountAttributes {
	m.AccountWith = nil
	return m
}

func (m *PartyAccountAttributes) WithCountry(country string) *PartyAccountAttributes {

	m.Country = country

	return m
}

func (m *PartyAccountAttributes) WithCurrency(currency string) *PartyAccountAttributes {

	m.Currency = currency

	return m
}

// Validate validates this party account attributes
func (m *PartyAccountAttributes) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccountWith(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PartyAccountAttributes) validateAccountWith(formats strfmt.Registry) error {

	if swag.IsZero(m.AccountWith) { // not required
		return nil
	}

	if m.AccountWith != nil {
		if err := m.AccountWith.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("account_with")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PartyAccountAttributes) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PartyAccountAttributes) UnmarshalBinary(b []byte) error {
	var res PartyAccountAttributes
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
func (m *PartyAccountAttributes) Json() string {
	json, err := json.MarshalIndent(m, "  ", "  ")
	if err != nil {
		log.Fatal(err)
	}
	return string(json)
}
