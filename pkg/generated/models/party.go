// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"log"
	"strconv"

	"github.com/form3tech-oss/go-form3/v7/pkg/client"
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Party party
// swagger:model Party
type Party struct {

	// Additional address lines of the party address
	// Max Items: 3
	AdditionalAddressLine []string `json:"additional_address_line,omitempty"`

	// building number
	// Max Length: 16
	BuildingNumber string `json:"building_number,omitempty"`

	// city
	// Max Length: 35
	City string `json:"city,omitempty"`

	// Country of the party, ISO 3166 format country code
	// Max Length: 2
	Country string `json:"country,omitempty"`

	// Name by which the party is known
	// Max Length: 140
	Name string `json:"name,omitempty"`

	// organisation identifications
	OrganisationIdentifications []*BeneficiaryDebtorOrganisationIdentification `json:"organisation_identifications"`

	// post code
	// Max Length: 16
	PostCode string `json:"post_code,omitempty"`

	// Postal address of the party
	PostalAddress *PostalAddress `json:"postal_address,omitempty"`

	// province
	// Max Length: 35
	Province string `json:"province,omitempty"`

	// role
	Role PartyRole `json:"role,omitempty"`

	// street name
	// Max Length: 70
	StreetName string `json:"street_name,omitempty"`
}

func PartyWithDefaults(defaults client.Defaults) *Party {
	return &Party{

		AdditionalAddressLine: make([]string, 0),

		BuildingNumber: defaults.GetString("Party", "building_number"),

		City: defaults.GetString("Party", "city"),

		Country: defaults.GetString("Party", "country"),

		Name: defaults.GetString("Party", "name"),

		OrganisationIdentifications: make([]*BeneficiaryDebtorOrganisationIdentification, 0),

		PostCode: defaults.GetString("Party", "post_code"),

		PostalAddress: PostalAddressWithDefaults(defaults),

		Province: defaults.GetString("Party", "province"),

		// TODO Role: PartyRole,

		StreetName: defaults.GetString("Party", "street_name"),
	}
}

func (m *Party) WithAdditionalAddressLine(additionalAddressLine []string) *Party {

	m.AdditionalAddressLine = additionalAddressLine

	return m
}

func (m *Party) WithBuildingNumber(buildingNumber string) *Party {

	m.BuildingNumber = buildingNumber

	return m
}

func (m *Party) WithCity(city string) *Party {

	m.City = city

	return m
}

func (m *Party) WithCountry(country string) *Party {

	m.Country = country

	return m
}

func (m *Party) WithName(name string) *Party {

	m.Name = name

	return m
}

func (m *Party) WithOrganisationIdentifications(organisationIdentifications []*BeneficiaryDebtorOrganisationIdentification) *Party {

	m.OrganisationIdentifications = organisationIdentifications

	return m
}

func (m *Party) WithPostCode(postCode string) *Party {

	m.PostCode = postCode

	return m
}

func (m *Party) WithPostalAddress(postalAddress PostalAddress) *Party {

	m.PostalAddress = &postalAddress

	return m
}

func (m *Party) WithoutPostalAddress() *Party {
	m.PostalAddress = nil
	return m
}

func (m *Party) WithProvince(province string) *Party {

	m.Province = province

	return m
}

func (m *Party) WithRole(role PartyRole) *Party {

	m.Role = role

	return m
}

func (m *Party) WithStreetName(streetName string) *Party {

	m.StreetName = streetName

	return m
}

// Validate validates this party
func (m *Party) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAdditionalAddressLine(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBuildingNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCountry(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrganisationIdentifications(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePostCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePostalAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProvince(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRole(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStreetName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Party) validateAdditionalAddressLine(formats strfmt.Registry) error {

	if swag.IsZero(m.AdditionalAddressLine) { // not required
		return nil
	}

	iAdditionalAddressLineSize := int64(len(m.AdditionalAddressLine))

	if err := validate.MaxItems("additional_address_line", "body", iAdditionalAddressLineSize, 3); err != nil {
		return err
	}

	for i := 0; i < len(m.AdditionalAddressLine); i++ {

		if err := validate.MaxLength("additional_address_line"+"."+strconv.Itoa(i), "body", string(m.AdditionalAddressLine[i]), 35); err != nil {
			return err
		}

	}

	return nil
}

func (m *Party) validateBuildingNumber(formats strfmt.Registry) error {

	if swag.IsZero(m.BuildingNumber) { // not required
		return nil
	}

	if err := validate.MaxLength("building_number", "body", string(m.BuildingNumber), 16); err != nil {
		return err
	}

	return nil
}

func (m *Party) validateCity(formats strfmt.Registry) error {

	if swag.IsZero(m.City) { // not required
		return nil
	}

	if err := validate.MaxLength("city", "body", string(m.City), 35); err != nil {
		return err
	}

	return nil
}

func (m *Party) validateCountry(formats strfmt.Registry) error {

	if swag.IsZero(m.Country) { // not required
		return nil
	}

	if err := validate.MaxLength("country", "body", string(m.Country), 2); err != nil {
		return err
	}

	return nil
}

func (m *Party) validateName(formats strfmt.Registry) error {

	if swag.IsZero(m.Name) { // not required
		return nil
	}

	if err := validate.MaxLength("name", "body", string(m.Name), 140); err != nil {
		return err
	}

	return nil
}

func (m *Party) validateOrganisationIdentifications(formats strfmt.Registry) error {

	if swag.IsZero(m.OrganisationIdentifications) { // not required
		return nil
	}

	for i := 0; i < len(m.OrganisationIdentifications); i++ {
		if swag.IsZero(m.OrganisationIdentifications[i]) { // not required
			continue
		}

		if m.OrganisationIdentifications[i] != nil {
			if err := m.OrganisationIdentifications[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("organisation_identifications" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Party) validatePostCode(formats strfmt.Registry) error {

	if swag.IsZero(m.PostCode) { // not required
		return nil
	}

	if err := validate.MaxLength("post_code", "body", string(m.PostCode), 16); err != nil {
		return err
	}

	return nil
}

func (m *Party) validatePostalAddress(formats strfmt.Registry) error {

	if swag.IsZero(m.PostalAddress) { // not required
		return nil
	}

	if m.PostalAddress != nil {
		if err := m.PostalAddress.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postal_address")
			}
			return err
		}
	}

	return nil
}

func (m *Party) validateProvince(formats strfmt.Registry) error {

	if swag.IsZero(m.Province) { // not required
		return nil
	}

	if err := validate.MaxLength("province", "body", string(m.Province), 35); err != nil {
		return err
	}

	return nil
}

func (m *Party) validateRole(formats strfmt.Registry) error {

	if swag.IsZero(m.Role) { // not required
		return nil
	}

	if err := m.Role.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("role")
		}
		return err
	}

	return nil
}

func (m *Party) validateStreetName(formats strfmt.Registry) error {

	if swag.IsZero(m.StreetName) { // not required
		return nil
	}

	if err := validate.MaxLength("street_name", "body", string(m.StreetName), 70); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Party) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Party) UnmarshalBinary(b []byte) error {
	var res Party
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
func (m *Party) Json() string {
	json, err := json.MarshalIndent(m, "  ", "  ")
	if err != nil {
		log.Fatal(err)
	}
	return string(json)
}
