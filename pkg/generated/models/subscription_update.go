// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"log"

	"github.com/form3tech-oss/go-form3/v4/pkg/client"
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SubscriptionUpdate subscription update
// swagger:model SubscriptionUpdate
type SubscriptionUpdate struct {

	// attributes
	// Required: true
	Attributes *SubscriptionUpdateAttributes `json:"attributes"`

	// Unique resource ID
	// Required: true
	// Format: uuid
	ID *strfmt.UUID `json:"id"`

	// Unique ID of the organisation this resource is created by
	// Required: true
	// Format: uuid
	OrganisationID *strfmt.UUID `json:"organisation_id"`

	// Name of the resource type
	// Pattern: ^[A-Za-z]*$
	Type string `json:"type,omitempty"`

	// Version number
	// Minimum: 0
	Version *int64 `json:"version,omitempty"`
}

func SubscriptionUpdateWithDefaults(defaults client.Defaults) *SubscriptionUpdate {
	return &SubscriptionUpdate{

		Attributes: SubscriptionUpdateAttributesWithDefaults(defaults),

		ID: defaults.GetStrfmtUUIDPtr("SubscriptionUpdate", "id"),

		OrganisationID: defaults.GetStrfmtUUIDPtr("SubscriptionUpdate", "organisation_id"),

		Type: defaults.GetString("SubscriptionUpdate", "type"),

		Version: defaults.GetInt64Ptr("SubscriptionUpdate", "version"),
	}
}

func (m *SubscriptionUpdate) WithAttributes(attributes SubscriptionUpdateAttributes) *SubscriptionUpdate {

	m.Attributes = &attributes

	return m
}

func (m *SubscriptionUpdate) WithoutAttributes() *SubscriptionUpdate {
	m.Attributes = nil
	return m
}

func (m *SubscriptionUpdate) WithID(id strfmt.UUID) *SubscriptionUpdate {

	m.ID = &id

	return m
}

func (m *SubscriptionUpdate) WithoutID() *SubscriptionUpdate {
	m.ID = nil
	return m
}

func (m *SubscriptionUpdate) WithOrganisationID(organisationID strfmt.UUID) *SubscriptionUpdate {

	m.OrganisationID = &organisationID

	return m
}

func (m *SubscriptionUpdate) WithoutOrganisationID() *SubscriptionUpdate {
	m.OrganisationID = nil
	return m
}

func (m *SubscriptionUpdate) WithType(typeVar string) *SubscriptionUpdate {

	m.Type = typeVar

	return m
}

func (m *SubscriptionUpdate) WithVersion(version int64) *SubscriptionUpdate {

	m.Version = &version

	return m
}

func (m *SubscriptionUpdate) WithoutVersion() *SubscriptionUpdate {
	m.Version = nil
	return m
}

// Validate validates this subscription update
func (m *SubscriptionUpdate) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAttributes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrganisationID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVersion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SubscriptionUpdate) validateAttributes(formats strfmt.Registry) error {

	if err := validate.Required("attributes", "body", m.Attributes); err != nil {
		return err
	}

	if m.Attributes != nil {
		if err := m.Attributes.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("attributes")
			}
			return err
		}
	}

	return nil
}

func (m *SubscriptionUpdate) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	if err := validate.FormatOf("id", "body", "uuid", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *SubscriptionUpdate) validateOrganisationID(formats strfmt.Registry) error {

	if err := validate.Required("organisation_id", "body", m.OrganisationID); err != nil {
		return err
	}

	if err := validate.FormatOf("organisation_id", "body", "uuid", m.OrganisationID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *SubscriptionUpdate) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	if err := validate.Pattern("type", "body", string(m.Type), `^[A-Za-z]*$`); err != nil {
		return err
	}

	return nil
}

func (m *SubscriptionUpdate) validateVersion(formats strfmt.Registry) error {

	if swag.IsZero(m.Version) { // not required
		return nil
	}

	if err := validate.MinimumInt("version", "body", int64(*m.Version), 0, false); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SubscriptionUpdate) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SubscriptionUpdate) UnmarshalBinary(b []byte) error {
	var res SubscriptionUpdate
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
func (m *SubscriptionUpdate) Json() string {
	json, err := json.MarshalIndent(m, "  ", "  ")
	if err != nil {
		log.Fatal(err)
	}
	return string(json)
}
