// Code generated by go-swagger; DO NOT EDIT.

package reports

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/form3tech-oss/go-form3/v7/pkg/generated/models"
)

// GetReportReader is a Reader for the GetReport structure.
type GetReportReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetReportReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetReportOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewGetReportBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewGetReportForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewGetReportNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 406:
		result := NewGetReportNotAcceptable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetReportOK creates a GetReportOK with default headers values
func NewGetReportOK() *GetReportOK {
	return &GetReportOK{}
}

/*
GetReportOK handles this case with default header values.

Report details
*/
type GetReportOK struct {

	//Payload

	// isStream: false
	*models.ReportDetailsResponse
}

// IsSuccess returns true when this get report o k response has a 2xx status code
func (o *GetReportOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get report o k response has a 3xx status code
func (o *GetReportOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get report o k response has a 4xx status code
func (o *GetReportOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get report o k response has a 5xx status code
func (o *GetReportOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get report o k response a status code equal to that given
func (o *GetReportOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get report o k response
func (o *GetReportOK) Code() int {
	return 200
}

func (o *GetReportOK) Error() string {
	return fmt.Sprintf("[GET /notification/reports/{id}][%d] getReportOK", 200)
}

func (o *GetReportOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.ReportDetailsResponse = new(models.ReportDetailsResponse)

	// response payload

	if err := consumer.Consume(response.Body(), o.ReportDetailsResponse); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetReportBadRequest creates a GetReportBadRequest with default headers values
func NewGetReportBadRequest() *GetReportBadRequest {
	return &GetReportBadRequest{}
}

/*
GetReportBadRequest handles this case with default header values.

Bad Request
*/
type GetReportBadRequest struct {

	//Payload

	// isStream: false
	*models.APIError
}

// IsSuccess returns true when this get report bad request response has a 2xx status code
func (o *GetReportBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get report bad request response has a 3xx status code
func (o *GetReportBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get report bad request response has a 4xx status code
func (o *GetReportBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get report bad request response has a 5xx status code
func (o *GetReportBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get report bad request response a status code equal to that given
func (o *GetReportBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get report bad request response
func (o *GetReportBadRequest) Code() int {
	return 400
}

func (o *GetReportBadRequest) Error() string {
	return fmt.Sprintf("[GET /notification/reports/{id}][%d] getReportBadRequest", 400)
}

func (o *GetReportBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.APIError = new(models.APIError)

	// response payload

	if err := consumer.Consume(response.Body(), o.APIError); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetReportForbidden creates a GetReportForbidden with default headers values
func NewGetReportForbidden() *GetReportForbidden {
	return &GetReportForbidden{}
}

/*
GetReportForbidden handles this case with default header values.

Forbidden
*/
type GetReportForbidden struct {

	//Payload

	// isStream: false
	*models.APIError
}

// IsSuccess returns true when this get report forbidden response has a 2xx status code
func (o *GetReportForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get report forbidden response has a 3xx status code
func (o *GetReportForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get report forbidden response has a 4xx status code
func (o *GetReportForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get report forbidden response has a 5xx status code
func (o *GetReportForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get report forbidden response a status code equal to that given
func (o *GetReportForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get report forbidden response
func (o *GetReportForbidden) Code() int {
	return 403
}

func (o *GetReportForbidden) Error() string {
	return fmt.Sprintf("[GET /notification/reports/{id}][%d] getReportForbidden", 403)
}

func (o *GetReportForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.APIError = new(models.APIError)

	// response payload

	if err := consumer.Consume(response.Body(), o.APIError); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetReportNotFound creates a GetReportNotFound with default headers values
func NewGetReportNotFound() *GetReportNotFound {
	return &GetReportNotFound{}
}

/*
GetReportNotFound handles this case with default header values.

Report Not Found
*/
type GetReportNotFound struct {

	//Payload

	// isStream: false
	*models.APIError
}

// IsSuccess returns true when this get report not found response has a 2xx status code
func (o *GetReportNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get report not found response has a 3xx status code
func (o *GetReportNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get report not found response has a 4xx status code
func (o *GetReportNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get report not found response has a 5xx status code
func (o *GetReportNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get report not found response a status code equal to that given
func (o *GetReportNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get report not found response
func (o *GetReportNotFound) Code() int {
	return 404
}

func (o *GetReportNotFound) Error() string {
	return fmt.Sprintf("[GET /notification/reports/{id}][%d] getReportNotFound", 404)
}

func (o *GetReportNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.APIError = new(models.APIError)

	// response payload

	if err := consumer.Consume(response.Body(), o.APIError); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetReportNotAcceptable creates a GetReportNotAcceptable with default headers values
func NewGetReportNotAcceptable() *GetReportNotAcceptable {
	return &GetReportNotAcceptable{}
}

/*
GetReportNotAcceptable handles this case with default header values.

Report not available in acceptable format
*/
type GetReportNotAcceptable struct {

	//Payload

	// isStream: false
	*models.APIError
}

// IsSuccess returns true when this get report not acceptable response has a 2xx status code
func (o *GetReportNotAcceptable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get report not acceptable response has a 3xx status code
func (o *GetReportNotAcceptable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get report not acceptable response has a 4xx status code
func (o *GetReportNotAcceptable) IsClientError() bool {
	return true
}

// IsServerError returns true when this get report not acceptable response has a 5xx status code
func (o *GetReportNotAcceptable) IsServerError() bool {
	return false
}

// IsCode returns true when this get report not acceptable response a status code equal to that given
func (o *GetReportNotAcceptable) IsCode(code int) bool {
	return code == 406
}

// Code gets the status code for the get report not acceptable response
func (o *GetReportNotAcceptable) Code() int {
	return 406
}

func (o *GetReportNotAcceptable) Error() string {
	return fmt.Sprintf("[GET /notification/reports/{id}][%d] getReportNotAcceptable", 406)
}

func (o *GetReportNotAcceptable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.APIError = new(models.APIError)

	// response payload

	if err := consumer.Consume(response.Body(), o.APIError); err != nil && err != io.EOF {
		return err
	}

	return nil
}
