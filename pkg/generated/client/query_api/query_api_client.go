// Code generated by go-swagger; DO NOT EDIT.

// :Form3: Testing!

package query_api

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/form3tech-oss/go-form3/v7/pkg/client"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new query api API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry, defaults client.Defaults) *Client {
	return &Client{transport: transport, formats: formats, Defaults: defaults}
}

/*
Client for query api API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
	Defaults  client.Defaults
}

// range of operations

/*
create query API
*/
func (a *CreateQueryRequest) Do() (*CreateQueryCreated, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CreateQuery",
		Method:             "POST",
		PathPattern:        "/transaction/queries",
		ProducesMediaTypes: []string{"application/vnd.api+json", "application/json"},
		ConsumesMediaTypes: []string{"application/vnd.api+json", "application/json"},
		Schemes:            []string{"https"},
		Params:             a,
		Reader:             &CreateQueryReader{formats: a.formats},
		//AuthInfo: authInfo,
		Context: a.Context,
		Client:  a.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateQueryCreated), nil

}

func (a *CreateQueryRequest) MustDo() *CreateQueryCreated {
	r0, err := a.Do()
	if err != nil {
		panic(err)
	}
	return r0
}

/*
create query response API
*/
func (a *CreateQueryResponseRequest) Do() (*CreateQueryResponseCreated, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CreateQueryResponse",
		Method:             "POST",
		PathPattern:        "/transaction/queries/{query_id}/responses",
		ProducesMediaTypes: []string{"application/vnd.api+json", "application/json"},
		ConsumesMediaTypes: []string{"application/vnd.api+json", "application/json"},
		Schemes:            []string{"https"},
		Params:             a,
		Reader:             &CreateQueryResponseReader{formats: a.formats},
		//AuthInfo: authInfo,
		Context: a.Context,
		Client:  a.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateQueryResponseCreated), nil

}

func (a *CreateQueryResponseRequest) MustDo() *CreateQueryResponseCreated {
	r0, err := a.Do()
	if err != nil {
		panic(err)
	}
	return r0
}

/*
create query response submission API
*/
func (a *CreateQueryResponseSubmissionRequest) Do() (*CreateQueryResponseSubmissionCreated, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CreateQueryResponseSubmission",
		Method:             "POST",
		PathPattern:        "/transaction/queries/{query_id}/responses/{query_response_id}/submissions",
		ProducesMediaTypes: []string{"application/vnd.api+json", "application/json"},
		ConsumesMediaTypes: []string{"application/vnd.api+json", "application/json"},
		Schemes:            []string{"https"},
		Params:             a,
		Reader:             &CreateQueryResponseSubmissionReader{formats: a.formats},
		//AuthInfo: authInfo,
		Context: a.Context,
		Client:  a.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateQueryResponseSubmissionCreated), nil

}

func (a *CreateQueryResponseSubmissionRequest) MustDo() *CreateQueryResponseSubmissionCreated {
	r0, err := a.Do()
	if err != nil {
		panic(err)
	}
	return r0
}

/*
create query submission API
*/
func (a *CreateQuerySubmissionRequest) Do() (*CreateQuerySubmissionCreated, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CreateQuerySubmission",
		Method:             "POST",
		PathPattern:        "/transaction/queries/{query_id}/submissions",
		ProducesMediaTypes: []string{"application/vnd.api+json", "application/json"},
		ConsumesMediaTypes: []string{"application/vnd.api+json", "application/json"},
		Schemes:            []string{"https"},
		Params:             a,
		Reader:             &CreateQuerySubmissionReader{formats: a.formats},
		//AuthInfo: authInfo,
		Context: a.Context,
		Client:  a.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateQuerySubmissionCreated), nil

}

func (a *CreateQuerySubmissionRequest) MustDo() *CreateQuerySubmissionCreated {
	r0, err := a.Do()
	if err != nil {
		panic(err)
	}
	return r0
}

/*
get query API
*/
func (a *GetQueryRequest) Do() (*GetQueryOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetQuery",
		Method:             "GET",
		PathPattern:        "/transaction/queries/{query_id}",
		ProducesMediaTypes: []string{"application/vnd.api+json", "application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             a,
		Reader:             &GetQueryReader{formats: a.formats},
		//AuthInfo: authInfo,
		Context: a.Context,
		Client:  a.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetQueryOK), nil

}

func (a *GetQueryRequest) MustDo() *GetQueryOK {
	r0, err := a.Do()
	if err != nil {
		panic(err)
	}
	return r0
}

/*
get query admission API
*/
func (a *GetQueryAdmissionRequest) Do() (*GetQueryAdmissionOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetQueryAdmission",
		Method:             "GET",
		PathPattern:        "/transaction/queries/{query_id}/admissions/{query_admission_id}",
		ProducesMediaTypes: []string{"application/vnd.api+json", "application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             a,
		Reader:             &GetQueryAdmissionReader{formats: a.formats},
		//AuthInfo: authInfo,
		Context: a.Context,
		Client:  a.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetQueryAdmissionOK), nil

}

func (a *GetQueryAdmissionRequest) MustDo() *GetQueryAdmissionOK {
	r0, err := a.Do()
	if err != nil {
		panic(err)
	}
	return r0
}

/*
get query response API
*/
func (a *GetQueryResponseRequest) Do() (*GetQueryResponseOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetQueryResponse",
		Method:             "GET",
		PathPattern:        "/transaction/queries/{query_id}/responses/{query_response_id}",
		ProducesMediaTypes: []string{"application/vnd.api+json", "application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             a,
		Reader:             &GetQueryResponseReader{formats: a.formats},
		//AuthInfo: authInfo,
		Context: a.Context,
		Client:  a.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetQueryResponseOK), nil

}

func (a *GetQueryResponseRequest) MustDo() *GetQueryResponseOK {
	r0, err := a.Do()
	if err != nil {
		panic(err)
	}
	return r0
}

/*
get query response admission API
*/
func (a *GetQueryResponseAdmissionRequest) Do() (*GetQueryResponseAdmissionOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetQueryResponseAdmission",
		Method:             "GET",
		PathPattern:        "/transaction/queries/{query_id}/responses/{query_response_id}/admissions/{query_response_admission_id}",
		ProducesMediaTypes: []string{"application/vnd.api+json", "application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             a,
		Reader:             &GetQueryResponseAdmissionReader{formats: a.formats},
		//AuthInfo: authInfo,
		Context: a.Context,
		Client:  a.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetQueryResponseAdmissionOK), nil

}

func (a *GetQueryResponseAdmissionRequest) MustDo() *GetQueryResponseAdmissionOK {
	r0, err := a.Do()
	if err != nil {
		panic(err)
	}
	return r0
}

/*
get query response submission API
*/
func (a *GetQueryResponseSubmissionRequest) Do() (*GetQueryResponseSubmissionOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetQueryResponseSubmission",
		Method:             "GET",
		PathPattern:        "/transaction/queries/{query_id}/responses/{query_response_id}/submissions/{query_response_submission_id}",
		ProducesMediaTypes: []string{"application/vnd.api+json", "application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             a,
		Reader:             &GetQueryResponseSubmissionReader{formats: a.formats},
		//AuthInfo: authInfo,
		Context: a.Context,
		Client:  a.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetQueryResponseSubmissionOK), nil

}

func (a *GetQueryResponseSubmissionRequest) MustDo() *GetQueryResponseSubmissionOK {
	r0, err := a.Do()
	if err != nil {
		panic(err)
	}
	return r0
}

/*
get query submission API
*/
func (a *GetQuerySubmissionRequest) Do() (*GetQuerySubmissionOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetQuerySubmission",
		Method:             "GET",
		PathPattern:        "/transaction/queries/{query_id}/submissions/{query_submission_id}",
		ProducesMediaTypes: []string{"application/vnd.api+json", "application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             a,
		Reader:             &GetQuerySubmissionReader{formats: a.formats},
		//AuthInfo: authInfo,
		Context: a.Context,
		Client:  a.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetQuerySubmissionOK), nil

}

func (a *GetQuerySubmissionRequest) MustDo() *GetQuerySubmissionOK {
	r0, err := a.Do()
	if err != nil {
		panic(err)
	}
	return r0
}

/*
list queries API
*/
func (a *ListQueriesRequest) Do() (*ListQueriesOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ListQueries",
		Method:             "GET",
		PathPattern:        "/transaction/queries",
		ProducesMediaTypes: []string{"application/vnd.api+json", "application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             a,
		Reader:             &ListQueriesReader{formats: a.formats},
		//AuthInfo: authInfo,
		Context: a.Context,
		Client:  a.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListQueriesOK), nil

}

func (a *ListQueriesRequest) MustDo() *ListQueriesOK {
	r0, err := a.Do()
	if err != nil {
		panic(err)
	}
	return r0
}

/////////

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
