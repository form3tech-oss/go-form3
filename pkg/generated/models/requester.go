// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"log"

	"github.com/form3tech-oss/go-form3/v7/pkg/client"
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Requester requester
// swagger:model Requester
type Requester struct {

	// bank id
	// Required: true
	// Max Length: 11
	BankID *string `json:"bank_id"`

	// bank id code
	// Required: true
	BankIDCode *BankIDCode `json:"bank_id_code"`
}

func RequesterWithDefaults(defaults client.Defaults) *Requester {
	return &Requester{

		BankID: defaults.GetStringPtr("Requester", "bank_id"),

		// TODO BankIDCode: BankIDCode,

	}
}

func (m *Requester) WithBankID(bankID string) *Requester {

	m.BankID = &bankID

	return m
}

func (m *Requester) WithoutBankID() *Requester {
	m.BankID = nil
	return m
}

func (m *Requester) WithBankIDCode(bankIDCode BankIDCode) *Requester {

	m.BankIDCode = &bankIDCode

	return m
}

func (m *Requester) WithoutBankIDCode() *Requester {
	m.BankIDCode = nil
	return m
}

// Validate validates this requester
func (m *Requester) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBankID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBankIDCode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Requester) validateBankID(formats strfmt.Registry) error {

	if err := validate.Required("bank_id", "body", m.BankID); err != nil {
		return err
	}

	if err := validate.MaxLength("bank_id", "body", *m.BankID, 11); err != nil {
		return err
	}

	return nil
}

func (m *Requester) validateBankIDCode(formats strfmt.Registry) error {

	if err := validate.Required("bank_id_code", "body", m.BankIDCode); err != nil {
		return err
	}

	if m.BankIDCode != nil {
		if err := m.BankIDCode.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("bank_id_code")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Requester) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Requester) UnmarshalBinary(b []byte) error {
	var res Requester
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
func (m *Requester) Json() string {
	json, err := json.MarshalIndent(m, "  ", "  ")
	if err != nil {
		log.Fatal(err)
	}
	return string(json)
}
