// Code generated by go-swagger; DO NOT EDIT.

package account_request

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// Client.ListAccountRequests creates a new ListAccountRequestsRequest object
// with the default values initialized.
func (c *Client) ListAccountRequests() *ListAccountRequestsRequest {
	var (
		pageNumberDefault = string("0")
		pageSizeDefault   = int64(100)
	)
	return &ListAccountRequestsRequest{

		FilterAccountNumber: c.Defaults.GetStringPtr("ListAccountRequests", "filter[account_number]"),

		FilterBankID: c.Defaults.GetStringPtr("ListAccountRequests", "filter[bank_id]"),

		FilterBic: c.Defaults.GetStringPtr("ListAccountRequests", "filter[bic]"),

		FilterIban: c.Defaults.GetStringPtr("ListAccountRequests", "filter[iban]"),

		FilterOrganisationID: c.Defaults.GetStrfmtUUIDPtr("ListAccountRequests", "filter[organisation_id]"),

		FilterSubmissionStatus: c.Defaults.GetStringPtr("ListAccountRequests", "filter[submission.status]"),

		FilterSubmissionSubmissionDateFrom: c.Defaults.GetStrfmtDateTimePtr("ListAccountRequests", "filter[submission.submission_date_from]"),

		FilterSubmissionSubmissionDateTo: c.Defaults.GetStrfmtDateTimePtr("ListAccountRequests", "filter[submission.submission_date_to]"),

		PageNumber: &pageNumberDefault,

		PageSize: &pageSizeDefault,

		timeout: cr.DefaultTimeout,

		transport: c.transport,
		formats:   c.formats,
	}
}

type ListAccountRequestsRequest struct {

	/*FilterAccountNumber      Filter by account number      */

	FilterAccountNumber *string

	/*FilterBankID      Filter by BankID      */

	FilterBankID *string

	/*FilterBic      Filter by BIC      */

	FilterBic *string

	/*FilterIban      Filter by IBAN      */

	FilterIban *string

	/*FilterOrganisationID      Filter by organisationID      */

	FilterOrganisationID *strfmt.UUID

	/*FilterSubmissionStatus      Filter account request submission status      */

	FilterSubmissionStatus *string

	/*FilterSubmissionSubmissionDateFrom      Filter account request submission by date from      */

	FilterSubmissionSubmissionDateFrom *strfmt.DateTime

	/*FilterSubmissionSubmissionDateTo      Filter account request submission by date to      */

	FilterSubmissionSubmissionDateTo *strfmt.DateTime

	/*PageNumber      Which page to select      */

	PageNumber *string

	/*PageSize      Number of items to select      */

	PageSize *int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client

	transport runtime.ClientTransport
	formats   strfmt.Registry
}

func (o *ListAccountRequestsRequest) FromJson(j string) *ListAccountRequestsRequest {

	return o
}

func (o *ListAccountRequestsRequest) WithFilterAccountNumber(filterAccountNumber string) *ListAccountRequestsRequest {

	o.FilterAccountNumber = &filterAccountNumber

	return o
}

func (o *ListAccountRequestsRequest) WithoutFilterAccountNumber() *ListAccountRequestsRequest {

	o.FilterAccountNumber = nil

	return o
}

func (o *ListAccountRequestsRequest) WithFilterBankID(filterBankID string) *ListAccountRequestsRequest {

	o.FilterBankID = &filterBankID

	return o
}

func (o *ListAccountRequestsRequest) WithoutFilterBankID() *ListAccountRequestsRequest {

	o.FilterBankID = nil

	return o
}

func (o *ListAccountRequestsRequest) WithFilterBic(filterBic string) *ListAccountRequestsRequest {

	o.FilterBic = &filterBic

	return o
}

func (o *ListAccountRequestsRequest) WithoutFilterBic() *ListAccountRequestsRequest {

	o.FilterBic = nil

	return o
}

func (o *ListAccountRequestsRequest) WithFilterIban(filterIban string) *ListAccountRequestsRequest {

	o.FilterIban = &filterIban

	return o
}

func (o *ListAccountRequestsRequest) WithoutFilterIban() *ListAccountRequestsRequest {

	o.FilterIban = nil

	return o
}

func (o *ListAccountRequestsRequest) WithFilterOrganisationID(filterOrganisationID strfmt.UUID) *ListAccountRequestsRequest {

	o.FilterOrganisationID = &filterOrganisationID

	return o
}

func (o *ListAccountRequestsRequest) WithoutFilterOrganisationID() *ListAccountRequestsRequest {

	o.FilterOrganisationID = nil

	return o
}

func (o *ListAccountRequestsRequest) WithFilterSubmissionStatus(filterSubmissionStatus string) *ListAccountRequestsRequest {

	o.FilterSubmissionStatus = &filterSubmissionStatus

	return o
}

func (o *ListAccountRequestsRequest) WithoutFilterSubmissionStatus() *ListAccountRequestsRequest {

	o.FilterSubmissionStatus = nil

	return o
}

func (o *ListAccountRequestsRequest) WithFilterSubmissionSubmissionDateFrom(filterSubmissionSubmissionDateFrom strfmt.DateTime) *ListAccountRequestsRequest {

	o.FilterSubmissionSubmissionDateFrom = &filterSubmissionSubmissionDateFrom

	return o
}

func (o *ListAccountRequestsRequest) WithoutFilterSubmissionSubmissionDateFrom() *ListAccountRequestsRequest {

	o.FilterSubmissionSubmissionDateFrom = nil

	return o
}

func (o *ListAccountRequestsRequest) WithFilterSubmissionSubmissionDateTo(filterSubmissionSubmissionDateTo strfmt.DateTime) *ListAccountRequestsRequest {

	o.FilterSubmissionSubmissionDateTo = &filterSubmissionSubmissionDateTo

	return o
}

func (o *ListAccountRequestsRequest) WithoutFilterSubmissionSubmissionDateTo() *ListAccountRequestsRequest {

	o.FilterSubmissionSubmissionDateTo = nil

	return o
}

func (o *ListAccountRequestsRequest) WithPageNumber(pageNumber string) *ListAccountRequestsRequest {

	o.PageNumber = &pageNumber

	return o
}

func (o *ListAccountRequestsRequest) WithoutPageNumber() *ListAccountRequestsRequest {

	o.PageNumber = nil

	return o
}

func (o *ListAccountRequestsRequest) WithPageSize(pageSize int64) *ListAccountRequestsRequest {

	o.PageSize = &pageSize

	return o
}

func (o *ListAccountRequestsRequest) WithoutPageSize() *ListAccountRequestsRequest {

	o.PageSize = nil

	return o
}

//////////////////
// WithContext adds the context to the list account requests Request
func (o *ListAccountRequestsRequest) WithContext(ctx context.Context) *ListAccountRequestsRequest {
	o.Context = ctx
	return o
}

// WithHTTPClient adds the HTTPClient to the list account requests Request
func (o *ListAccountRequestsRequest) WithHTTPClient(client *http.Client) *ListAccountRequestsRequest {
	o.HTTPClient = client
	return o
}

// WriteToRequest writes these Request to a swagger request
func (o *ListAccountRequestsRequest) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.FilterAccountNumber != nil {

		// query param filter[account_number]
		var qrFilterAccountNumber string
		if o.FilterAccountNumber != nil {
			qrFilterAccountNumber = *o.FilterAccountNumber
		}
		qFilterAccountNumber := qrFilterAccountNumber
		if qFilterAccountNumber != "" {
			if err := r.SetQueryParam("filter[account_number]", qFilterAccountNumber); err != nil {
				return err
			}
		}

	}

	if o.FilterBankID != nil {

		// query param filter[bank_id]
		var qrFilterBankID string
		if o.FilterBankID != nil {
			qrFilterBankID = *o.FilterBankID
		}
		qFilterBankID := qrFilterBankID
		if qFilterBankID != "" {
			if err := r.SetQueryParam("filter[bank_id]", qFilterBankID); err != nil {
				return err
			}
		}

	}

	if o.FilterBic != nil {

		// query param filter[bic]
		var qrFilterBic string
		if o.FilterBic != nil {
			qrFilterBic = *o.FilterBic
		}
		qFilterBic := qrFilterBic
		if qFilterBic != "" {
			if err := r.SetQueryParam("filter[bic]", qFilterBic); err != nil {
				return err
			}
		}

	}

	if o.FilterIban != nil {

		// query param filter[iban]
		var qrFilterIban string
		if o.FilterIban != nil {
			qrFilterIban = *o.FilterIban
		}
		qFilterIban := qrFilterIban
		if qFilterIban != "" {
			if err := r.SetQueryParam("filter[iban]", qFilterIban); err != nil {
				return err
			}
		}

	}

	if o.FilterOrganisationID != nil {

		// query param filter[organisation_id]
		var qrFilterOrganisationID strfmt.UUID
		if o.FilterOrganisationID != nil {
			qrFilterOrganisationID = *o.FilterOrganisationID
		}
		qFilterOrganisationID := qrFilterOrganisationID.String()
		if qFilterOrganisationID != "" {
			if err := r.SetQueryParam("filter[organisation_id]", qFilterOrganisationID); err != nil {
				return err
			}
		}

	}

	if o.FilterSubmissionStatus != nil {

		// query param filter[submission.status]
		var qrFilterSubmissionStatus string
		if o.FilterSubmissionStatus != nil {
			qrFilterSubmissionStatus = *o.FilterSubmissionStatus
		}
		qFilterSubmissionStatus := qrFilterSubmissionStatus
		if qFilterSubmissionStatus != "" {
			if err := r.SetQueryParam("filter[submission.status]", qFilterSubmissionStatus); err != nil {
				return err
			}
		}

	}

	if o.FilterSubmissionSubmissionDateFrom != nil {

		// query param filter[submission.submission_date_from]
		var qrFilterSubmissionSubmissionDateFrom strfmt.DateTime
		if o.FilterSubmissionSubmissionDateFrom != nil {
			qrFilterSubmissionSubmissionDateFrom = *o.FilterSubmissionSubmissionDateFrom
		}
		qFilterSubmissionSubmissionDateFrom := qrFilterSubmissionSubmissionDateFrom.String()
		if qFilterSubmissionSubmissionDateFrom != "" {
			if err := r.SetQueryParam("filter[submission.submission_date_from]", qFilterSubmissionSubmissionDateFrom); err != nil {
				return err
			}
		}

	}

	if o.FilterSubmissionSubmissionDateTo != nil {

		// query param filter[submission.submission_date_to]
		var qrFilterSubmissionSubmissionDateTo strfmt.DateTime
		if o.FilterSubmissionSubmissionDateTo != nil {
			qrFilterSubmissionSubmissionDateTo = *o.FilterSubmissionSubmissionDateTo
		}
		qFilterSubmissionSubmissionDateTo := qrFilterSubmissionSubmissionDateTo.String()
		if qFilterSubmissionSubmissionDateTo != "" {
			if err := r.SetQueryParam("filter[submission.submission_date_to]", qFilterSubmissionSubmissionDateTo); err != nil {
				return err
			}
		}

	}

	if o.PageNumber != nil {

		// query param page[number]
		var qrPageNumber string
		if o.PageNumber != nil {
			qrPageNumber = *o.PageNumber
		}
		qPageNumber := qrPageNumber
		if qPageNumber != "" {
			if err := r.SetQueryParam("page[number]", qPageNumber); err != nil {
				return err
			}
		}

	}

	if o.PageSize != nil {

		// query param page[size]
		var qrPageSize int64
		if o.PageSize != nil {
			qrPageSize = *o.PageSize
		}
		qPageSize := swag.FormatInt64(qrPageSize)
		if qPageSize != "" {
			if err := r.SetQueryParam("page[size]", qPageSize); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
