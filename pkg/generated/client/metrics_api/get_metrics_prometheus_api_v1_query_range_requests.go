// Code generated by go-swagger; DO NOT EDIT.

package metrics_api

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// Client.GetMetricsPrometheusAPIV1QueryRange creates a new GetMetricsPrometheusAPIV1QueryRangeRequest object
// with the default values initialized.
func (c *Client) GetMetricsPrometheusAPIV1QueryRange() *GetMetricsPrometheusAPIV1QueryRangeRequest {
	var ()
	return &GetMetricsPrometheusAPIV1QueryRangeRequest{

		End: c.Defaults.GetStringPtr("GetMetricsPrometheusAPIV1QueryRange", "end"),

		Query: c.Defaults.GetString("GetMetricsPrometheusAPIV1QueryRange", "query"),

		Start: c.Defaults.GetStringPtr("GetMetricsPrometheusAPIV1QueryRange", "start"),

		Step: c.Defaults.GetStringPtr("GetMetricsPrometheusAPIV1QueryRange", "step"),

		Time: c.Defaults.GetStringPtr("GetMetricsPrometheusAPIV1QueryRange", "time"),

		Timeout: c.Defaults.GetStringPtr("GetMetricsPrometheusAPIV1QueryRange", "timeout"),

		requestTimeout: cr.DefaultTimeout,

		transport: c.transport,
		formats:   c.formats,
	}
}

type GetMetricsPrometheusAPIV1QueryRangeRequest struct {

	/*End      RFC3339 or unix_timestamp      */

	End *string

	/*Query      Query to Execute      */

	Query string

	/*Start      RFC3339 or unix_timestamp      */

	Start *string

	/*Step      duration or float      */

	Step *string

	/*Time      RFC3339 or unix_timestamp      */

	Time *string

	/*Timeout      See https://prometheus.io/docs/prometheus/latest/querying/basics/#time-durations      */

	Timeout *string

	requestTimeout time.Duration
	Context        context.Context
	HTTPClient     *http.Client

	transport runtime.ClientTransport
	formats   strfmt.Registry
}

func (o *GetMetricsPrometheusAPIV1QueryRangeRequest) FromJson(j string) (*GetMetricsPrometheusAPIV1QueryRangeRequest, error) {

	return o, nil
}

func (o *GetMetricsPrometheusAPIV1QueryRangeRequest) WithEnd(end string) *GetMetricsPrometheusAPIV1QueryRangeRequest {

	o.End = &end

	return o
}

func (o *GetMetricsPrometheusAPIV1QueryRangeRequest) WithoutEnd() *GetMetricsPrometheusAPIV1QueryRangeRequest {

	o.End = nil

	return o
}

func (o *GetMetricsPrometheusAPIV1QueryRangeRequest) WithQuery(query string) *GetMetricsPrometheusAPIV1QueryRangeRequest {

	o.Query = query

	return o
}

func (o *GetMetricsPrometheusAPIV1QueryRangeRequest) WithStart(start string) *GetMetricsPrometheusAPIV1QueryRangeRequest {

	o.Start = &start

	return o
}

func (o *GetMetricsPrometheusAPIV1QueryRangeRequest) WithoutStart() *GetMetricsPrometheusAPIV1QueryRangeRequest {

	o.Start = nil

	return o
}

func (o *GetMetricsPrometheusAPIV1QueryRangeRequest) WithStep(step string) *GetMetricsPrometheusAPIV1QueryRangeRequest {

	o.Step = &step

	return o
}

func (o *GetMetricsPrometheusAPIV1QueryRangeRequest) WithoutStep() *GetMetricsPrometheusAPIV1QueryRangeRequest {

	o.Step = nil

	return o
}

func (o *GetMetricsPrometheusAPIV1QueryRangeRequest) WithTime(time string) *GetMetricsPrometheusAPIV1QueryRangeRequest {

	o.Time = &time

	return o
}

func (o *GetMetricsPrometheusAPIV1QueryRangeRequest) WithoutTime() *GetMetricsPrometheusAPIV1QueryRangeRequest {

	o.Time = nil

	return o
}

func (o *GetMetricsPrometheusAPIV1QueryRangeRequest) WithTimeout(timeout string) *GetMetricsPrometheusAPIV1QueryRangeRequest {

	o.Timeout = &timeout

	return o
}

func (o *GetMetricsPrometheusAPIV1QueryRangeRequest) WithoutTimeout() *GetMetricsPrometheusAPIV1QueryRangeRequest {

	o.Timeout = nil

	return o
}

//////////////////
// WithContext adds the context to the get metrics prometheus API v1 query range Request
func (o *GetMetricsPrometheusAPIV1QueryRangeRequest) WithContext(ctx context.Context) *GetMetricsPrometheusAPIV1QueryRangeRequest {
	o.Context = ctx
	return o
}

// WithHTTPClient adds the HTTPClient to the get metrics prometheus API v1 query range Request
func (o *GetMetricsPrometheusAPIV1QueryRangeRequest) WithHTTPClient(client *http.Client) *GetMetricsPrometheusAPIV1QueryRangeRequest {
	o.HTTPClient = client
	return o
}

// WriteToRequest writes these Request to a swagger request
func (o *GetMetricsPrometheusAPIV1QueryRangeRequest) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.requestTimeout); err != nil {
		return err
	}
	var res []error

	if o.End != nil {

		// query param end
		var qrEnd string
		if o.End != nil {
			qrEnd = *o.End
		}
		qEnd := qrEnd
		if qEnd != "" {
			if err := r.SetQueryParam("end", qEnd); err != nil {
				return err
			}
		}

	}

	// query param query
	qrQuery := o.Query
	qQuery := qrQuery
	if qQuery != "" {
		if err := r.SetQueryParam("query", qQuery); err != nil {
			return err
		}
	}

	if o.Start != nil {

		// query param start
		var qrStart string
		if o.Start != nil {
			qrStart = *o.Start
		}
		qStart := qrStart
		if qStart != "" {
			if err := r.SetQueryParam("start", qStart); err != nil {
				return err
			}
		}

	}

	if o.Step != nil {

		// query param step
		var qrStep string
		if o.Step != nil {
			qrStep = *o.Step
		}
		qStep := qrStep
		if qStep != "" {
			if err := r.SetQueryParam("step", qStep); err != nil {
				return err
			}
		}

	}

	if o.Time != nil {

		// query param time
		var qrTime string
		if o.Time != nil {
			qrTime = *o.Time
		}
		qTime := qrTime
		if qTime != "" {
			if err := r.SetQueryParam("time", qTime); err != nil {
				return err
			}
		}

	}

	if o.Timeout != nil {

		// query param timeout
		var qrTimeout string
		if o.Timeout != nil {
			qrTimeout = *o.Timeout
		}
		qTimeout := qrTimeout
		if qTimeout != "" {
			if err := r.SetQueryParam("timeout", qTimeout); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
