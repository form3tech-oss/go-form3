// Code generated by go-swagger; DO NOT EDIT.

package scheme_file_api

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/form3tech-oss/go-form3/v7/pkg/generated/models"
)

// GetSchemeFileSubmissionReader is a Reader for the GetSchemeFileSubmission structure.
type GetSchemeFileSubmissionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetSchemeFileSubmissionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetSchemeFileSubmissionOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 401:
		result := NewGetSchemeFileSubmissionUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewGetSchemeFileSubmissionForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewGetSchemeFileSubmissionNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewGetSchemeFileSubmissionInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetSchemeFileSubmissionOK creates a GetSchemeFileSubmissionOK with default headers values
func NewGetSchemeFileSubmissionOK() *GetSchemeFileSubmissionOK {
	return &GetSchemeFileSubmissionOK{}
}

/*
GetSchemeFileSubmissionOK handles this case with default header values.

Scheme File Submission Response
*/
type GetSchemeFileSubmissionOK struct {

	//Payload

	// isStream: false
	*models.SchemeFileSubmissionResponse
}

// IsSuccess returns true when this get scheme file submission o k response has a 2xx status code
func (o *GetSchemeFileSubmissionOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get scheme file submission o k response has a 3xx status code
func (o *GetSchemeFileSubmissionOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get scheme file submission o k response has a 4xx status code
func (o *GetSchemeFileSubmissionOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get scheme file submission o k response has a 5xx status code
func (o *GetSchemeFileSubmissionOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get scheme file submission o k response a status code equal to that given
func (o *GetSchemeFileSubmissionOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get scheme file submission o k response
func (o *GetSchemeFileSubmissionOK) Code() int {
	return 200
}

func (o *GetSchemeFileSubmissionOK) Error() string {
	return fmt.Sprintf("[GET /files/schemefiles/{scheme_file_id}/submissions/{scheme_file_submission_id}][%d] getSchemeFileSubmissionOK", 200)
}

func (o *GetSchemeFileSubmissionOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.SchemeFileSubmissionResponse = new(models.SchemeFileSubmissionResponse)

	// response payload

	if err := consumer.Consume(response.Body(), o.SchemeFileSubmissionResponse); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSchemeFileSubmissionUnauthorized creates a GetSchemeFileSubmissionUnauthorized with default headers values
func NewGetSchemeFileSubmissionUnauthorized() *GetSchemeFileSubmissionUnauthorized {
	return &GetSchemeFileSubmissionUnauthorized{}
}

/*
GetSchemeFileSubmissionUnauthorized handles this case with default header values.

Unauthorized
*/
type GetSchemeFileSubmissionUnauthorized struct {

	//Payload

	// isStream: false
	*models.APIError
}

// IsSuccess returns true when this get scheme file submission unauthorized response has a 2xx status code
func (o *GetSchemeFileSubmissionUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get scheme file submission unauthorized response has a 3xx status code
func (o *GetSchemeFileSubmissionUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get scheme file submission unauthorized response has a 4xx status code
func (o *GetSchemeFileSubmissionUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get scheme file submission unauthorized response has a 5xx status code
func (o *GetSchemeFileSubmissionUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get scheme file submission unauthorized response a status code equal to that given
func (o *GetSchemeFileSubmissionUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get scheme file submission unauthorized response
func (o *GetSchemeFileSubmissionUnauthorized) Code() int {
	return 401
}

func (o *GetSchemeFileSubmissionUnauthorized) Error() string {
	return fmt.Sprintf("[GET /files/schemefiles/{scheme_file_id}/submissions/{scheme_file_submission_id}][%d] getSchemeFileSubmissionUnauthorized", 401)
}

func (o *GetSchemeFileSubmissionUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.APIError = new(models.APIError)

	// response payload

	if err := consumer.Consume(response.Body(), o.APIError); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSchemeFileSubmissionForbidden creates a GetSchemeFileSubmissionForbidden with default headers values
func NewGetSchemeFileSubmissionForbidden() *GetSchemeFileSubmissionForbidden {
	return &GetSchemeFileSubmissionForbidden{}
}

/*
GetSchemeFileSubmissionForbidden handles this case with default header values.

Forbidden
*/
type GetSchemeFileSubmissionForbidden struct {

	//Payload

	// isStream: false
	*models.APIError
}

// IsSuccess returns true when this get scheme file submission forbidden response has a 2xx status code
func (o *GetSchemeFileSubmissionForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get scheme file submission forbidden response has a 3xx status code
func (o *GetSchemeFileSubmissionForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get scheme file submission forbidden response has a 4xx status code
func (o *GetSchemeFileSubmissionForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get scheme file submission forbidden response has a 5xx status code
func (o *GetSchemeFileSubmissionForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get scheme file submission forbidden response a status code equal to that given
func (o *GetSchemeFileSubmissionForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get scheme file submission forbidden response
func (o *GetSchemeFileSubmissionForbidden) Code() int {
	return 403
}

func (o *GetSchemeFileSubmissionForbidden) Error() string {
	return fmt.Sprintf("[GET /files/schemefiles/{scheme_file_id}/submissions/{scheme_file_submission_id}][%d] getSchemeFileSubmissionForbidden", 403)
}

func (o *GetSchemeFileSubmissionForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.APIError = new(models.APIError)

	// response payload

	if err := consumer.Consume(response.Body(), o.APIError); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSchemeFileSubmissionNotFound creates a GetSchemeFileSubmissionNotFound with default headers values
func NewGetSchemeFileSubmissionNotFound() *GetSchemeFileSubmissionNotFound {
	return &GetSchemeFileSubmissionNotFound{}
}

/*
GetSchemeFileSubmissionNotFound handles this case with default header values.

Not Found
*/
type GetSchemeFileSubmissionNotFound struct {

	//Payload

	// isStream: false
	*models.APIError
}

// IsSuccess returns true when this get scheme file submission not found response has a 2xx status code
func (o *GetSchemeFileSubmissionNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get scheme file submission not found response has a 3xx status code
func (o *GetSchemeFileSubmissionNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get scheme file submission not found response has a 4xx status code
func (o *GetSchemeFileSubmissionNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get scheme file submission not found response has a 5xx status code
func (o *GetSchemeFileSubmissionNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get scheme file submission not found response a status code equal to that given
func (o *GetSchemeFileSubmissionNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get scheme file submission not found response
func (o *GetSchemeFileSubmissionNotFound) Code() int {
	return 404
}

func (o *GetSchemeFileSubmissionNotFound) Error() string {
	return fmt.Sprintf("[GET /files/schemefiles/{scheme_file_id}/submissions/{scheme_file_submission_id}][%d] getSchemeFileSubmissionNotFound", 404)
}

func (o *GetSchemeFileSubmissionNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.APIError = new(models.APIError)

	// response payload

	if err := consumer.Consume(response.Body(), o.APIError); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSchemeFileSubmissionInternalServerError creates a GetSchemeFileSubmissionInternalServerError with default headers values
func NewGetSchemeFileSubmissionInternalServerError() *GetSchemeFileSubmissionInternalServerError {
	return &GetSchemeFileSubmissionInternalServerError{}
}

/*
GetSchemeFileSubmissionInternalServerError handles this case with default header values.

Internal Server Error
*/
type GetSchemeFileSubmissionInternalServerError struct {

	//Payload

	// isStream: false
	*models.APIError
}

// IsSuccess returns true when this get scheme file submission internal server error response has a 2xx status code
func (o *GetSchemeFileSubmissionInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get scheme file submission internal server error response has a 3xx status code
func (o *GetSchemeFileSubmissionInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get scheme file submission internal server error response has a 4xx status code
func (o *GetSchemeFileSubmissionInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get scheme file submission internal server error response has a 5xx status code
func (o *GetSchemeFileSubmissionInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get scheme file submission internal server error response a status code equal to that given
func (o *GetSchemeFileSubmissionInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get scheme file submission internal server error response
func (o *GetSchemeFileSubmissionInternalServerError) Code() int {
	return 500
}

func (o *GetSchemeFileSubmissionInternalServerError) Error() string {
	return fmt.Sprintf("[GET /files/schemefiles/{scheme_file_id}/submissions/{scheme_file_submission_id}][%d] getSchemeFileSubmissionInternalServerError", 500)
}

func (o *GetSchemeFileSubmissionInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.APIError = new(models.APIError)

	// response payload

	if err := consumer.Consume(response.Body(), o.APIError); err != nil && err != io.EOF {
		return err
	}

	return nil
}
