// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"log"

	"github.com/form3tech-oss/go-form3/pkg/client"
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// OBError1 o b error1
// swagger:model OBError1
type OBError1 struct {

	// Low level textual error code, e.g., UK.OBIE.Field.Missing
	// Required: true
	// Max Length: 128
	// Min Length: 1
	ErrorCode *string `json:"ErrorCode"`

	// A description of the error that occurred. e.g., 'A mandatory field isn't supplied' or 'RequestedExecutionDateTime must be in future'
	// OBIE doesn't standardise this field
	// Required: true
	// Max Length: 500
	// Min Length: 1
	Message *string `json:"Message"`

	// Recommended but optional reference to the JSON Path of the field with error, e.g., Data.Initiation.InstructedAmount.Currency
	// Max Length: 40
	// Min Length: 1
	Path string `json:"Path,omitempty"`

	// URL to help remediate the problem, or provide more information, or to API Reference, or help etc
	URL string `json:"Url,omitempty"`
}

func OBError1WithDefaults(defaults client.Defaults) *OBError1 {
	return &OBError1{

		ErrorCode: defaults.GetStringPtr("OBError1", "ErrorCode"),

		Message: defaults.GetStringPtr("OBError1", "Message"),

		Path: defaults.GetString("OBError1", "Path"),

		URL: defaults.GetString("OBError1", "Url"),
	}
}

func (m *OBError1) WithErrorCode(errorCode string) *OBError1 {

	m.ErrorCode = &errorCode

	return m
}

func (m *OBError1) WithoutErrorCode() *OBError1 {
	m.ErrorCode = nil
	return m
}

func (m *OBError1) WithMessage(message string) *OBError1 {

	m.Message = &message

	return m
}

func (m *OBError1) WithoutMessage() *OBError1 {
	m.Message = nil
	return m
}

func (m *OBError1) WithPath(path string) *OBError1 {

	m.Path = path

	return m
}

func (m *OBError1) WithURL(url string) *OBError1 {

	m.URL = url

	return m
}

// Validate validates this o b error1
func (m *OBError1) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateErrorCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePath(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OBError1) validateErrorCode(formats strfmt.Registry) error {

	if err := validate.Required("ErrorCode", "body", m.ErrorCode); err != nil {
		return err
	}

	if err := validate.MinLength("ErrorCode", "body", string(*m.ErrorCode), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("ErrorCode", "body", string(*m.ErrorCode), 128); err != nil {
		return err
	}

	return nil
}

func (m *OBError1) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("Message", "body", m.Message); err != nil {
		return err
	}

	if err := validate.MinLength("Message", "body", string(*m.Message), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("Message", "body", string(*m.Message), 500); err != nil {
		return err
	}

	return nil
}

func (m *OBError1) validatePath(formats strfmt.Registry) error {

	if swag.IsZero(m.Path) { // not required
		return nil
	}

	if err := validate.MinLength("Path", "body", string(m.Path), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("Path", "body", string(m.Path), 40); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OBError1) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OBError1) UnmarshalBinary(b []byte) error {
	var res OBError1
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
func (m *OBError1) Json() string {
	json, err := json.MarshalIndent(m, "  ", "  ")
	if err != nil {
		log.Fatal(err)
	}
	return string(json)
}
