// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"log"
	"strconv"

	"github.com/form3tech-oss/go-form3/v6/pkg/client"
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SubscriptionUpdateAttributes subscription update attributes
// swagger:model SubscriptionUpdateAttributes
type SubscriptionUpdateAttributes struct {

	// Deprecated. Please use callback_uris instead
	CallbackTransport CallbackTransport `json:"callback_transport,omitempty"`

	// Deprecated. Please use callback_uris instead
	// Pattern: ^[A-Za-z0-9 .,@:\&\?=\/\-_]*$
	CallbackURI string `json:"callback_uri,omitempty"`

	// callback uris
	CallbackUris []*CallbackURI `json:"callback_uris"`

	// deactivated
	Deactivated bool `json:"deactivated,omitempty"`

	// event type
	// Pattern: ^[A-Za-z_-]*$
	EventType string `json:"event_type,omitempty"`

	// filter
	Filter string `json:"filter,omitempty"`

	// record type
	// Pattern: ^[A-Za-z_-]*$
	RecordType string `json:"record_type,omitempty"`

	// All purpose list of key-value pairs to store specific data for the associated subscription.
	// Max Items: 5
	UserDefinedData []*SubscriptionUserDefinedData `json:"user_defined_data,omitempty"`

	// user id
	// Read Only: true
	// Format: uuid
	UserID strfmt.UUID `json:"user_id,omitempty"`
}

func SubscriptionUpdateAttributesWithDefaults(defaults client.Defaults) *SubscriptionUpdateAttributes {
	return &SubscriptionUpdateAttributes{

		// TODO CallbackTransport: CallbackTransport,

		CallbackURI: defaults.GetString("SubscriptionUpdateAttributes", "callback_uri"),

		CallbackUris: make([]*CallbackURI, 0),

		Deactivated: defaults.GetBool("SubscriptionUpdateAttributes", "deactivated"),

		EventType: defaults.GetString("SubscriptionUpdateAttributes", "event_type"),

		Filter: defaults.GetString("SubscriptionUpdateAttributes", "filter"),

		RecordType: defaults.GetString("SubscriptionUpdateAttributes", "record_type"),

		UserDefinedData: make([]*SubscriptionUserDefinedData, 0),

		UserID: defaults.GetStrfmtUUID("SubscriptionUpdateAttributes", "user_id"),
	}
}

func (m *SubscriptionUpdateAttributes) WithCallbackTransport(callbackTransport CallbackTransport) *SubscriptionUpdateAttributes {

	m.CallbackTransport = callbackTransport

	return m
}

func (m *SubscriptionUpdateAttributes) WithCallbackURI(callbackURI string) *SubscriptionUpdateAttributes {

	m.CallbackURI = callbackURI

	return m
}

func (m *SubscriptionUpdateAttributes) WithCallbackUris(callbackUris []*CallbackURI) *SubscriptionUpdateAttributes {

	m.CallbackUris = callbackUris

	return m
}

func (m *SubscriptionUpdateAttributes) WithDeactivated(deactivated bool) *SubscriptionUpdateAttributes {

	m.Deactivated = deactivated

	return m
}

func (m *SubscriptionUpdateAttributes) WithEventType(eventType string) *SubscriptionUpdateAttributes {

	m.EventType = eventType

	return m
}

func (m *SubscriptionUpdateAttributes) WithFilter(filter string) *SubscriptionUpdateAttributes {

	m.Filter = filter

	return m
}

func (m *SubscriptionUpdateAttributes) WithRecordType(recordType string) *SubscriptionUpdateAttributes {

	m.RecordType = recordType

	return m
}

func (m *SubscriptionUpdateAttributes) WithUserDefinedData(userDefinedData []*SubscriptionUserDefinedData) *SubscriptionUpdateAttributes {

	m.UserDefinedData = userDefinedData

	return m
}

func (m *SubscriptionUpdateAttributes) WithUserID(userID strfmt.UUID) *SubscriptionUpdateAttributes {

	m.UserID = userID

	return m
}

// Validate validates this subscription update attributes
func (m *SubscriptionUpdateAttributes) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCallbackTransport(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCallbackURI(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCallbackUris(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEventType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRecordType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserDefinedData(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SubscriptionUpdateAttributes) validateCallbackTransport(formats strfmt.Registry) error {

	if swag.IsZero(m.CallbackTransport) { // not required
		return nil
	}

	if err := m.CallbackTransport.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("callback_transport")
		}
		return err
	}

	return nil
}

func (m *SubscriptionUpdateAttributes) validateCallbackURI(formats strfmt.Registry) error {

	if swag.IsZero(m.CallbackURI) { // not required
		return nil
	}

	if err := validate.Pattern("callback_uri", "body", string(m.CallbackURI), `^[A-Za-z0-9 .,@:\&\?=\/\-_]*$`); err != nil {
		return err
	}

	return nil
}

func (m *SubscriptionUpdateAttributes) validateCallbackUris(formats strfmt.Registry) error {

	if swag.IsZero(m.CallbackUris) { // not required
		return nil
	}

	for i := 0; i < len(m.CallbackUris); i++ {
		if swag.IsZero(m.CallbackUris[i]) { // not required
			continue
		}

		if m.CallbackUris[i] != nil {
			if err := m.CallbackUris[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("callback_uris" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SubscriptionUpdateAttributes) validateEventType(formats strfmt.Registry) error {

	if swag.IsZero(m.EventType) { // not required
		return nil
	}

	if err := validate.Pattern("event_type", "body", string(m.EventType), `^[A-Za-z_-]*$`); err != nil {
		return err
	}

	return nil
}

func (m *SubscriptionUpdateAttributes) validateRecordType(formats strfmt.Registry) error {

	if swag.IsZero(m.RecordType) { // not required
		return nil
	}

	if err := validate.Pattern("record_type", "body", string(m.RecordType), `^[A-Za-z_-]*$`); err != nil {
		return err
	}

	return nil
}

func (m *SubscriptionUpdateAttributes) validateUserDefinedData(formats strfmt.Registry) error {

	if swag.IsZero(m.UserDefinedData) { // not required
		return nil
	}

	iUserDefinedDataSize := int64(len(m.UserDefinedData))

	if err := validate.MaxItems("user_defined_data", "body", iUserDefinedDataSize, 5); err != nil {
		return err
	}

	for i := 0; i < len(m.UserDefinedData); i++ {
		if swag.IsZero(m.UserDefinedData[i]) { // not required
			continue
		}

		if m.UserDefinedData[i] != nil {
			if err := m.UserDefinedData[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("user_defined_data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SubscriptionUpdateAttributes) validateUserID(formats strfmt.Registry) error {

	if swag.IsZero(m.UserID) { // not required
		return nil
	}

	if err := validate.FormatOf("user_id", "body", "uuid", m.UserID.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SubscriptionUpdateAttributes) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SubscriptionUpdateAttributes) UnmarshalBinary(b []byte) error {
	var res SubscriptionUpdateAttributes
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
func (m *SubscriptionUpdateAttributes) Json() string {
	json, err := json.MarshalIndent(m, "  ", "  ")
	if err != nil {
		log.Fatal(err)
	}
	return string(json)
}
