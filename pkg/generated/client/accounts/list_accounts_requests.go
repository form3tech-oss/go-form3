// Code generated by go-swagger; DO NOT EDIT.

package accounts

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// Client.ListAccounts creates a new ListAccountsRequest object
// with the default values initialized.
func (c *Client) ListAccounts() *ListAccountsRequest {
	var ()
	return &ListAccountsRequest{

		FilterAccountNumber: make([]string, 0),

		FilterBankID: make([]string, 0),

		FilterBankIDCode: make([]string, 0),

		FilterCountry: make([]string, 0),

		FilterCustomerID: make([]string, 0),

		FilterIban: make([]string, 0),

		FilterOrganisationID: make([]strfmt.UUID, 0),

		PageAfter: c.Defaults.GetStringPtr("ListAccounts", "page[after]"),

		PageBefore: c.Defaults.GetStringPtr("ListAccounts", "page[before]"),

		PageNumber: c.Defaults.GetStringPtr("ListAccounts", "page[number]"),

		PageSize: c.Defaults.GetInt64Ptr("ListAccounts", "page[size]"),

		timeout: cr.DefaultTimeout,

		transport: c.transport,
		formats:   c.formats,
	}
}

type ListAccountsRequest struct {

	/*FilterAccountNumber      Filter by account number      */

	FilterAccountNumber []string

	/*FilterBankID      Filter by bank id e.g. sort code or bic      */

	FilterBankID []string

	/*FilterBankIDCode      Filter by type of bank id e.g. "GBDSC"      */

	FilterBankIDCode []string

	/*FilterCountry      Filter by country e.g. FR,GB      */

	FilterCountry []string

	/*FilterCustomerID      Filter by customer_id      */

	FilterCustomerID []string

	/*FilterIban      Filter by IBAN      */

	FilterIban []string

	/*FilterOrganisationID      Filter by organisation id      */

	FilterOrganisationID []strfmt.UUID

	/*PageAfter      Cursor value for getting next page      */

	PageAfter *string

	/*PageBefore      Cursor value for getting previous page      */

	PageBefore *string

	/*PageNumber      Which page to select      */

	PageNumber *string

	/*PageSize      Number of items to select      */

	PageSize *int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client

	transport runtime.ClientTransport
	formats   strfmt.Registry
}

func (o *ListAccountsRequest) FromJson(j string) (*ListAccountsRequest, error) {

	return o, nil
}

func (o *ListAccountsRequest) WithFilterAccountNumber(filterAccountNumber []string) *ListAccountsRequest {

	o.FilterAccountNumber = filterAccountNumber

	return o
}

func (o *ListAccountsRequest) WithoutFilterAccountNumber() *ListAccountsRequest {

	o.FilterAccountNumber = nil

	return o
}

func (o *ListAccountsRequest) WithFilterBankID(filterBankID []string) *ListAccountsRequest {

	o.FilterBankID = filterBankID

	return o
}

func (o *ListAccountsRequest) WithoutFilterBankID() *ListAccountsRequest {

	o.FilterBankID = nil

	return o
}

func (o *ListAccountsRequest) WithFilterBankIDCode(filterBankIDCode []string) *ListAccountsRequest {

	o.FilterBankIDCode = filterBankIDCode

	return o
}

func (o *ListAccountsRequest) WithoutFilterBankIDCode() *ListAccountsRequest {

	o.FilterBankIDCode = nil

	return o
}

func (o *ListAccountsRequest) WithFilterCountry(filterCountry []string) *ListAccountsRequest {

	o.FilterCountry = filterCountry

	return o
}

func (o *ListAccountsRequest) WithoutFilterCountry() *ListAccountsRequest {

	o.FilterCountry = nil

	return o
}

func (o *ListAccountsRequest) WithFilterCustomerID(filterCustomerID []string) *ListAccountsRequest {

	o.FilterCustomerID = filterCustomerID

	return o
}

func (o *ListAccountsRequest) WithoutFilterCustomerID() *ListAccountsRequest {

	o.FilterCustomerID = nil

	return o
}

func (o *ListAccountsRequest) WithFilterIban(filterIban []string) *ListAccountsRequest {

	o.FilterIban = filterIban

	return o
}

func (o *ListAccountsRequest) WithoutFilterIban() *ListAccountsRequest {

	o.FilterIban = nil

	return o
}

func (o *ListAccountsRequest) WithFilterOrganisationID(filterOrganisationID []strfmt.UUID) *ListAccountsRequest {

	o.FilterOrganisationID = filterOrganisationID

	return o
}

func (o *ListAccountsRequest) WithoutFilterOrganisationID() *ListAccountsRequest {

	o.FilterOrganisationID = nil

	return o
}

func (o *ListAccountsRequest) WithPageAfter(pageAfter string) *ListAccountsRequest {

	o.PageAfter = &pageAfter

	return o
}

func (o *ListAccountsRequest) WithoutPageAfter() *ListAccountsRequest {

	o.PageAfter = nil

	return o
}

func (o *ListAccountsRequest) WithPageBefore(pageBefore string) *ListAccountsRequest {

	o.PageBefore = &pageBefore

	return o
}

func (o *ListAccountsRequest) WithoutPageBefore() *ListAccountsRequest {

	o.PageBefore = nil

	return o
}

func (o *ListAccountsRequest) WithPageNumber(pageNumber string) *ListAccountsRequest {

	o.PageNumber = &pageNumber

	return o
}

func (o *ListAccountsRequest) WithoutPageNumber() *ListAccountsRequest {

	o.PageNumber = nil

	return o
}

func (o *ListAccountsRequest) WithPageSize(pageSize int64) *ListAccountsRequest {

	o.PageSize = &pageSize

	return o
}

func (o *ListAccountsRequest) WithoutPageSize() *ListAccountsRequest {

	o.PageSize = nil

	return o
}

//////////////////
// WithContext adds the context to the list accounts Request
func (o *ListAccountsRequest) WithContext(ctx context.Context) *ListAccountsRequest {
	o.Context = ctx
	return o
}

// WithHTTPClient adds the HTTPClient to the list accounts Request
func (o *ListAccountsRequest) WithHTTPClient(client *http.Client) *ListAccountsRequest {
	o.HTTPClient = client
	return o
}

// WriteToRequest writes these Request to a swagger request
func (o *ListAccountsRequest) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	valuesFilterAccountNumber := o.FilterAccountNumber

	joinedFilterAccountNumber := swag.JoinByFormat(valuesFilterAccountNumber, "csv")
	// query array param filter[account_number]
	if err := r.SetQueryParam("filter[account_number]", joinedFilterAccountNumber...); err != nil {
		return err
	}

	valuesFilterBankID := o.FilterBankID

	joinedFilterBankID := swag.JoinByFormat(valuesFilterBankID, "csv")
	// query array param filter[bank_id]
	if err := r.SetQueryParam("filter[bank_id]", joinedFilterBankID...); err != nil {
		return err
	}

	valuesFilterBankIDCode := o.FilterBankIDCode

	joinedFilterBankIDCode := swag.JoinByFormat(valuesFilterBankIDCode, "csv")
	// query array param filter[bank_id_code]
	if err := r.SetQueryParam("filter[bank_id_code]", joinedFilterBankIDCode...); err != nil {
		return err
	}

	valuesFilterCountry := o.FilterCountry

	joinedFilterCountry := swag.JoinByFormat(valuesFilterCountry, "csv")
	// query array param filter[country]
	if err := r.SetQueryParam("filter[country]", joinedFilterCountry...); err != nil {
		return err
	}

	valuesFilterCustomerID := o.FilterCustomerID

	joinedFilterCustomerID := swag.JoinByFormat(valuesFilterCustomerID, "csv")
	// query array param filter[customer_id]
	if err := r.SetQueryParam("filter[customer_id]", joinedFilterCustomerID...); err != nil {
		return err
	}

	valuesFilterIban := o.FilterIban

	joinedFilterIban := swag.JoinByFormat(valuesFilterIban, "csv")
	// query array param filter[iban]
	if err := r.SetQueryParam("filter[iban]", joinedFilterIban...); err != nil {
		return err
	}

	var valuesFilterOrganisationID []string
	for _, v := range o.FilterOrganisationID {
		valuesFilterOrganisationID = append(valuesFilterOrganisationID, v.String())
	}

	joinedFilterOrganisationID := swag.JoinByFormat(valuesFilterOrganisationID, "csv")
	// query array param filter[organisation_id]
	if err := r.SetQueryParam("filter[organisation_id]", joinedFilterOrganisationID...); err != nil {
		return err
	}

	if o.PageAfter != nil {

		// query param page[after]
		var qrPageAfter string
		if o.PageAfter != nil {
			qrPageAfter = *o.PageAfter
		}
		qPageAfter := qrPageAfter
		if qPageAfter != "" {
			if err := r.SetQueryParam("page[after]", qPageAfter); err != nil {
				return err
			}
		}

	}

	if o.PageBefore != nil {

		// query param page[before]
		var qrPageBefore string
		if o.PageBefore != nil {
			qrPageBefore = *o.PageBefore
		}
		qPageBefore := qrPageBefore
		if qPageBefore != "" {
			if err := r.SetQueryParam("page[before]", qPageBefore); err != nil {
				return err
			}
		}

	}

	if o.PageNumber != nil {

		// query param page[number]
		var qrPageNumber string
		if o.PageNumber != nil {
			qrPageNumber = *o.PageNumber
		}
		qPageNumber := qrPageNumber
		if qPageNumber != "" {
			if err := r.SetQueryParam("page[number]", qPageNumber); err != nil {
				return err
			}
		}

	}

	if o.PageSize != nil {

		// query param page[size]
		var qrPageSize int64
		if o.PageSize != nil {
			qrPageSize = *o.PageSize
		}
		qPageSize := swag.FormatInt64(qrPageSize)
		if qPageSize != "" {
			if err := r.SetQueryParam("page[size]", qPageSize); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
