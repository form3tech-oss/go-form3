// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"log"
	"strconv"

	"github.com/form3tech-oss/go-form3/v2/pkg/client"
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AccountRequestAttributes account request attributes
// swagger:model AccountRequestAttributes
type AccountRequestAttributes struct {

	// Account number of the account. A unique number will automatically be generated if not provided.
	// Pattern: ^[0-9]+$
	AccountNumber string `json:"account_number,omitempty"`

	// Local country bank identifier. In the UK this is the sort code.
	// Pattern: ^[A-Z0-9]+$
	BankID string `json:"bank_id,omitempty"`

	// ISO 20022 code used to identify the type of bank ID being used
	// Min Length: 1
	BankIDCode string `json:"bank_id_code,omitempty"`

	// ISO 4217 code used to identify the base currency of the account
	// Required: true
	// Pattern: ^[A-Z]{3}$
	BaseCurrency string `json:"base_currency"`

	// SWIFT BIC in either 8 or 11 character format
	// Required: true
	// Pattern: ^[A-Z]{6}[A-Z2-9][A-NP-Z0-9]([A-Z0-9]{3})?$
	Bic string `json:"bic"`

	// ISO 3166-1 code used to identify the domicile of the account
	// Required: true
	// Pattern: ^[A-Z]{2}$
	Country string `json:"country"`

	// IBAN of the account. Will be calculated from other fields if not supplied.
	// Pattern: ^[A-Z]{2}[0-9]{2}[A-Z0-9]{0,64}$
	Iban string `json:"iban,omitempty"`

	// Account holder names (for example title, first name, last name). Used for Confirmation of Payee matching.
	// Max Items: 4
	Name []string `json:"name,omitempty"`

	// organisation identification
	OrganisationIdentification *OrganisationIdentification `json:"organisation_identification,omitempty"`

	// private identification
	PrivateIdentification *PrivateIdentification `json:"private_identification,omitempty"`
}

func AccountRequestAttributesWithDefaults(defaults client.Defaults) *AccountRequestAttributes {
	return &AccountRequestAttributes{

		AccountNumber: defaults.GetString("AccountRequestAttributes", "account_number"),

		BankID: defaults.GetString("AccountRequestAttributes", "bank_id"),

		BankIDCode: defaults.GetString("AccountRequestAttributes", "bank_id_code"),

		BaseCurrency: defaults.GetString("AccountRequestAttributes", "base_currency"),

		Bic: defaults.GetString("AccountRequestAttributes", "bic"),

		Country: defaults.GetString("AccountRequestAttributes", "country"),

		Iban: defaults.GetString("AccountRequestAttributes", "iban"),

		Name: make([]string, 0),

		OrganisationIdentification: OrganisationIdentificationWithDefaults(defaults),

		PrivateIdentification: PrivateIdentificationWithDefaults(defaults),
	}
}

func (m *AccountRequestAttributes) WithAccountNumber(accountNumber string) *AccountRequestAttributes {

	m.AccountNumber = accountNumber

	return m
}

func (m *AccountRequestAttributes) WithBankID(bankID string) *AccountRequestAttributes {

	m.BankID = bankID

	return m
}

func (m *AccountRequestAttributes) WithBankIDCode(bankIDCode string) *AccountRequestAttributes {

	m.BankIDCode = bankIDCode

	return m
}

func (m *AccountRequestAttributes) WithBaseCurrency(baseCurrency string) *AccountRequestAttributes {

	m.BaseCurrency = baseCurrency

	return m
}

func (m *AccountRequestAttributes) WithBic(bic string) *AccountRequestAttributes {

	m.Bic = bic

	return m
}

func (m *AccountRequestAttributes) WithCountry(country string) *AccountRequestAttributes {

	m.Country = country

	return m
}

func (m *AccountRequestAttributes) WithIban(iban string) *AccountRequestAttributes {

	m.Iban = iban

	return m
}

func (m *AccountRequestAttributes) WithName(name []string) *AccountRequestAttributes {

	m.Name = name

	return m
}

func (m *AccountRequestAttributes) WithOrganisationIdentification(organisationIdentification OrganisationIdentification) *AccountRequestAttributes {

	m.OrganisationIdentification = &organisationIdentification

	return m
}

func (m *AccountRequestAttributes) WithoutOrganisationIdentification() *AccountRequestAttributes {
	m.OrganisationIdentification = nil
	return m
}

func (m *AccountRequestAttributes) WithPrivateIdentification(privateIdentification PrivateIdentification) *AccountRequestAttributes {

	m.PrivateIdentification = &privateIdentification

	return m
}

func (m *AccountRequestAttributes) WithoutPrivateIdentification() *AccountRequestAttributes {
	m.PrivateIdentification = nil
	return m
}

// Validate validates this account request attributes
func (m *AccountRequestAttributes) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccountNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBankID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBankIDCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBaseCurrency(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBic(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCountry(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIban(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrganisationIdentification(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrivateIdentification(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AccountRequestAttributes) validateAccountNumber(formats strfmt.Registry) error {

	if swag.IsZero(m.AccountNumber) { // not required
		return nil
	}

	if err := validate.Pattern("account_number", "body", string(m.AccountNumber), `^[0-9]+$`); err != nil {
		return err
	}

	return nil
}

func (m *AccountRequestAttributes) validateBankID(formats strfmt.Registry) error {

	if swag.IsZero(m.BankID) { // not required
		return nil
	}

	if err := validate.Pattern("bank_id", "body", string(m.BankID), `^[A-Z0-9]+$`); err != nil {
		return err
	}

	return nil
}

func (m *AccountRequestAttributes) validateBankIDCode(formats strfmt.Registry) error {

	if swag.IsZero(m.BankIDCode) { // not required
		return nil
	}

	if err := validate.MinLength("bank_id_code", "body", string(m.BankIDCode), 1); err != nil {
		return err
	}

	return nil
}

func (m *AccountRequestAttributes) validateBaseCurrency(formats strfmt.Registry) error {

	if err := validate.RequiredString("base_currency", "body", string(m.BaseCurrency)); err != nil {
		return err
	}

	if err := validate.Pattern("base_currency", "body", string(m.BaseCurrency), `^[A-Z]{3}$`); err != nil {
		return err
	}

	return nil
}

func (m *AccountRequestAttributes) validateBic(formats strfmt.Registry) error {

	if err := validate.RequiredString("bic", "body", string(m.Bic)); err != nil {
		return err
	}

	if err := validate.Pattern("bic", "body", string(m.Bic), `^[A-Z]{6}[A-Z2-9][A-NP-Z0-9]([A-Z0-9]{3})?$`); err != nil {
		return err
	}

	return nil
}

func (m *AccountRequestAttributes) validateCountry(formats strfmt.Registry) error {

	if err := validate.RequiredString("country", "body", string(m.Country)); err != nil {
		return err
	}

	if err := validate.Pattern("country", "body", string(m.Country), `^[A-Z]{2}$`); err != nil {
		return err
	}

	return nil
}

func (m *AccountRequestAttributes) validateIban(formats strfmt.Registry) error {

	if swag.IsZero(m.Iban) { // not required
		return nil
	}

	if err := validate.Pattern("iban", "body", string(m.Iban), `^[A-Z]{2}[0-9]{2}[A-Z0-9]{0,64}$`); err != nil {
		return err
	}

	return nil
}

func (m *AccountRequestAttributes) validateName(formats strfmt.Registry) error {

	if swag.IsZero(m.Name) { // not required
		return nil
	}

	iNameSize := int64(len(m.Name))

	if err := validate.MaxItems("name", "body", iNameSize, 4); err != nil {
		return err
	}

	for i := 0; i < len(m.Name); i++ {

		if err := validate.MinLength("name"+"."+strconv.Itoa(i), "body", string(m.Name[i]), 1); err != nil {
			return err
		}

		if err := validate.MaxLength("name"+"."+strconv.Itoa(i), "body", string(m.Name[i]), 140); err != nil {
			return err
		}

	}

	return nil
}

func (m *AccountRequestAttributes) validateOrganisationIdentification(formats strfmt.Registry) error {

	if swag.IsZero(m.OrganisationIdentification) { // not required
		return nil
	}

	if m.OrganisationIdentification != nil {
		if err := m.OrganisationIdentification.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("organisation_identification")
			}
			return err
		}
	}

	return nil
}

func (m *AccountRequestAttributes) validatePrivateIdentification(formats strfmt.Registry) error {

	if swag.IsZero(m.PrivateIdentification) { // not required
		return nil
	}

	if m.PrivateIdentification != nil {
		if err := m.PrivateIdentification.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("private_identification")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AccountRequestAttributes) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AccountRequestAttributes) UnmarshalBinary(b []byte) error {
	var res AccountRequestAttributes
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
func (m *AccountRequestAttributes) Json() string {
	json, err := json.MarshalIndent(m, "  ", "  ")
	if err != nil {
		log.Fatal(err)
	}
	return string(json)
}
