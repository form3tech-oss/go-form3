// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"log"
	"strconv"

	"github.com/form3tech-oss/go-form3/v6/pkg/client"
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// TransactionFileRelationships transaction file relationships
// swagger:model TransactionFileRelationships
type TransactionFileRelationships struct {

	// report
	Report *ThinRelationships `json:"report,omitempty"`

	// transaction file submission
	TransactionFileSubmission *TransactionFileRelationshipsTransactionFileSubmission `json:"transaction_file_submission,omitempty"`
}

func TransactionFileRelationshipsWithDefaults(defaults client.Defaults) *TransactionFileRelationships {
	return &TransactionFileRelationships{

		Report: ThinRelationshipsWithDefaults(defaults),

		TransactionFileSubmission: TransactionFileRelationshipsTransactionFileSubmissionWithDefaults(defaults),
	}
}

func (m *TransactionFileRelationships) WithReport(report ThinRelationships) *TransactionFileRelationships {

	m.Report = &report

	return m
}

func (m *TransactionFileRelationships) WithoutReport() *TransactionFileRelationships {
	m.Report = nil
	return m
}

func (m *TransactionFileRelationships) WithTransactionFileSubmission(transactionFileSubmission TransactionFileRelationshipsTransactionFileSubmission) *TransactionFileRelationships {

	m.TransactionFileSubmission = &transactionFileSubmission

	return m
}

func (m *TransactionFileRelationships) WithoutTransactionFileSubmission() *TransactionFileRelationships {
	m.TransactionFileSubmission = nil
	return m
}

// Validate validates this transaction file relationships
func (m *TransactionFileRelationships) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateReport(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTransactionFileSubmission(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TransactionFileRelationships) validateReport(formats strfmt.Registry) error {

	if swag.IsZero(m.Report) { // not required
		return nil
	}

	if m.Report != nil {
		if err := m.Report.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("report")
			}
			return err
		}
	}

	return nil
}

func (m *TransactionFileRelationships) validateTransactionFileSubmission(formats strfmt.Registry) error {

	if swag.IsZero(m.TransactionFileSubmission) { // not required
		return nil
	}

	if m.TransactionFileSubmission != nil {
		if err := m.TransactionFileSubmission.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("transaction_file_submission")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TransactionFileRelationships) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TransactionFileRelationships) UnmarshalBinary(b []byte) error {
	var res TransactionFileRelationships
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
func (m *TransactionFileRelationships) Json() string {
	json, err := json.MarshalIndent(m, "  ", "  ")
	if err != nil {
		log.Fatal(err)
	}
	return string(json)
}

// TransactionFileRelationshipsTransactionFileSubmission transaction file relationships transaction file submission
// swagger:model TransactionFileRelationshipsTransactionFileSubmission
type TransactionFileRelationshipsTransactionFileSubmission struct {

	// data
	Data []*TransactionFileSubmission `json:"data"`
}

func TransactionFileRelationshipsTransactionFileSubmissionWithDefaults(defaults client.Defaults) *TransactionFileRelationshipsTransactionFileSubmission {
	return &TransactionFileRelationshipsTransactionFileSubmission{

		Data: make([]*TransactionFileSubmission, 0),
	}
}

func (m *TransactionFileRelationshipsTransactionFileSubmission) WithData(data []*TransactionFileSubmission) *TransactionFileRelationshipsTransactionFileSubmission {

	m.Data = data

	return m
}

// Validate validates this transaction file relationships transaction file submission
func (m *TransactionFileRelationshipsTransactionFileSubmission) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TransactionFileRelationshipsTransactionFileSubmission) validateData(formats strfmt.Registry) error {

	if swag.IsZero(m.Data) { // not required
		return nil
	}

	for i := 0; i < len(m.Data); i++ {
		if swag.IsZero(m.Data[i]) { // not required
			continue
		}

		if m.Data[i] != nil {
			if err := m.Data[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("transaction_file_submission" + "." + "data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *TransactionFileRelationshipsTransactionFileSubmission) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TransactionFileRelationshipsTransactionFileSubmission) UnmarshalBinary(b []byte) error {
	var res TransactionFileRelationshipsTransactionFileSubmission
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
func (m *TransactionFileRelationshipsTransactionFileSubmission) Json() string {
	json, err := json.MarshalIndent(m, "  ", "  ")
	if err != nil {
		log.Fatal(err)
	}
	return string(json)
}
