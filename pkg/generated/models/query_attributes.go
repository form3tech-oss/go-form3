// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"log"

	"github.com/form3tech-oss/go-form3/v6/pkg/client"
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// QueryAttributes query attributes
// swagger:model QueryAttributes
type QueryAttributes struct {

	// agents
	Agents RequestForInformationAgents `json:"agents,omitempty"`

	// auto handled
	AutoHandled *bool `json:"auto_handled,omitempty"`

	// creator party
	CreatorParty *RequestForInformationCreatorParty `json:"creator_party,omitempty"`

	// message id
	MessageID string `json:"message_id,omitempty"`

	// processing date
	// Format: date
	ProcessingDate *strfmt.Date `json:"processing_date,omitempty"`

	// query sub types
	QuerySubTypes RequestForInformationQuerySubTypes `json:"query_sub_types,omitempty"`

	// query type
	// Required: true
	// Enum: [claim_non_receipt modify_payment status_request request_for_information]
	QueryType *string `json:"query_type"`

	// references
	References RequestForInformationReferences `json:"references,omitempty"`

	// requested information
	RequestedInformation RequestForInformationRequestedInformation `json:"requested_information,omitempty"`

	// scheme transaction id
	SchemeTransactionID string `json:"scheme_transaction_id,omitempty"`

	// status
	// Enum: [pending closed]
	Status string `json:"status,omitempty"`

	// unstructured message
	UnstructuredMessage *string `json:"unstructured_message,omitempty"`
}

func QueryAttributesWithDefaults(defaults client.Defaults) *QueryAttributes {
	return &QueryAttributes{

		// TODO Agents: RequestForInformationAgents,

		AutoHandled: defaults.GetBoolPtr("QueryAttributes", "auto_handled"),

		CreatorParty: RequestForInformationCreatorPartyWithDefaults(defaults),

		MessageID: defaults.GetString("QueryAttributes", "message_id"),

		ProcessingDate: defaults.GetStrfmtDatePtr("QueryAttributes", "processing_date"),

		// TODO QuerySubTypes: RequestForInformationQuerySubTypes,

		QueryType: defaults.GetStringPtr("QueryAttributes", "query_type"),

		// TODO References: RequestForInformationReferences,

		// TODO RequestedInformation: RequestForInformationRequestedInformation,

		SchemeTransactionID: defaults.GetString("QueryAttributes", "scheme_transaction_id"),

		Status: defaults.GetString("QueryAttributes", "status"),

		UnstructuredMessage: defaults.GetStringPtr("QueryAttributes", "unstructured_message"),
	}
}

func (m *QueryAttributes) WithAgents(agents RequestForInformationAgents) *QueryAttributes {

	m.Agents = agents

	return m
}

func (m *QueryAttributes) WithAutoHandled(autoHandled bool) *QueryAttributes {

	m.AutoHandled = &autoHandled

	return m
}

func (m *QueryAttributes) WithoutAutoHandled() *QueryAttributes {
	m.AutoHandled = nil
	return m
}

func (m *QueryAttributes) WithCreatorParty(creatorParty RequestForInformationCreatorParty) *QueryAttributes {

	m.CreatorParty = &creatorParty

	return m
}

func (m *QueryAttributes) WithoutCreatorParty() *QueryAttributes {
	m.CreatorParty = nil
	return m
}

func (m *QueryAttributes) WithMessageID(messageID string) *QueryAttributes {

	m.MessageID = messageID

	return m
}

func (m *QueryAttributes) WithProcessingDate(processingDate strfmt.Date) *QueryAttributes {

	m.ProcessingDate = &processingDate

	return m
}

func (m *QueryAttributes) WithoutProcessingDate() *QueryAttributes {
	m.ProcessingDate = nil
	return m
}

func (m *QueryAttributes) WithQuerySubTypes(querySubTypes RequestForInformationQuerySubTypes) *QueryAttributes {

	m.QuerySubTypes = querySubTypes

	return m
}

func (m *QueryAttributes) WithQueryType(queryType string) *QueryAttributes {

	m.QueryType = &queryType

	return m
}

func (m *QueryAttributes) WithoutQueryType() *QueryAttributes {
	m.QueryType = nil
	return m
}

func (m *QueryAttributes) WithReferences(references RequestForInformationReferences) *QueryAttributes {

	m.References = references

	return m
}

func (m *QueryAttributes) WithRequestedInformation(requestedInformation RequestForInformationRequestedInformation) *QueryAttributes {

	m.RequestedInformation = requestedInformation

	return m
}

func (m *QueryAttributes) WithSchemeTransactionID(schemeTransactionID string) *QueryAttributes {

	m.SchemeTransactionID = schemeTransactionID

	return m
}

func (m *QueryAttributes) WithStatus(status string) *QueryAttributes {

	m.Status = status

	return m
}

func (m *QueryAttributes) WithUnstructuredMessage(unstructuredMessage string) *QueryAttributes {

	m.UnstructuredMessage = &unstructuredMessage

	return m
}

func (m *QueryAttributes) WithoutUnstructuredMessage() *QueryAttributes {
	m.UnstructuredMessage = nil
	return m
}

// Validate validates this query attributes
func (m *QueryAttributes) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAgents(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatorParty(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProcessingDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQuerySubTypes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQueryType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReferences(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRequestedInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *QueryAttributes) validateAgents(formats strfmt.Registry) error {

	if swag.IsZero(m.Agents) { // not required
		return nil
	}

	if err := m.Agents.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("agents")
		}
		return err
	}

	return nil
}

func (m *QueryAttributes) validateCreatorParty(formats strfmt.Registry) error {

	if swag.IsZero(m.CreatorParty) { // not required
		return nil
	}

	if m.CreatorParty != nil {
		if err := m.CreatorParty.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("creator_party")
			}
			return err
		}
	}

	return nil
}

func (m *QueryAttributes) validateProcessingDate(formats strfmt.Registry) error {

	if swag.IsZero(m.ProcessingDate) { // not required
		return nil
	}

	if err := validate.FormatOf("processing_date", "body", "date", m.ProcessingDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *QueryAttributes) validateQuerySubTypes(formats strfmt.Registry) error {

	if swag.IsZero(m.QuerySubTypes) { // not required
		return nil
	}

	if err := m.QuerySubTypes.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("query_sub_types")
		}
		return err
	}

	return nil
}

var queryAttributesTypeQueryTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["claim_non_receipt","modify_payment","status_request","request_for_information"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		queryAttributesTypeQueryTypePropEnum = append(queryAttributesTypeQueryTypePropEnum, v)
	}
}

const (

	// QueryAttributesQueryTypeClaimNonReceipt captures enum value "claim_non_receipt"
	QueryAttributesQueryTypeClaimNonReceipt string = "claim_non_receipt"

	// QueryAttributesQueryTypeModifyPayment captures enum value "modify_payment"
	QueryAttributesQueryTypeModifyPayment string = "modify_payment"

	// QueryAttributesQueryTypeStatusRequest captures enum value "status_request"
	QueryAttributesQueryTypeStatusRequest string = "status_request"

	// QueryAttributesQueryTypeRequestForInformation captures enum value "request_for_information"
	QueryAttributesQueryTypeRequestForInformation string = "request_for_information"
)

// prop value enum
func (m *QueryAttributes) validateQueryTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, queryAttributesTypeQueryTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *QueryAttributes) validateQueryType(formats strfmt.Registry) error {

	if err := validate.Required("query_type", "body", m.QueryType); err != nil {
		return err
	}

	// value enum
	if err := m.validateQueryTypeEnum("query_type", "body", *m.QueryType); err != nil {
		return err
	}

	return nil
}

func (m *QueryAttributes) validateReferences(formats strfmt.Registry) error {

	if swag.IsZero(m.References) { // not required
		return nil
	}

	if err := m.References.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("references")
		}
		return err
	}

	return nil
}

func (m *QueryAttributes) validateRequestedInformation(formats strfmt.Registry) error {

	if swag.IsZero(m.RequestedInformation) { // not required
		return nil
	}

	if err := m.RequestedInformation.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("requested_information")
		}
		return err
	}

	return nil
}

var queryAttributesTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["pending","closed"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		queryAttributesTypeStatusPropEnum = append(queryAttributesTypeStatusPropEnum, v)
	}
}

const (

	// QueryAttributesStatusPending captures enum value "pending"
	QueryAttributesStatusPending string = "pending"

	// QueryAttributesStatusClosed captures enum value "closed"
	QueryAttributesStatusClosed string = "closed"
)

// prop value enum
func (m *QueryAttributes) validateStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, queryAttributesTypeStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *QueryAttributes) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *QueryAttributes) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *QueryAttributes) UnmarshalBinary(b []byte) error {
	var res QueryAttributes
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
func (m *QueryAttributes) Json() string {
	json, err := json.MarshalIndent(m, "  ", "  ")
	if err != nil {
		log.Fatal(err)
	}
	return string(json)
}
