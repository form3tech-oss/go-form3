// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"log"
	"strconv"

	"github.com/form3tech-oss/go-form3/v2/pkg/client"
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AccountRequestCreate account request create
// swagger:model AccountRequestCreate
type AccountRequestCreate struct {

	// attributes
	// Required: true
	Attributes *AccountRequestAttributes `json:"attributes"`

	// Account Request ID
	// Required: true
	// Format: uuid
	ID strfmt.UUID `json:"id"`

	// Unique ID of the organisation this resource is created by
	// Required: true
	// Format: uuid
	OrganisationID strfmt.UUID `json:"organisation_id"`

	// relationships
	Relationships *AccountRequestCreateRelationships `json:"relationships,omitempty"`

	// type
	// Required: true
	// Enum: [account_requests]
	Type string `json:"type"`
}

func AccountRequestCreateWithDefaults(defaults client.Defaults) *AccountRequestCreate {
	return &AccountRequestCreate{

		Attributes: AccountRequestAttributesWithDefaults(defaults),

		ID: defaults.GetStrfmtUUID("AccountRequestCreate", "id"),

		OrganisationID: defaults.GetStrfmtUUID("AccountRequestCreate", "organisation_id"),

		Relationships: AccountRequestCreateRelationshipsWithDefaults(defaults),

		Type: defaults.GetString("AccountRequestCreate", "type"),
	}
}

func (m *AccountRequestCreate) WithAttributes(attributes AccountRequestAttributes) *AccountRequestCreate {

	m.Attributes = &attributes

	return m
}

func (m *AccountRequestCreate) WithoutAttributes() *AccountRequestCreate {
	m.Attributes = nil
	return m
}

func (m *AccountRequestCreate) WithID(id strfmt.UUID) *AccountRequestCreate {

	m.ID = id

	return m
}

func (m *AccountRequestCreate) WithOrganisationID(organisationID strfmt.UUID) *AccountRequestCreate {

	m.OrganisationID = organisationID

	return m
}

func (m *AccountRequestCreate) WithRelationships(relationships AccountRequestCreateRelationships) *AccountRequestCreate {

	m.Relationships = &relationships

	return m
}

func (m *AccountRequestCreate) WithoutRelationships() *AccountRequestCreate {
	m.Relationships = nil
	return m
}

func (m *AccountRequestCreate) WithType(typeVar string) *AccountRequestCreate {

	m.Type = typeVar

	return m
}

// Validate validates this account request create
func (m *AccountRequestCreate) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAttributes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrganisationID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRelationships(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AccountRequestCreate) validateAttributes(formats strfmt.Registry) error {

	if err := validate.Required("attributes", "body", m.Attributes); err != nil {
		return err
	}

	if m.Attributes != nil {
		if err := m.Attributes.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("attributes")
			}
			return err
		}
	}

	return nil
}

func (m *AccountRequestCreate) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", strfmt.UUID(m.ID)); err != nil {
		return err
	}

	if err := validate.FormatOf("id", "body", "uuid", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *AccountRequestCreate) validateOrganisationID(formats strfmt.Registry) error {

	if err := validate.Required("organisation_id", "body", strfmt.UUID(m.OrganisationID)); err != nil {
		return err
	}

	if err := validate.FormatOf("organisation_id", "body", "uuid", m.OrganisationID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *AccountRequestCreate) validateRelationships(formats strfmt.Registry) error {

	if swag.IsZero(m.Relationships) { // not required
		return nil
	}

	if m.Relationships != nil {
		if err := m.Relationships.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("relationships")
			}
			return err
		}
	}

	return nil
}

var accountRequestCreateTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["account_requests"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		accountRequestCreateTypeTypePropEnum = append(accountRequestCreateTypeTypePropEnum, v)
	}
}

const (

	// AccountRequestCreateTypeAccountRequests captures enum value "account_requests"
	AccountRequestCreateTypeAccountRequests string = "account_requests"
)

// prop value enum
func (m *AccountRequestCreate) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, accountRequestCreateTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *AccountRequestCreate) validateType(formats strfmt.Registry) error {

	if err := validate.RequiredString("type", "body", string(m.Type)); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AccountRequestCreate) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AccountRequestCreate) UnmarshalBinary(b []byte) error {
	var res AccountRequestCreate
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
func (m *AccountRequestCreate) Json() string {
	json, err := json.MarshalIndent(m, "  ", "  ")
	if err != nil {
		log.Fatal(err)
	}
	return string(json)
}

// AccountRequestCreateRelationships account request create relationships
// swagger:model AccountRequestCreateRelationships
type AccountRequestCreateRelationships struct {

	// master account
	MasterAccount *AccountRequestCreateRelationshipsMasterAccount `json:"master_account,omitempty"`
}

func AccountRequestCreateRelationshipsWithDefaults(defaults client.Defaults) *AccountRequestCreateRelationships {
	return &AccountRequestCreateRelationships{

		MasterAccount: AccountRequestCreateRelationshipsMasterAccountWithDefaults(defaults),
	}
}

func (m *AccountRequestCreateRelationships) WithMasterAccount(masterAccount AccountRequestCreateRelationshipsMasterAccount) *AccountRequestCreateRelationships {

	m.MasterAccount = &masterAccount

	return m
}

func (m *AccountRequestCreateRelationships) WithoutMasterAccount() *AccountRequestCreateRelationships {
	m.MasterAccount = nil
	return m
}

// Validate validates this account request create relationships
func (m *AccountRequestCreateRelationships) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMasterAccount(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AccountRequestCreateRelationships) validateMasterAccount(formats strfmt.Registry) error {

	if swag.IsZero(m.MasterAccount) { // not required
		return nil
	}

	if m.MasterAccount != nil {
		if err := m.MasterAccount.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("relationships" + "." + "master_account")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AccountRequestCreateRelationships) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AccountRequestCreateRelationships) UnmarshalBinary(b []byte) error {
	var res AccountRequestCreateRelationships
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
func (m *AccountRequestCreateRelationships) Json() string {
	json, err := json.MarshalIndent(m, "  ", "  ")
	if err != nil {
		log.Fatal(err)
	}
	return string(json)
}

// AccountRequestCreateRelationshipsMasterAccount account request create relationships master account
// swagger:model AccountRequestCreateRelationshipsMasterAccount
type AccountRequestCreateRelationshipsMasterAccount struct {

	// data
	Data []*AccountReference `json:"data"`
}

func AccountRequestCreateRelationshipsMasterAccountWithDefaults(defaults client.Defaults) *AccountRequestCreateRelationshipsMasterAccount {
	return &AccountRequestCreateRelationshipsMasterAccount{

		Data: make([]*AccountReference, 0),
	}
}

func (m *AccountRequestCreateRelationshipsMasterAccount) WithData(data []*AccountReference) *AccountRequestCreateRelationshipsMasterAccount {

	m.Data = data

	return m
}

// Validate validates this account request create relationships master account
func (m *AccountRequestCreateRelationshipsMasterAccount) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AccountRequestCreateRelationshipsMasterAccount) validateData(formats strfmt.Registry) error {

	if swag.IsZero(m.Data) { // not required
		return nil
	}

	for i := 0; i < len(m.Data); i++ {
		if swag.IsZero(m.Data[i]) { // not required
			continue
		}

		if m.Data[i] != nil {
			if err := m.Data[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("relationships" + "." + "master_account" + "." + "data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *AccountRequestCreateRelationshipsMasterAccount) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AccountRequestCreateRelationshipsMasterAccount) UnmarshalBinary(b []byte) error {
	var res AccountRequestCreateRelationshipsMasterAccount
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
func (m *AccountRequestCreateRelationshipsMasterAccount) Json() string {
	json, err := json.MarshalIndent(m, "  ", "  ")
	if err != nil {
		log.Fatal(err)
	}
	return string(json)
}
