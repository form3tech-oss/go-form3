// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"log"
	"strconv"

	"github.com/form3tech-oss/go-form3/v6/pkg/client"
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NewReportRequestFilter new report request filter
// swagger:model NewReportRequestFilter
type NewReportRequestFilter struct {

	// date from
	// Format: date
	DateFrom *strfmt.Date `json:"date_from,omitempty"`

	// date to
	// Format: date
	DateTo *strfmt.Date `json:"date_to,omitempty"`

	// report users
	// Required: true
	ReportUsers []*NewReportRequestReportUser `json:"report_users"`
}

func NewReportRequestFilterWithDefaults(defaults client.Defaults) *NewReportRequestFilter {
	return &NewReportRequestFilter{

		DateFrom: defaults.GetStrfmtDatePtr("NewReportRequestFilter", "date_from"),

		DateTo: defaults.GetStrfmtDatePtr("NewReportRequestFilter", "date_to"),

		ReportUsers: make([]*NewReportRequestReportUser, 0),
	}
}

func (m *NewReportRequestFilter) WithDateFrom(dateFrom strfmt.Date) *NewReportRequestFilter {

	m.DateFrom = &dateFrom

	return m
}

func (m *NewReportRequestFilter) WithoutDateFrom() *NewReportRequestFilter {
	m.DateFrom = nil
	return m
}

func (m *NewReportRequestFilter) WithDateTo(dateTo strfmt.Date) *NewReportRequestFilter {

	m.DateTo = &dateTo

	return m
}

func (m *NewReportRequestFilter) WithoutDateTo() *NewReportRequestFilter {
	m.DateTo = nil
	return m
}

func (m *NewReportRequestFilter) WithReportUsers(reportUsers []*NewReportRequestReportUser) *NewReportRequestFilter {

	m.ReportUsers = reportUsers

	return m
}

// Validate validates this new report request filter
func (m *NewReportRequestFilter) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDateFrom(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDateTo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReportUsers(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NewReportRequestFilter) validateDateFrom(formats strfmt.Registry) error {

	if swag.IsZero(m.DateFrom) { // not required
		return nil
	}

	if err := validate.FormatOf("date_from", "body", "date", m.DateFrom.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *NewReportRequestFilter) validateDateTo(formats strfmt.Registry) error {

	if swag.IsZero(m.DateTo) { // not required
		return nil
	}

	if err := validate.FormatOf("date_to", "body", "date", m.DateTo.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *NewReportRequestFilter) validateReportUsers(formats strfmt.Registry) error {

	if err := validate.Required("report_users", "body", m.ReportUsers); err != nil {
		return err
	}

	for i := 0; i < len(m.ReportUsers); i++ {
		if swag.IsZero(m.ReportUsers[i]) { // not required
			continue
		}

		if m.ReportUsers[i] != nil {
			if err := m.ReportUsers[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("report_users" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *NewReportRequestFilter) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NewReportRequestFilter) UnmarshalBinary(b []byte) error {
	var res NewReportRequestFilter
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
func (m *NewReportRequestFilter) Json() string {
	json, err := json.MarshalIndent(m, "  ", "  ")
	if err != nil {
		log.Fatal(err)
	}
	return string(json)
}
