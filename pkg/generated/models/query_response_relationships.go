// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"log"

	"github.com/form3tech-oss/go-form3/v4/pkg/client"
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// QueryResponseRelationships query response relationships
// swagger:model QueryResponseRelationships
type QueryResponseRelationships struct {

	// query
	Query *RelationshipsFullQuery `json:"query,omitempty"`

	// query response admission
	QueryResponseAdmission *RelationshipQueryResponseAdmission `json:"query_response_admission,omitempty"`

	// query response submission
	QueryResponseSubmission *RelationshipQueryResponseSubmission `json:"query_response_submission,omitempty"`
}

func QueryResponseRelationshipsWithDefaults(defaults client.Defaults) *QueryResponseRelationships {
	return &QueryResponseRelationships{

		Query: RelationshipsFullQueryWithDefaults(defaults),

		QueryResponseAdmission: RelationshipQueryResponseAdmissionWithDefaults(defaults),

		QueryResponseSubmission: RelationshipQueryResponseSubmissionWithDefaults(defaults),
	}
}

func (m *QueryResponseRelationships) WithQuery(query RelationshipsFullQuery) *QueryResponseRelationships {

	m.Query = &query

	return m
}

func (m *QueryResponseRelationships) WithoutQuery() *QueryResponseRelationships {
	m.Query = nil
	return m
}

func (m *QueryResponseRelationships) WithQueryResponseAdmission(queryResponseAdmission RelationshipQueryResponseAdmission) *QueryResponseRelationships {

	m.QueryResponseAdmission = &queryResponseAdmission

	return m
}

func (m *QueryResponseRelationships) WithoutQueryResponseAdmission() *QueryResponseRelationships {
	m.QueryResponseAdmission = nil
	return m
}

func (m *QueryResponseRelationships) WithQueryResponseSubmission(queryResponseSubmission RelationshipQueryResponseSubmission) *QueryResponseRelationships {

	m.QueryResponseSubmission = &queryResponseSubmission

	return m
}

func (m *QueryResponseRelationships) WithoutQueryResponseSubmission() *QueryResponseRelationships {
	m.QueryResponseSubmission = nil
	return m
}

// Validate validates this query response relationships
func (m *QueryResponseRelationships) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateQuery(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQueryResponseAdmission(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQueryResponseSubmission(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *QueryResponseRelationships) validateQuery(formats strfmt.Registry) error {

	if swag.IsZero(m.Query) { // not required
		return nil
	}

	if m.Query != nil {
		if err := m.Query.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("query")
			}
			return err
		}
	}

	return nil
}

func (m *QueryResponseRelationships) validateQueryResponseAdmission(formats strfmt.Registry) error {

	if swag.IsZero(m.QueryResponseAdmission) { // not required
		return nil
	}

	if m.QueryResponseAdmission != nil {
		if err := m.QueryResponseAdmission.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("query_response_admission")
			}
			return err
		}
	}

	return nil
}

func (m *QueryResponseRelationships) validateQueryResponseSubmission(formats strfmt.Registry) error {

	if swag.IsZero(m.QueryResponseSubmission) { // not required
		return nil
	}

	if m.QueryResponseSubmission != nil {
		if err := m.QueryResponseSubmission.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("query_response_submission")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *QueryResponseRelationships) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *QueryResponseRelationships) UnmarshalBinary(b []byte) error {
	var res QueryResponseRelationships
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
func (m *QueryResponseRelationships) Json() string {
	json, err := json.MarshalIndent(m, "  ", "  ")
	if err != nil {
		log.Fatal(err)
	}
	return string(json)
}
