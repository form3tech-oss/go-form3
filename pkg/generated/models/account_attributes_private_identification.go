// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"log"
	"strconv"

	"github.com/form3tech-oss/go-form3/pkg/client"
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AccountAttributesPrivateIdentification account attributes private identification
// swagger:model AccountAttributesPrivateIdentification
type AccountAttributesPrivateIdentification struct {

	// address
	Address []string `json:"address"`

	// birth country
	// Pattern: ^[A-Z]{2}$
	BirthCountry string `json:"birth_country,omitempty"`

	// Customer birth date
	// Format: date
	BirthDate *strfmt.Date `json:"birth_date,omitempty"`

	// city
	// Max Length: 35
	// Min Length: 1
	City string `json:"city,omitempty"`

	// country
	// Pattern: ^[A-Z]{2}$
	Country string `json:"country,omitempty"`

	// document number
	DocumentNumber string `json:"document_number,omitempty"`

	// Customer first name.
	// Max Length: 40
	// Min Length: 1
	FirstName string `json:"first_name,omitempty"`

	// Customer last name.
	// Max Length: 40
	// Min Length: 1
	LastName string `json:"last_name,omitempty"`

	// Customer title.
	// Max Length: 40
	// Min Length: 1
	Title string `json:"title,omitempty"`
}

func AccountAttributesPrivateIdentificationWithDefaults(defaults client.Defaults) *AccountAttributesPrivateIdentification {
	return &AccountAttributesPrivateIdentification{

		Address: make([]string, 0),

		BirthCountry: defaults.GetString("AccountAttributesPrivateIdentification", "birth_country"),

		BirthDate: defaults.GetStrfmtDatePtr("AccountAttributesPrivateIdentification", "birth_date"),

		City: defaults.GetString("AccountAttributesPrivateIdentification", "city"),

		Country: defaults.GetString("AccountAttributesPrivateIdentification", "country"),

		DocumentNumber: defaults.GetString("AccountAttributesPrivateIdentification", "document_number"),

		FirstName: defaults.GetString("AccountAttributesPrivateIdentification", "first_name"),

		LastName: defaults.GetString("AccountAttributesPrivateIdentification", "last_name"),

		Title: defaults.GetString("AccountAttributesPrivateIdentification", "title"),
	}
}

func (m *AccountAttributesPrivateIdentification) WithAddress(address []string) *AccountAttributesPrivateIdentification {

	m.Address = address

	return m
}

func (m *AccountAttributesPrivateIdentification) WithBirthCountry(birthCountry string) *AccountAttributesPrivateIdentification {

	m.BirthCountry = birthCountry

	return m
}

func (m *AccountAttributesPrivateIdentification) WithBirthDate(birthDate strfmt.Date) *AccountAttributesPrivateIdentification {

	m.BirthDate = &birthDate

	return m
}

func (m *AccountAttributesPrivateIdentification) WithoutBirthDate() *AccountAttributesPrivateIdentification {
	m.BirthDate = nil
	return m
}

func (m *AccountAttributesPrivateIdentification) WithCity(city string) *AccountAttributesPrivateIdentification {

	m.City = city

	return m
}

func (m *AccountAttributesPrivateIdentification) WithCountry(country string) *AccountAttributesPrivateIdentification {

	m.Country = country

	return m
}

func (m *AccountAttributesPrivateIdentification) WithDocumentNumber(documentNumber string) *AccountAttributesPrivateIdentification {

	m.DocumentNumber = documentNumber

	return m
}

func (m *AccountAttributesPrivateIdentification) WithFirstName(firstName string) *AccountAttributesPrivateIdentification {

	m.FirstName = firstName

	return m
}

func (m *AccountAttributesPrivateIdentification) WithLastName(lastName string) *AccountAttributesPrivateIdentification {

	m.LastName = lastName

	return m
}

func (m *AccountAttributesPrivateIdentification) WithTitle(title string) *AccountAttributesPrivateIdentification {

	m.Title = title

	return m
}

// Validate validates this account attributes private identification
func (m *AccountAttributesPrivateIdentification) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBirthCountry(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBirthDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCountry(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFirstName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTitle(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AccountAttributesPrivateIdentification) validateAddress(formats strfmt.Registry) error {

	if swag.IsZero(m.Address) { // not required
		return nil
	}

	for i := 0; i < len(m.Address); i++ {

		if err := validate.MinLength("address"+"."+strconv.Itoa(i), "body", string(m.Address[i]), 1); err != nil {
			return err
		}

		if err := validate.MaxLength("address"+"."+strconv.Itoa(i), "body", string(m.Address[i]), 140); err != nil {
			return err
		}

	}

	return nil
}

func (m *AccountAttributesPrivateIdentification) validateBirthCountry(formats strfmt.Registry) error {

	if swag.IsZero(m.BirthCountry) { // not required
		return nil
	}

	if err := validate.Pattern("birth_country", "body", string(m.BirthCountry), `^[A-Z]{2}$`); err != nil {
		return err
	}

	return nil
}

func (m *AccountAttributesPrivateIdentification) validateBirthDate(formats strfmt.Registry) error {

	if swag.IsZero(m.BirthDate) { // not required
		return nil
	}

	if err := validate.FormatOf("birth_date", "body", "date", m.BirthDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *AccountAttributesPrivateIdentification) validateCity(formats strfmt.Registry) error {

	if swag.IsZero(m.City) { // not required
		return nil
	}

	if err := validate.MinLength("city", "body", string(m.City), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("city", "body", string(m.City), 35); err != nil {
		return err
	}

	return nil
}

func (m *AccountAttributesPrivateIdentification) validateCountry(formats strfmt.Registry) error {

	if swag.IsZero(m.Country) { // not required
		return nil
	}

	if err := validate.Pattern("country", "body", string(m.Country), `^[A-Z]{2}$`); err != nil {
		return err
	}

	return nil
}

func (m *AccountAttributesPrivateIdentification) validateFirstName(formats strfmt.Registry) error {

	if swag.IsZero(m.FirstName) { // not required
		return nil
	}

	if err := validate.MinLength("first_name", "body", string(m.FirstName), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("first_name", "body", string(m.FirstName), 40); err != nil {
		return err
	}

	return nil
}

func (m *AccountAttributesPrivateIdentification) validateLastName(formats strfmt.Registry) error {

	if swag.IsZero(m.LastName) { // not required
		return nil
	}

	if err := validate.MinLength("last_name", "body", string(m.LastName), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("last_name", "body", string(m.LastName), 40); err != nil {
		return err
	}

	return nil
}

func (m *AccountAttributesPrivateIdentification) validateTitle(formats strfmt.Registry) error {

	if swag.IsZero(m.Title) { // not required
		return nil
	}

	if err := validate.MinLength("title", "body", string(m.Title), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("title", "body", string(m.Title), 40); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AccountAttributesPrivateIdentification) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AccountAttributesPrivateIdentification) UnmarshalBinary(b []byte) error {
	var res AccountAttributesPrivateIdentification
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
func (m *AccountAttributesPrivateIdentification) Json() string {
	json, err := json.MarshalIndent(m, "  ", "  ")
	if err != nil {
		log.Fatal(err)
	}
	return string(json)
}
