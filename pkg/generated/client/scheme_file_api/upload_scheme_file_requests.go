// Code generated by go-swagger; DO NOT EDIT.

package scheme_file_api

import (
	"context"
	"io"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// Client.UploadSchemeFile creates a new UploadSchemeFileRequest object
// with the default values initialized.
func (c *Client) UploadSchemeFile() *UploadSchemeFileRequest {
	var ()
	return &UploadSchemeFileRequest{

		XForm3UploadPart: c.Defaults.GetString("UploadSchemeFile", "X-Form3-Upload-Part"),

		// TODO - stream Payload: io.ReadCloser

		SchemeFileID: c.Defaults.GetStrfmtUUID("UploadSchemeFile", "scheme_file_id"),

		timeout: cr.DefaultTimeout,

		transport: c.transport,
		formats:   c.formats,
	}
}

type UploadSchemeFileRequest struct {

	/*XForm3UploadPart      Which part of the file we are uploading      */

	XForm3UploadPart string

	/*Payload*/

	io.ReadCloser

	/*SchemeFileID      Scheme File Id      */

	SchemeFileID strfmt.UUID

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client

	transport runtime.ClientTransport
	formats   strfmt.Registry
}

func (o *UploadSchemeFileRequest) FromJson(j string) (*UploadSchemeFileRequest, error) {

	return o, nil
}

func (o *UploadSchemeFileRequest) WithXForm3UploadPart(xForm3UploadPart string) *UploadSchemeFileRequest {

	o.XForm3UploadPart = xForm3UploadPart

	return o
}

func (o *UploadSchemeFileRequest) WithSchemeFileID(schemeFileID strfmt.UUID) *UploadSchemeFileRequest {

	o.SchemeFileID = schemeFileID

	return o
}

// ////////////////
// WithContext adds the context to the upload scheme file Request
func (o *UploadSchemeFileRequest) WithContext(ctx context.Context) *UploadSchemeFileRequest {
	o.Context = ctx
	return o
}

// WithHTTPClient adds the HTTPClient to the upload scheme file Request
func (o *UploadSchemeFileRequest) WithHTTPClient(client *http.Client) *UploadSchemeFileRequest {
	o.HTTPClient = client
	return o
}

// WriteToRequest writes these Request to a swagger request
func (o *UploadSchemeFileRequest) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// header param X-Form3-Upload-Part
	if err := r.SetHeaderParam("X-Form3-Upload-Part", o.XForm3UploadPart); err != nil {
		return err
	}

	// ISBODYPARAM
	if o.ReadCloser != nil {
		if err := r.SetBodyParam(o.ReadCloser); err != nil {
			return err
		}
	}

	// path param scheme_file_id
	if err := r.SetPathParam("scheme_file_id", o.SchemeFileID.String()); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
