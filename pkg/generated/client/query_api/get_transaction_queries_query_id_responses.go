// Code generated by go-swagger; DO NOT EDIT.

package query_api

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/form3tech-oss/go-form3/v4/pkg/generated/models"
)

// GetTransactionQueriesQueryIDReader is a Reader for the GetTransactionQueriesQueryID structure.
type GetTransactionQueriesQueryIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetTransactionQueriesQueryIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetTransactionQueriesQueryIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewGetTransactionQueriesQueryIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewGetTransactionQueriesQueryIDForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetTransactionQueriesQueryIDOK creates a GetTransactionQueriesQueryIDOK with default headers values
func NewGetTransactionQueriesQueryIDOK() *GetTransactionQueriesQueryIDOK {
	return &GetTransactionQueriesQueryIDOK{}
}

/*GetTransactionQueriesQueryIDOK handles this case with default header values.

query response
*/
type GetTransactionQueriesQueryIDOK struct {

	//Payload

	// isStream: false
	*models.QueryFetchResponse
}

func (o *GetTransactionQueriesQueryIDOK) Error() string {
	return fmt.Sprintf("[GET /transaction/queries/{query_id}][%d] getTransactionQueriesQueryIdOK", 200)
}

func (o *GetTransactionQueriesQueryIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.QueryFetchResponse = new(models.QueryFetchResponse)

	// response payload

	if err := consumer.Consume(response.Body(), o.QueryFetchResponse); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTransactionQueriesQueryIDBadRequest creates a GetTransactionQueriesQueryIDBadRequest with default headers values
func NewGetTransactionQueriesQueryIDBadRequest() *GetTransactionQueriesQueryIDBadRequest {
	return &GetTransactionQueriesQueryIDBadRequest{}
}

/*GetTransactionQueriesQueryIDBadRequest handles this case with default header values.

bad request
*/
type GetTransactionQueriesQueryIDBadRequest struct {

	//Payload

	// isStream: false
	*models.APIError
}

func (o *GetTransactionQueriesQueryIDBadRequest) Error() string {
	return fmt.Sprintf("[GET /transaction/queries/{query_id}][%d] getTransactionQueriesQueryIdBadRequest", 400)
}

func (o *GetTransactionQueriesQueryIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.APIError = new(models.APIError)

	// response payload

	if err := consumer.Consume(response.Body(), o.APIError); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTransactionQueriesQueryIDForbidden creates a GetTransactionQueriesQueryIDForbidden with default headers values
func NewGetTransactionQueriesQueryIDForbidden() *GetTransactionQueriesQueryIDForbidden {
	return &GetTransactionQueriesQueryIDForbidden{}
}

/*GetTransactionQueriesQueryIDForbidden handles this case with default header values.

forbidden
*/
type GetTransactionQueriesQueryIDForbidden struct {

	//Payload

	// isStream: false
	*models.APIError
}

func (o *GetTransactionQueriesQueryIDForbidden) Error() string {
	return fmt.Sprintf("[GET /transaction/queries/{query_id}][%d] getTransactionQueriesQueryIdForbidden", 403)
}

func (o *GetTransactionQueriesQueryIDForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.APIError = new(models.APIError)

	// response payload

	if err := consumer.Consume(response.Body(), o.APIError); err != nil && err != io.EOF {
		return err
	}

	return nil
}
