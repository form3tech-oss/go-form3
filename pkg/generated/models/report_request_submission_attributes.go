// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"log"

	"github.com/form3tech-oss/go-form3/v6/pkg/client"
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ReportRequestSubmissionAttributes report request submission attributes
// swagger:model ReportRequestSubmissionAttributes
type ReportRequestSubmissionAttributes struct {

	// scheme status code
	SchemeStatusCode string `json:"scheme_status_code,omitempty"`

	// status
	// Required: true
	Status *ReportRequestSubmissionStatus `json:"status"`

	// status reason
	StatusReason string `json:"status_reason,omitempty"`
}

func ReportRequestSubmissionAttributesWithDefaults(defaults client.Defaults) *ReportRequestSubmissionAttributes {
	return &ReportRequestSubmissionAttributes{

		SchemeStatusCode: defaults.GetString("ReportRequestSubmissionAttributes", "scheme_status_code"),

		// TODO Status: ReportRequestSubmissionStatus,

		StatusReason: defaults.GetString("ReportRequestSubmissionAttributes", "status_reason"),
	}
}

func (m *ReportRequestSubmissionAttributes) WithSchemeStatusCode(schemeStatusCode string) *ReportRequestSubmissionAttributes {

	m.SchemeStatusCode = schemeStatusCode

	return m
}

func (m *ReportRequestSubmissionAttributes) WithStatus(status ReportRequestSubmissionStatus) *ReportRequestSubmissionAttributes {

	m.Status = &status

	return m
}

func (m *ReportRequestSubmissionAttributes) WithoutStatus() *ReportRequestSubmissionAttributes {
	m.Status = nil
	return m
}

func (m *ReportRequestSubmissionAttributes) WithStatusReason(statusReason string) *ReportRequestSubmissionAttributes {

	m.StatusReason = statusReason

	return m
}

// Validate validates this report request submission attributes
func (m *ReportRequestSubmissionAttributes) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ReportRequestSubmissionAttributes) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	if m.Status != nil {
		if err := m.Status.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ReportRequestSubmissionAttributes) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ReportRequestSubmissionAttributes) UnmarshalBinary(b []byte) error {
	var res ReportRequestSubmissionAttributes
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
func (m *ReportRequestSubmissionAttributes) Json() string {
	json, err := json.MarshalIndent(m, "  ", "  ")
	if err != nil {
		log.Fatal(err)
	}
	return string(json)
}
