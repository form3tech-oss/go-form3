// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"log"

	"github.com/form3tech-oss/go-form3/v7/pkg/client"
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TransactionFileAttributes transaction file attributes
// swagger:model TransactionFileAttributes
type TransactionFileAttributes struct {

	// The format of the file that will be submitted/admitted to Form3
	// Required: true
	// Enum: ["ndjson","standard18","messaging","ddica_create","ddica_cancel"]
	FileFormat *string `json:"file_format"`

	// Hashed content of the file
	// Required: true
	// Min Length: 1
	FileHash *string `json:"file_hash"`

	// The size of the file to be uploaded - number of bytes. Max size is 1.4 Gigabyte
	// Required: true
	// Maximum: 1.4e+09
	FileSize *int64 `json:"file_size"`

	// The algorithm used to generate the signature
	// Required: true
	// Enum: ["SHA256"]
	HashingAlgorithm *string `json:"hashing_algorithm"`

	// The count of chunks to be uploaded to the resource
	// Required: true
	// Minimum: 1
	NumberOfParts *int64 `json:"number_of_parts"`

	// Scheme/gateway that the file is to be processed by
	// Required: true
	// Enum: ["BACS"]
	PaymentScheme *string `json:"payment_scheme"`

	// The count of transactions that will be submitted in the file
	// Required: true
	// Maximum: 1.2e+06
	TransactionCount *int64 `json:"transaction_count"`

	// All purpose key-value fields containing file specific data (read only).
	TransactionData interface{} `json:"transaction_data,omitempty"`

	// The sum value of the transactions will be submitted in the file
	// Pattern: ^[0-9]{0,20}(?:\.[0-9]{1,10})?$
	TransactionSum string `json:"transaction_sum,omitempty"`
}

func TransactionFileAttributesWithDefaults(defaults client.Defaults) *TransactionFileAttributes {
	return &TransactionFileAttributes{

		FileFormat: defaults.GetStringPtr("TransactionFileAttributes", "file_format"),

		FileHash: defaults.GetStringPtr("TransactionFileAttributes", "file_hash"),

		FileSize: defaults.GetInt64Ptr("TransactionFileAttributes", "file_size"),

		HashingAlgorithm: defaults.GetStringPtr("TransactionFileAttributes", "hashing_algorithm"),

		NumberOfParts: defaults.GetInt64Ptr("TransactionFileAttributes", "number_of_parts"),

		PaymentScheme: defaults.GetStringPtr("TransactionFileAttributes", "payment_scheme"),

		TransactionCount: defaults.GetInt64Ptr("TransactionFileAttributes", "transaction_count"),

		// TODO TransactionData: interface{},

		TransactionSum: defaults.GetString("TransactionFileAttributes", "transaction_sum"),
	}
}

func (m *TransactionFileAttributes) WithFileFormat(fileFormat string) *TransactionFileAttributes {

	m.FileFormat = &fileFormat

	return m
}

func (m *TransactionFileAttributes) WithoutFileFormat() *TransactionFileAttributes {
	m.FileFormat = nil
	return m
}

func (m *TransactionFileAttributes) WithFileHash(fileHash string) *TransactionFileAttributes {

	m.FileHash = &fileHash

	return m
}

func (m *TransactionFileAttributes) WithoutFileHash() *TransactionFileAttributes {
	m.FileHash = nil
	return m
}

func (m *TransactionFileAttributes) WithFileSize(fileSize int64) *TransactionFileAttributes {

	m.FileSize = &fileSize

	return m
}

func (m *TransactionFileAttributes) WithoutFileSize() *TransactionFileAttributes {
	m.FileSize = nil
	return m
}

func (m *TransactionFileAttributes) WithHashingAlgorithm(hashingAlgorithm string) *TransactionFileAttributes {

	m.HashingAlgorithm = &hashingAlgorithm

	return m
}

func (m *TransactionFileAttributes) WithoutHashingAlgorithm() *TransactionFileAttributes {
	m.HashingAlgorithm = nil
	return m
}

func (m *TransactionFileAttributes) WithNumberOfParts(numberOfParts int64) *TransactionFileAttributes {

	m.NumberOfParts = &numberOfParts

	return m
}

func (m *TransactionFileAttributes) WithoutNumberOfParts() *TransactionFileAttributes {
	m.NumberOfParts = nil
	return m
}

func (m *TransactionFileAttributes) WithPaymentScheme(paymentScheme string) *TransactionFileAttributes {

	m.PaymentScheme = &paymentScheme

	return m
}

func (m *TransactionFileAttributes) WithoutPaymentScheme() *TransactionFileAttributes {
	m.PaymentScheme = nil
	return m
}

func (m *TransactionFileAttributes) WithTransactionCount(transactionCount int64) *TransactionFileAttributes {

	m.TransactionCount = &transactionCount

	return m
}

func (m *TransactionFileAttributes) WithoutTransactionCount() *TransactionFileAttributes {
	m.TransactionCount = nil
	return m
}

func (m *TransactionFileAttributes) WithTransactionData(transactionData interface{}) *TransactionFileAttributes {

	m.TransactionData = transactionData

	return m
}

func (m *TransactionFileAttributes) WithTransactionSum(transactionSum string) *TransactionFileAttributes {

	m.TransactionSum = transactionSum

	return m
}

// Validate validates this transaction file attributes
func (m *TransactionFileAttributes) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFileFormat(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFileHash(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFileSize(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHashingAlgorithm(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNumberOfParts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePaymentScheme(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTransactionCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTransactionSum(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var transactionFileAttributesTypeFileFormatPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ndjson","standard18","messaging","ddica_create","ddica_cancel"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		transactionFileAttributesTypeFileFormatPropEnum = append(transactionFileAttributesTypeFileFormatPropEnum, v)
	}
}

const (

	// TransactionFileAttributesFileFormatNdjson captures enum value "ndjson"
	TransactionFileAttributesFileFormatNdjson string = "ndjson"

	// TransactionFileAttributesFileFormatStandard18 captures enum value "standard18"
	TransactionFileAttributesFileFormatStandard18 string = "standard18"

	// TransactionFileAttributesFileFormatMessaging captures enum value "messaging"
	TransactionFileAttributesFileFormatMessaging string = "messaging"

	// TransactionFileAttributesFileFormatDdicaCreate captures enum value "ddica_create"
	TransactionFileAttributesFileFormatDdicaCreate string = "ddica_create"

	// TransactionFileAttributesFileFormatDdicaCancel captures enum value "ddica_cancel"
	TransactionFileAttributesFileFormatDdicaCancel string = "ddica_cancel"
)

// prop value enum
func (m *TransactionFileAttributes) validateFileFormatEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, transactionFileAttributesTypeFileFormatPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *TransactionFileAttributes) validateFileFormat(formats strfmt.Registry) error {

	if err := validate.Required("file_format", "body", m.FileFormat); err != nil {
		return err
	}

	// value enum
	if err := m.validateFileFormatEnum("file_format", "body", *m.FileFormat); err != nil {
		return err
	}

	return nil
}

func (m *TransactionFileAttributes) validateFileHash(formats strfmt.Registry) error {

	if err := validate.Required("file_hash", "body", m.FileHash); err != nil {
		return err
	}

	if err := validate.MinLength("file_hash", "body", *m.FileHash, 1); err != nil {
		return err
	}

	return nil
}

func (m *TransactionFileAttributes) validateFileSize(formats strfmt.Registry) error {

	if err := validate.Required("file_size", "body", m.FileSize); err != nil {
		return err
	}

	if err := validate.MaximumInt("file_size", "body", int64(*m.FileSize), 1.4e+09, false); err != nil {
		return err
	}

	return nil
}

var transactionFileAttributesTypeHashingAlgorithmPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["SHA256"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		transactionFileAttributesTypeHashingAlgorithmPropEnum = append(transactionFileAttributesTypeHashingAlgorithmPropEnum, v)
	}
}

const (

	// TransactionFileAttributesHashingAlgorithmSHA256 captures enum value "SHA256"
	TransactionFileAttributesHashingAlgorithmSHA256 string = "SHA256"
)

// prop value enum
func (m *TransactionFileAttributes) validateHashingAlgorithmEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, transactionFileAttributesTypeHashingAlgorithmPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *TransactionFileAttributes) validateHashingAlgorithm(formats strfmt.Registry) error {

	if err := validate.Required("hashing_algorithm", "body", m.HashingAlgorithm); err != nil {
		return err
	}

	// value enum
	if err := m.validateHashingAlgorithmEnum("hashing_algorithm", "body", *m.HashingAlgorithm); err != nil {
		return err
	}

	return nil
}

func (m *TransactionFileAttributes) validateNumberOfParts(formats strfmt.Registry) error {

	if err := validate.Required("number_of_parts", "body", m.NumberOfParts); err != nil {
		return err
	}

	if err := validate.MinimumInt("number_of_parts", "body", int64(*m.NumberOfParts), 1, false); err != nil {
		return err
	}

	return nil
}

var transactionFileAttributesTypePaymentSchemePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["BACS"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		transactionFileAttributesTypePaymentSchemePropEnum = append(transactionFileAttributesTypePaymentSchemePropEnum, v)
	}
}

const (

	// TransactionFileAttributesPaymentSchemeBACS captures enum value "BACS"
	TransactionFileAttributesPaymentSchemeBACS string = "BACS"
)

// prop value enum
func (m *TransactionFileAttributes) validatePaymentSchemeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, transactionFileAttributesTypePaymentSchemePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *TransactionFileAttributes) validatePaymentScheme(formats strfmt.Registry) error {

	if err := validate.Required("payment_scheme", "body", m.PaymentScheme); err != nil {
		return err
	}

	// value enum
	if err := m.validatePaymentSchemeEnum("payment_scheme", "body", *m.PaymentScheme); err != nil {
		return err
	}

	return nil
}

func (m *TransactionFileAttributes) validateTransactionCount(formats strfmt.Registry) error {

	if err := validate.Required("transaction_count", "body", m.TransactionCount); err != nil {
		return err
	}

	if err := validate.MaximumInt("transaction_count", "body", int64(*m.TransactionCount), 1.2e+06, false); err != nil {
		return err
	}

	return nil
}

func (m *TransactionFileAttributes) validateTransactionSum(formats strfmt.Registry) error {

	if swag.IsZero(m.TransactionSum) { // not required
		return nil
	}

	if err := validate.Pattern("transaction_sum", "body", m.TransactionSum, `^[0-9]{0,20}(?:\.[0-9]{1,10})?$`); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TransactionFileAttributes) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TransactionFileAttributes) UnmarshalBinary(b []byte) error {
	var res TransactionFileAttributes
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
func (m *TransactionFileAttributes) Json() string {
	json, err := json.MarshalIndent(m, "  ", "  ")
	if err != nil {
		log.Fatal(err)
	}
	return string(json)
}
