// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"log"

	"github.com/form3tech-oss/go-form3/v4/pkg/client"
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PaymentAdmissionTask payment admission task
// swagger:model PaymentAdmissionTask
type PaymentAdmissionTask struct {

	// attributes
	Attributes *PaymentAdmissionTaskAttributes `json:"attributes,omitempty"`

	// created on
	// Format: date-time
	CreatedOn strfmt.DateTime `json:"created_on,omitempty"`

	// id
	// Format: uuid
	ID strfmt.UUID `json:"id,omitempty"`

	// modified on
	// Format: date-time
	ModifiedOn strfmt.DateTime `json:"modified_on,omitempty"`

	// Unique ID of the organisation this resource is created by
	// Format: uuid
	OrganisationID strfmt.UUID `json:"organisation_id,omitempty"`

	// relationships
	Relationships *PaymentAdmissionTaskRelationships `json:"relationships,omitempty"`

	// Name of the resource type
	// Pattern: ^[A-Za-z_]*$
	Type string `json:"type,omitempty"`

	// Version number
	// Minimum: 0
	Version *int64 `json:"version,omitempty"`
}

func PaymentAdmissionTaskWithDefaults(defaults client.Defaults) *PaymentAdmissionTask {
	return &PaymentAdmissionTask{

		Attributes: PaymentAdmissionTaskAttributesWithDefaults(defaults),

		CreatedOn: defaults.GetStrfmtDateTime("PaymentAdmissionTask", "created_on"),

		ID: defaults.GetStrfmtUUID("PaymentAdmissionTask", "id"),

		ModifiedOn: defaults.GetStrfmtDateTime("PaymentAdmissionTask", "modified_on"),

		OrganisationID: defaults.GetStrfmtUUID("PaymentAdmissionTask", "organisation_id"),

		Relationships: PaymentAdmissionTaskRelationshipsWithDefaults(defaults),

		Type: defaults.GetString("PaymentAdmissionTask", "type"),

		Version: defaults.GetInt64Ptr("PaymentAdmissionTask", "version"),
	}
}

func (m *PaymentAdmissionTask) WithAttributes(attributes PaymentAdmissionTaskAttributes) *PaymentAdmissionTask {

	m.Attributes = &attributes

	return m
}

func (m *PaymentAdmissionTask) WithoutAttributes() *PaymentAdmissionTask {
	m.Attributes = nil
	return m
}

func (m *PaymentAdmissionTask) WithCreatedOn(createdOn strfmt.DateTime) *PaymentAdmissionTask {

	m.CreatedOn = createdOn

	return m
}

func (m *PaymentAdmissionTask) WithID(id strfmt.UUID) *PaymentAdmissionTask {

	m.ID = id

	return m
}

func (m *PaymentAdmissionTask) WithModifiedOn(modifiedOn strfmt.DateTime) *PaymentAdmissionTask {

	m.ModifiedOn = modifiedOn

	return m
}

func (m *PaymentAdmissionTask) WithOrganisationID(organisationID strfmt.UUID) *PaymentAdmissionTask {

	m.OrganisationID = organisationID

	return m
}

func (m *PaymentAdmissionTask) WithRelationships(relationships PaymentAdmissionTaskRelationships) *PaymentAdmissionTask {

	m.Relationships = &relationships

	return m
}

func (m *PaymentAdmissionTask) WithoutRelationships() *PaymentAdmissionTask {
	m.Relationships = nil
	return m
}

func (m *PaymentAdmissionTask) WithType(typeVar string) *PaymentAdmissionTask {

	m.Type = typeVar

	return m
}

func (m *PaymentAdmissionTask) WithVersion(version int64) *PaymentAdmissionTask {

	m.Version = &version

	return m
}

func (m *PaymentAdmissionTask) WithoutVersion() *PaymentAdmissionTask {
	m.Version = nil
	return m
}

// Validate validates this payment admission task
func (m *PaymentAdmissionTask) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAttributes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedOn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateModifiedOn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrganisationID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRelationships(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVersion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PaymentAdmissionTask) validateAttributes(formats strfmt.Registry) error {

	if swag.IsZero(m.Attributes) { // not required
		return nil
	}

	if m.Attributes != nil {
		if err := m.Attributes.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("attributes")
			}
			return err
		}
	}

	return nil
}

func (m *PaymentAdmissionTask) validateCreatedOn(formats strfmt.Registry) error {

	if swag.IsZero(m.CreatedOn) { // not required
		return nil
	}

	if err := validate.FormatOf("created_on", "body", "date-time", m.CreatedOn.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *PaymentAdmissionTask) validateID(formats strfmt.Registry) error {

	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.FormatOf("id", "body", "uuid", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *PaymentAdmissionTask) validateModifiedOn(formats strfmt.Registry) error {

	if swag.IsZero(m.ModifiedOn) { // not required
		return nil
	}

	if err := validate.FormatOf("modified_on", "body", "date-time", m.ModifiedOn.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *PaymentAdmissionTask) validateOrganisationID(formats strfmt.Registry) error {

	if swag.IsZero(m.OrganisationID) { // not required
		return nil
	}

	if err := validate.FormatOf("organisation_id", "body", "uuid", m.OrganisationID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *PaymentAdmissionTask) validateRelationships(formats strfmt.Registry) error {

	if swag.IsZero(m.Relationships) { // not required
		return nil
	}

	if m.Relationships != nil {
		if err := m.Relationships.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("relationships")
			}
			return err
		}
	}

	return nil
}

func (m *PaymentAdmissionTask) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	if err := validate.Pattern("type", "body", string(m.Type), `^[A-Za-z_]*$`); err != nil {
		return err
	}

	return nil
}

func (m *PaymentAdmissionTask) validateVersion(formats strfmt.Registry) error {

	if swag.IsZero(m.Version) { // not required
		return nil
	}

	if err := validate.MinimumInt("version", "body", int64(*m.Version), 0, false); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PaymentAdmissionTask) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PaymentAdmissionTask) UnmarshalBinary(b []byte) error {
	var res PaymentAdmissionTask
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
func (m *PaymentAdmissionTask) Json() string {
	json, err := json.MarshalIndent(m, "  ", "  ")
	if err != nil {
		log.Fatal(err)
	}
	return string(json)
}

// PaymentAdmissionTaskAttributes payment admission task attributes
// swagger:model PaymentAdmissionTaskAttributes
type PaymentAdmissionTaskAttributes struct {

	// assignee
	Assignee PaymentAdmissionTaskAssignee `json:"assignee,omitempty"`

	// name
	Name PaymentAdmissionTaskName `json:"name,omitempty"`

	// Key Value map that contains the Task result.
	Output map[string]interface{} `json:"output,omitempty"`

	// status
	Status PaymentAdmissionTaskStatus `json:"status,omitempty"`

	// Identifies the workflow for which the task was created
	// Format: uuid
	Workflow strfmt.UUID `json:"workflow,omitempty"`
}

func PaymentAdmissionTaskAttributesWithDefaults(defaults client.Defaults) *PaymentAdmissionTaskAttributes {
	return &PaymentAdmissionTaskAttributes{

		// TODO Assignee: PaymentAdmissionTaskAssignee,

		// TODO Name: PaymentAdmissionTaskName,

		Output: defaults.GetMapStringInterface("PaymentAdmissionTaskAttributes", "output"),

		// TODO Status: PaymentAdmissionTaskStatus,

		Workflow: defaults.GetStrfmtUUID("PaymentAdmissionTaskAttributes", "workflow"),
	}
}

func (m *PaymentAdmissionTaskAttributes) WithAssignee(assignee PaymentAdmissionTaskAssignee) *PaymentAdmissionTaskAttributes {

	m.Assignee = assignee

	return m
}

func (m *PaymentAdmissionTaskAttributes) WithName(name PaymentAdmissionTaskName) *PaymentAdmissionTaskAttributes {

	m.Name = name

	return m
}

func (m *PaymentAdmissionTaskAttributes) WithOutput(output map[string]interface{}) *PaymentAdmissionTaskAttributes {

	m.Output = output

	return m
}

func (m *PaymentAdmissionTaskAttributes) WithStatus(status PaymentAdmissionTaskStatus) *PaymentAdmissionTaskAttributes {

	m.Status = status

	return m
}

func (m *PaymentAdmissionTaskAttributes) WithWorkflow(workflow strfmt.UUID) *PaymentAdmissionTaskAttributes {

	m.Workflow = workflow

	return m
}

// Validate validates this payment admission task attributes
func (m *PaymentAdmissionTaskAttributes) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAssignee(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWorkflow(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PaymentAdmissionTaskAttributes) validateAssignee(formats strfmt.Registry) error {

	if swag.IsZero(m.Assignee) { // not required
		return nil
	}

	if err := m.Assignee.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("attributes" + "." + "assignee")
		}
		return err
	}

	return nil
}

func (m *PaymentAdmissionTaskAttributes) validateName(formats strfmt.Registry) error {

	if swag.IsZero(m.Name) { // not required
		return nil
	}

	if err := m.Name.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("attributes" + "." + "name")
		}
		return err
	}

	return nil
}

func (m *PaymentAdmissionTaskAttributes) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	if err := m.Status.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("attributes" + "." + "status")
		}
		return err
	}

	return nil
}

func (m *PaymentAdmissionTaskAttributes) validateWorkflow(formats strfmt.Registry) error {

	if swag.IsZero(m.Workflow) { // not required
		return nil
	}

	if err := validate.FormatOf("attributes"+"."+"workflow", "body", "uuid", m.Workflow.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PaymentAdmissionTaskAttributes) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PaymentAdmissionTaskAttributes) UnmarshalBinary(b []byte) error {
	var res PaymentAdmissionTaskAttributes
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
func (m *PaymentAdmissionTaskAttributes) Json() string {
	json, err := json.MarshalIndent(m, "  ", "  ")
	if err != nil {
		log.Fatal(err)
	}
	return string(json)
}
