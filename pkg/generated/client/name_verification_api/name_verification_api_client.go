// Code generated by go-swagger; DO NOT EDIT.

// :Form3: Testing!

package name_verification_api

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/form3tech-oss/go-form3/v7/pkg/client"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new name verification api API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry, defaults client.Defaults) *Client {
	return &Client{transport: transport, formats: formats, Defaults: defaults}
}

/*
Client for name verification api API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
	Defaults  client.Defaults
}

// range of operations

/*
create name verification API
*/
func (a *CreateNameVerificationRequest) Do() (*CreateNameVerificationCreated, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CreateNameVerification",
		Method:             "POST",
		PathPattern:        "/organisation/nameverifications",
		ProducesMediaTypes: []string{"application/vnd.api+json", "application/json"},
		ConsumesMediaTypes: []string{"application/vnd.api+json", "application/json"},
		Schemes:            []string{"https"},
		Params:             a,
		Reader:             &CreateNameVerificationReader{formats: a.formats},
		//AuthInfo: authInfo,
		Context: a.Context,
		Client:  a.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateNameVerificationCreated), nil

}

func (a *CreateNameVerificationRequest) MustDo() *CreateNameVerificationCreated {
	r0, err := a.Do()
	if err != nil {
		panic(err)
	}
	return r0
}

/*
get name verification API
*/
func (a *GetNameVerificationRequest) Do() (*GetNameVerificationOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetNameVerification",
		Method:             "GET",
		PathPattern:        "/organisation/nameverifications/{id}",
		ProducesMediaTypes: []string{"application/vnd.api+json", "application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             a,
		Reader:             &GetNameVerificationReader{formats: a.formats},
		//AuthInfo: authInfo,
		Context: a.Context,
		Client:  a.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetNameVerificationOK), nil

}

func (a *GetNameVerificationRequest) MustDo() *GetNameVerificationOK {
	r0, err := a.Do()
	if err != nil {
		panic(err)
	}
	return r0
}

/*
get name verification admission API
*/
func (a *GetNameVerificationAdmissionRequest) Do() (*GetNameVerificationAdmissionOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetNameVerificationAdmission",
		Method:             "GET",
		PathPattern:        "/organisation/nameverifications/{name_verification_id}/admissions/{id}",
		ProducesMediaTypes: []string{"application/vnd.api+json", "application/json"},
		ConsumesMediaTypes: []string{"application/vnd.api+json", "application/json"},
		Schemes:            []string{"https"},
		Params:             a,
		Reader:             &GetNameVerificationAdmissionReader{formats: a.formats},
		//AuthInfo: authInfo,
		Context: a.Context,
		Client:  a.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetNameVerificationAdmissionOK), nil

}

func (a *GetNameVerificationAdmissionRequest) MustDo() *GetNameVerificationAdmissionOK {
	r0, err := a.Do()
	if err != nil {
		panic(err)
	}
	return r0
}

/*
list name verifications API
*/
func (a *ListNameVerificationsRequest) Do() (*ListNameVerificationsOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ListNameVerifications",
		Method:             "GET",
		PathPattern:        "/organisation/nameverifications",
		ProducesMediaTypes: []string{"application/vnd.api+json", "application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             a,
		Reader:             &ListNameVerificationsReader{formats: a.formats},
		//AuthInfo: authInfo,
		Context: a.Context,
		Client:  a.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListNameVerificationsOK), nil

}

func (a *ListNameVerificationsRequest) MustDo() *ListNameVerificationsOK {
	r0, err := a.Do()
	if err != nil {
		panic(err)
	}
	return r0
}

/////////

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
