// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"log"
	"strconv"

	"github.com/form3tech-oss/go-form3/v6/pkg/client"
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ReturnPaymentFetchRelationships return payment fetch relationships
// swagger:model ReturnPaymentFetchRelationships
type ReturnPaymentFetchRelationships struct {

	// ID of the payment resource related to the return
	Payment *RelationshipLinks `json:"payment,omitempty"`

	// return admission
	ReturnAdmission *ReturnPaymentFetchRelationshipsReturnAdmission `json:"return_admission,omitempty"`

	// ID of the return reversal resource related to the return
	ReturnReversal *RelationshipLinks `json:"return_reversal,omitempty"`

	// return submission
	ReturnSubmission *ReturnPaymentFetchRelationshipsReturnSubmission `json:"return_submission,omitempty"`
}

func ReturnPaymentFetchRelationshipsWithDefaults(defaults client.Defaults) *ReturnPaymentFetchRelationships {
	return &ReturnPaymentFetchRelationships{

		Payment: RelationshipLinksWithDefaults(defaults),

		ReturnAdmission: ReturnPaymentFetchRelationshipsReturnAdmissionWithDefaults(defaults),

		ReturnReversal: RelationshipLinksWithDefaults(defaults),

		ReturnSubmission: ReturnPaymentFetchRelationshipsReturnSubmissionWithDefaults(defaults),
	}
}

func (m *ReturnPaymentFetchRelationships) WithPayment(payment RelationshipLinks) *ReturnPaymentFetchRelationships {

	m.Payment = &payment

	return m
}

func (m *ReturnPaymentFetchRelationships) WithoutPayment() *ReturnPaymentFetchRelationships {
	m.Payment = nil
	return m
}

func (m *ReturnPaymentFetchRelationships) WithReturnAdmission(returnAdmission ReturnPaymentFetchRelationshipsReturnAdmission) *ReturnPaymentFetchRelationships {

	m.ReturnAdmission = &returnAdmission

	return m
}

func (m *ReturnPaymentFetchRelationships) WithoutReturnAdmission() *ReturnPaymentFetchRelationships {
	m.ReturnAdmission = nil
	return m
}

func (m *ReturnPaymentFetchRelationships) WithReturnReversal(returnReversal RelationshipLinks) *ReturnPaymentFetchRelationships {

	m.ReturnReversal = &returnReversal

	return m
}

func (m *ReturnPaymentFetchRelationships) WithoutReturnReversal() *ReturnPaymentFetchRelationships {
	m.ReturnReversal = nil
	return m
}

func (m *ReturnPaymentFetchRelationships) WithReturnSubmission(returnSubmission ReturnPaymentFetchRelationshipsReturnSubmission) *ReturnPaymentFetchRelationships {

	m.ReturnSubmission = &returnSubmission

	return m
}

func (m *ReturnPaymentFetchRelationships) WithoutReturnSubmission() *ReturnPaymentFetchRelationships {
	m.ReturnSubmission = nil
	return m
}

// Validate validates this return payment fetch relationships
func (m *ReturnPaymentFetchRelationships) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePayment(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReturnAdmission(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReturnReversal(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReturnSubmission(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ReturnPaymentFetchRelationships) validatePayment(formats strfmt.Registry) error {

	if swag.IsZero(m.Payment) { // not required
		return nil
	}

	if m.Payment != nil {
		if err := m.Payment.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("payment")
			}
			return err
		}
	}

	return nil
}

func (m *ReturnPaymentFetchRelationships) validateReturnAdmission(formats strfmt.Registry) error {

	if swag.IsZero(m.ReturnAdmission) { // not required
		return nil
	}

	if m.ReturnAdmission != nil {
		if err := m.ReturnAdmission.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("return_admission")
			}
			return err
		}
	}

	return nil
}

func (m *ReturnPaymentFetchRelationships) validateReturnReversal(formats strfmt.Registry) error {

	if swag.IsZero(m.ReturnReversal) { // not required
		return nil
	}

	if m.ReturnReversal != nil {
		if err := m.ReturnReversal.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("return_reversal")
			}
			return err
		}
	}

	return nil
}

func (m *ReturnPaymentFetchRelationships) validateReturnSubmission(formats strfmt.Registry) error {

	if swag.IsZero(m.ReturnSubmission) { // not required
		return nil
	}

	if m.ReturnSubmission != nil {
		if err := m.ReturnSubmission.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("return_submission")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ReturnPaymentFetchRelationships) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ReturnPaymentFetchRelationships) UnmarshalBinary(b []byte) error {
	var res ReturnPaymentFetchRelationships
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
func (m *ReturnPaymentFetchRelationships) Json() string {
	json, err := json.MarshalIndent(m, "  ", "  ")
	if err != nil {
		log.Fatal(err)
	}
	return string(json)
}

// ReturnPaymentFetchRelationshipsReturnAdmission return payment fetch relationships return admission
// swagger:model ReturnPaymentFetchRelationshipsReturnAdmission
type ReturnPaymentFetchRelationshipsReturnAdmission struct {

	// Array of Return Admission resources related to the return
	Data []*ReturnAdmissionFetch `json:"data"`
}

func ReturnPaymentFetchRelationshipsReturnAdmissionWithDefaults(defaults client.Defaults) *ReturnPaymentFetchRelationshipsReturnAdmission {
	return &ReturnPaymentFetchRelationshipsReturnAdmission{

		Data: make([]*ReturnAdmissionFetch, 0),
	}
}

func (m *ReturnPaymentFetchRelationshipsReturnAdmission) WithData(data []*ReturnAdmissionFetch) *ReturnPaymentFetchRelationshipsReturnAdmission {

	m.Data = data

	return m
}

// Validate validates this return payment fetch relationships return admission
func (m *ReturnPaymentFetchRelationshipsReturnAdmission) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ReturnPaymentFetchRelationshipsReturnAdmission) validateData(formats strfmt.Registry) error {

	if swag.IsZero(m.Data) { // not required
		return nil
	}

	for i := 0; i < len(m.Data); i++ {
		if swag.IsZero(m.Data[i]) { // not required
			continue
		}

		if m.Data[i] != nil {
			if err := m.Data[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("return_admission" + "." + "data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ReturnPaymentFetchRelationshipsReturnAdmission) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ReturnPaymentFetchRelationshipsReturnAdmission) UnmarshalBinary(b []byte) error {
	var res ReturnPaymentFetchRelationshipsReturnAdmission
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
func (m *ReturnPaymentFetchRelationshipsReturnAdmission) Json() string {
	json, err := json.MarshalIndent(m, "  ", "  ")
	if err != nil {
		log.Fatal(err)
	}
	return string(json)
}

// ReturnPaymentFetchRelationshipsReturnSubmission return payment fetch relationships return submission
// swagger:model ReturnPaymentFetchRelationshipsReturnSubmission
type ReturnPaymentFetchRelationshipsReturnSubmission struct {

	// Array of Return Submission resources related to the return
	Data []*ReturnSubmissionFetch `json:"data"`
}

func ReturnPaymentFetchRelationshipsReturnSubmissionWithDefaults(defaults client.Defaults) *ReturnPaymentFetchRelationshipsReturnSubmission {
	return &ReturnPaymentFetchRelationshipsReturnSubmission{

		Data: make([]*ReturnSubmissionFetch, 0),
	}
}

func (m *ReturnPaymentFetchRelationshipsReturnSubmission) WithData(data []*ReturnSubmissionFetch) *ReturnPaymentFetchRelationshipsReturnSubmission {

	m.Data = data

	return m
}

// Validate validates this return payment fetch relationships return submission
func (m *ReturnPaymentFetchRelationshipsReturnSubmission) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ReturnPaymentFetchRelationshipsReturnSubmission) validateData(formats strfmt.Registry) error {

	if swag.IsZero(m.Data) { // not required
		return nil
	}

	for i := 0; i < len(m.Data); i++ {
		if swag.IsZero(m.Data[i]) { // not required
			continue
		}

		if m.Data[i] != nil {
			if err := m.Data[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("return_submission" + "." + "data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ReturnPaymentFetchRelationshipsReturnSubmission) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ReturnPaymentFetchRelationshipsReturnSubmission) UnmarshalBinary(b []byte) error {
	var res ReturnPaymentFetchRelationshipsReturnSubmission
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
func (m *ReturnPaymentFetchRelationshipsReturnSubmission) Json() string {
	json, err := json.MarshalIndent(m, "  ", "  ")
	if err != nil {
		log.Fatal(err)
	}
	return string(json)
}
