// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"log"
	"strconv"

	"github.com/form3tech-oss/go-form3/v6/pkg/client"
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ResolutionRelatedInformation resolution related information
// swagger:model ResolutionRelatedInformation
type ResolutionRelatedInformation struct {

	// clearing channel
	ClearingChannel ClearingChannel `json:"clearing_channel,omitempty"`

	// Block to represent a list of references
	// Max Items: 5
	References []*Reference `json:"references,omitempty"`

	// Date that the payment will be settled
	// Format: date
	SettlementDate *strfmt.Date `json:"settlement_date,omitempty"`
}

func ResolutionRelatedInformationWithDefaults(defaults client.Defaults) *ResolutionRelatedInformation {
	return &ResolutionRelatedInformation{

		// TODO ClearingChannel: ClearingChannel,

		References: make([]*Reference, 0),

		SettlementDate: defaults.GetStrfmtDatePtr("ResolutionRelatedInformation", "settlement_date"),
	}
}

func (m *ResolutionRelatedInformation) WithClearingChannel(clearingChannel ClearingChannel) *ResolutionRelatedInformation {

	m.ClearingChannel = clearingChannel

	return m
}

func (m *ResolutionRelatedInformation) WithReferences(references []*Reference) *ResolutionRelatedInformation {

	m.References = references

	return m
}

func (m *ResolutionRelatedInformation) WithSettlementDate(settlementDate strfmt.Date) *ResolutionRelatedInformation {

	m.SettlementDate = &settlementDate

	return m
}

func (m *ResolutionRelatedInformation) WithoutSettlementDate() *ResolutionRelatedInformation {
	m.SettlementDate = nil
	return m
}

// Validate validates this resolution related information
func (m *ResolutionRelatedInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateClearingChannel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReferences(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSettlementDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ResolutionRelatedInformation) validateClearingChannel(formats strfmt.Registry) error {

	if swag.IsZero(m.ClearingChannel) { // not required
		return nil
	}

	if err := m.ClearingChannel.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("clearing_channel")
		}
		return err
	}

	return nil
}

func (m *ResolutionRelatedInformation) validateReferences(formats strfmt.Registry) error {

	if swag.IsZero(m.References) { // not required
		return nil
	}

	iReferencesSize := int64(len(m.References))

	if err := validate.MaxItems("references", "body", iReferencesSize, 5); err != nil {
		return err
	}

	for i := 0; i < len(m.References); i++ {
		if swag.IsZero(m.References[i]) { // not required
			continue
		}

		if m.References[i] != nil {
			if err := m.References[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("references" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ResolutionRelatedInformation) validateSettlementDate(formats strfmt.Registry) error {

	if swag.IsZero(m.SettlementDate) { // not required
		return nil
	}

	if err := validate.FormatOf("settlement_date", "body", "date", m.SettlementDate.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ResolutionRelatedInformation) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ResolutionRelatedInformation) UnmarshalBinary(b []byte) error {
	var res ResolutionRelatedInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
func (m *ResolutionRelatedInformation) Json() string {
	json, err := json.MarshalIndent(m, "  ", "  ")
	if err != nil {
		log.Fatal(err)
	}
	return string(json)
}
