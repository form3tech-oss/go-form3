// Code generated by go-swagger; DO NOT EDIT.

package oauth2

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// Client.CreateOauthToken creates a new CreateOauthTokenRequest object
// with the default values initialized.
func (c *Client) CreateOauthToken() *CreateOauthTokenRequest {
	var ()
	return &CreateOauthTokenRequest{

		GrantType: c.Defaults.GetString("CreateOauthToken", "grant_type"),

		timeout: cr.DefaultTimeout,

		transport: c.transport,
		formats:   c.formats,
	}
}

type CreateOauthTokenRequest struct {

	/*GrantType      Value MUST be set to "client_credentials" as per RFC      */

	GrantType string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client

	transport runtime.ClientTransport
	formats   strfmt.Registry
}

func (o *CreateOauthTokenRequest) FromJson(j string) (*CreateOauthTokenRequest, error) {

	return o, nil
}

func (o *CreateOauthTokenRequest) WithGrantType(grantType string) *CreateOauthTokenRequest {

	o.GrantType = grantType

	return o
}

// ////////////////
// WithContext adds the context to the create oauth token Request
func (o *CreateOauthTokenRequest) WithContext(ctx context.Context) *CreateOauthTokenRequest {
	o.Context = ctx
	return o
}

// WithHTTPClient adds the HTTPClient to the create oauth token Request
func (o *CreateOauthTokenRequest) WithHTTPClient(client *http.Client) *CreateOauthTokenRequest {
	o.HTTPClient = client
	return o
}

// WriteToRequest writes these Request to a swagger request
func (o *CreateOauthTokenRequest) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// form param grant_type
	frGrantType := o.GrantType
	fGrantType := frGrantType
	if fGrantType != "" {
		if err := r.SetFormParam("grant_type", fGrantType); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
