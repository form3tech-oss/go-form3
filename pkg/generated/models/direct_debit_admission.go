// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"log"

	"github.com/form3tech-oss/go-form3/v4/pkg/client"
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DirectDebitAdmission direct debit admission
// swagger:model DirectDebitAdmission
type DirectDebitAdmission struct {

	// attributes
	// Required: true
	Attributes *DirectDebitAdmissionAttributes `json:"attributes"`

	// created on
	// Format: date-time
	CreatedOn *strfmt.DateTime `json:"created_on,omitempty"`

	// id
	// Required: true
	// Format: uuid
	ID *strfmt.UUID `json:"id"`

	// modified on
	// Format: date-time
	ModifiedOn *strfmt.DateTime `json:"modified_on,omitempty"`

	// organisation id
	// Required: true
	// Format: uuid
	OrganisationID *strfmt.UUID `json:"organisation_id"`

	// relationships
	Relationships *DirectDebitAdmissionRelationships `json:"relationships,omitempty"`

	// type
	// Pattern: ^[A-Za-z_]*$
	Type string `json:"type,omitempty"`

	// version
	// Minimum: 0
	Version *int64 `json:"version,omitempty"`
}

func DirectDebitAdmissionWithDefaults(defaults client.Defaults) *DirectDebitAdmission {
	return &DirectDebitAdmission{

		Attributes: DirectDebitAdmissionAttributesWithDefaults(defaults),

		CreatedOn: defaults.GetStrfmtDateTimePtr("DirectDebitAdmission", "created_on"),

		ID: defaults.GetStrfmtUUIDPtr("DirectDebitAdmission", "id"),

		ModifiedOn: defaults.GetStrfmtDateTimePtr("DirectDebitAdmission", "modified_on"),

		OrganisationID: defaults.GetStrfmtUUIDPtr("DirectDebitAdmission", "organisation_id"),

		Relationships: DirectDebitAdmissionRelationshipsWithDefaults(defaults),

		Type: defaults.GetString("DirectDebitAdmission", "type"),

		Version: defaults.GetInt64Ptr("DirectDebitAdmission", "version"),
	}
}

func (m *DirectDebitAdmission) WithAttributes(attributes DirectDebitAdmissionAttributes) *DirectDebitAdmission {

	m.Attributes = &attributes

	return m
}

func (m *DirectDebitAdmission) WithoutAttributes() *DirectDebitAdmission {
	m.Attributes = nil
	return m
}

func (m *DirectDebitAdmission) WithCreatedOn(createdOn strfmt.DateTime) *DirectDebitAdmission {

	m.CreatedOn = &createdOn

	return m
}

func (m *DirectDebitAdmission) WithoutCreatedOn() *DirectDebitAdmission {
	m.CreatedOn = nil
	return m
}

func (m *DirectDebitAdmission) WithID(id strfmt.UUID) *DirectDebitAdmission {

	m.ID = &id

	return m
}

func (m *DirectDebitAdmission) WithoutID() *DirectDebitAdmission {
	m.ID = nil
	return m
}

func (m *DirectDebitAdmission) WithModifiedOn(modifiedOn strfmt.DateTime) *DirectDebitAdmission {

	m.ModifiedOn = &modifiedOn

	return m
}

func (m *DirectDebitAdmission) WithoutModifiedOn() *DirectDebitAdmission {
	m.ModifiedOn = nil
	return m
}

func (m *DirectDebitAdmission) WithOrganisationID(organisationID strfmt.UUID) *DirectDebitAdmission {

	m.OrganisationID = &organisationID

	return m
}

func (m *DirectDebitAdmission) WithoutOrganisationID() *DirectDebitAdmission {
	m.OrganisationID = nil
	return m
}

func (m *DirectDebitAdmission) WithRelationships(relationships DirectDebitAdmissionRelationships) *DirectDebitAdmission {

	m.Relationships = &relationships

	return m
}

func (m *DirectDebitAdmission) WithoutRelationships() *DirectDebitAdmission {
	m.Relationships = nil
	return m
}

func (m *DirectDebitAdmission) WithType(typeVar string) *DirectDebitAdmission {

	m.Type = typeVar

	return m
}

func (m *DirectDebitAdmission) WithVersion(version int64) *DirectDebitAdmission {

	m.Version = &version

	return m
}

func (m *DirectDebitAdmission) WithoutVersion() *DirectDebitAdmission {
	m.Version = nil
	return m
}

// Validate validates this direct debit admission
func (m *DirectDebitAdmission) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAttributes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedOn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateModifiedOn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrganisationID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRelationships(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVersion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DirectDebitAdmission) validateAttributes(formats strfmt.Registry) error {

	if err := validate.Required("attributes", "body", m.Attributes); err != nil {
		return err
	}

	if m.Attributes != nil {
		if err := m.Attributes.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("attributes")
			}
			return err
		}
	}

	return nil
}

func (m *DirectDebitAdmission) validateCreatedOn(formats strfmt.Registry) error {

	if swag.IsZero(m.CreatedOn) { // not required
		return nil
	}

	if err := validate.FormatOf("created_on", "body", "date-time", m.CreatedOn.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *DirectDebitAdmission) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	if err := validate.FormatOf("id", "body", "uuid", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *DirectDebitAdmission) validateModifiedOn(formats strfmt.Registry) error {

	if swag.IsZero(m.ModifiedOn) { // not required
		return nil
	}

	if err := validate.FormatOf("modified_on", "body", "date-time", m.ModifiedOn.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *DirectDebitAdmission) validateOrganisationID(formats strfmt.Registry) error {

	if err := validate.Required("organisation_id", "body", m.OrganisationID); err != nil {
		return err
	}

	if err := validate.FormatOf("organisation_id", "body", "uuid", m.OrganisationID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *DirectDebitAdmission) validateRelationships(formats strfmt.Registry) error {

	if swag.IsZero(m.Relationships) { // not required
		return nil
	}

	if m.Relationships != nil {
		if err := m.Relationships.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("relationships")
			}
			return err
		}
	}

	return nil
}

func (m *DirectDebitAdmission) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	if err := validate.Pattern("type", "body", string(m.Type), `^[A-Za-z_]*$`); err != nil {
		return err
	}

	return nil
}

func (m *DirectDebitAdmission) validateVersion(formats strfmt.Registry) error {

	if swag.IsZero(m.Version) { // not required
		return nil
	}

	if err := validate.MinimumInt("version", "body", int64(*m.Version), 0, false); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DirectDebitAdmission) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DirectDebitAdmission) UnmarshalBinary(b []byte) error {
	var res DirectDebitAdmission
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
func (m *DirectDebitAdmission) Json() string {
	json, err := json.MarshalIndent(m, "  ", "  ")
	if err != nil {
		log.Fatal(err)
	}
	return string(json)
}

// DirectDebitAdmissionAttributes direct debit admission attributes
// swagger:model DirectDebitAdmissionAttributes
type DirectDebitAdmissionAttributes struct {

	// admission datetime
	// Read Only: true
	// Format: date-time
	AdmissionDatetime strfmt.DateTime `json:"admission_datetime,omitempty"`

	// scheme status code
	SchemeStatusCode string `json:"scheme_status_code,omitempty"`

	// scheme status code description
	SchemeStatusCodeDescription string `json:"scheme_status_code_description,omitempty"`

	// status
	Status DirectDebitAdmissionStatus `json:"status,omitempty"`

	// status reason
	StatusReason DirectDebitAdmissionStatusReason `json:"status_reason,omitempty"`
}

func DirectDebitAdmissionAttributesWithDefaults(defaults client.Defaults) *DirectDebitAdmissionAttributes {
	return &DirectDebitAdmissionAttributes{

		AdmissionDatetime: defaults.GetStrfmtDateTime("DirectDebitAdmissionAttributes", "admission_datetime"),

		SchemeStatusCode: defaults.GetString("DirectDebitAdmissionAttributes", "scheme_status_code"),

		SchemeStatusCodeDescription: defaults.GetString("DirectDebitAdmissionAttributes", "scheme_status_code_description"),

		// TODO Status: DirectDebitAdmissionStatus,

		// TODO StatusReason: DirectDebitAdmissionStatusReason,

	}
}

func (m *DirectDebitAdmissionAttributes) WithAdmissionDatetime(admissionDatetime strfmt.DateTime) *DirectDebitAdmissionAttributes {

	m.AdmissionDatetime = admissionDatetime

	return m
}

func (m *DirectDebitAdmissionAttributes) WithSchemeStatusCode(schemeStatusCode string) *DirectDebitAdmissionAttributes {

	m.SchemeStatusCode = schemeStatusCode

	return m
}

func (m *DirectDebitAdmissionAttributes) WithSchemeStatusCodeDescription(schemeStatusCodeDescription string) *DirectDebitAdmissionAttributes {

	m.SchemeStatusCodeDescription = schemeStatusCodeDescription

	return m
}

func (m *DirectDebitAdmissionAttributes) WithStatus(status DirectDebitAdmissionStatus) *DirectDebitAdmissionAttributes {

	m.Status = status

	return m
}

func (m *DirectDebitAdmissionAttributes) WithStatusReason(statusReason DirectDebitAdmissionStatusReason) *DirectDebitAdmissionAttributes {

	m.StatusReason = statusReason

	return m
}

// Validate validates this direct debit admission attributes
func (m *DirectDebitAdmissionAttributes) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAdmissionDatetime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatusReason(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DirectDebitAdmissionAttributes) validateAdmissionDatetime(formats strfmt.Registry) error {

	if swag.IsZero(m.AdmissionDatetime) { // not required
		return nil
	}

	if err := validate.FormatOf("attributes"+"."+"admission_datetime", "body", "date-time", m.AdmissionDatetime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *DirectDebitAdmissionAttributes) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	if err := m.Status.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("attributes" + "." + "status")
		}
		return err
	}

	return nil
}

func (m *DirectDebitAdmissionAttributes) validateStatusReason(formats strfmt.Registry) error {

	if swag.IsZero(m.StatusReason) { // not required
		return nil
	}

	if err := m.StatusReason.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("attributes" + "." + "status_reason")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DirectDebitAdmissionAttributes) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DirectDebitAdmissionAttributes) UnmarshalBinary(b []byte) error {
	var res DirectDebitAdmissionAttributes
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
func (m *DirectDebitAdmissionAttributes) Json() string {
	json, err := json.MarshalIndent(m, "  ", "  ")
	if err != nil {
		log.Fatal(err)
	}
	return string(json)
}
