// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"log"

	"github.com/form3tech-oss/go-form3/v7/pkg/client"
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PaymentSubmissionFetch payment submission fetch
// swagger:model PaymentSubmissionFetch
type PaymentSubmissionFetch struct {

	// attributes
	Attributes *PaymentSubmissionFetchAttributes `json:"attributes,omitempty"`

	// created on
	// Format: date-time
	CreatedOn *strfmt.DateTime `json:"created_on,omitempty"`

	// id
	// Required: true
	// Format: uuid
	ID *strfmt.UUID `json:"id"`

	// modified on
	// Format: date-time
	ModifiedOn *strfmt.DateTime `json:"modified_on,omitempty"`

	// Unique ID of the organisation this resource is created by
	// Required: true
	// Format: uuid
	OrganisationID *strfmt.UUID `json:"organisation_id"`

	// relationships
	Relationships *PaymentSubmissionFetchRelationships `json:"relationships,omitempty"`

	// Name of the resource type
	// Pattern: ^[A-Za-z_]*$
	Type string `json:"type,omitempty"`

	// Version number
	// Minimum: 0
	Version *int64 `json:"version,omitempty"`
}

func PaymentSubmissionFetchWithDefaults(defaults client.Defaults) *PaymentSubmissionFetch {
	return &PaymentSubmissionFetch{

		Attributes: PaymentSubmissionFetchAttributesWithDefaults(defaults),

		CreatedOn: defaults.GetStrfmtDateTimePtr("PaymentSubmissionFetch", "created_on"),

		ID: defaults.GetStrfmtUUIDPtr("PaymentSubmissionFetch", "id"),

		ModifiedOn: defaults.GetStrfmtDateTimePtr("PaymentSubmissionFetch", "modified_on"),

		OrganisationID: defaults.GetStrfmtUUIDPtr("PaymentSubmissionFetch", "organisation_id"),

		Relationships: PaymentSubmissionFetchRelationshipsWithDefaults(defaults),

		Type: defaults.GetString("PaymentSubmissionFetch", "type"),

		Version: defaults.GetInt64Ptr("PaymentSubmissionFetch", "version"),
	}
}

func (m *PaymentSubmissionFetch) WithAttributes(attributes PaymentSubmissionFetchAttributes) *PaymentSubmissionFetch {

	m.Attributes = &attributes

	return m
}

func (m *PaymentSubmissionFetch) WithoutAttributes() *PaymentSubmissionFetch {
	m.Attributes = nil
	return m
}

func (m *PaymentSubmissionFetch) WithCreatedOn(createdOn strfmt.DateTime) *PaymentSubmissionFetch {

	m.CreatedOn = &createdOn

	return m
}

func (m *PaymentSubmissionFetch) WithoutCreatedOn() *PaymentSubmissionFetch {
	m.CreatedOn = nil
	return m
}

func (m *PaymentSubmissionFetch) WithID(id strfmt.UUID) *PaymentSubmissionFetch {

	m.ID = &id

	return m
}

func (m *PaymentSubmissionFetch) WithoutID() *PaymentSubmissionFetch {
	m.ID = nil
	return m
}

func (m *PaymentSubmissionFetch) WithModifiedOn(modifiedOn strfmt.DateTime) *PaymentSubmissionFetch {

	m.ModifiedOn = &modifiedOn

	return m
}

func (m *PaymentSubmissionFetch) WithoutModifiedOn() *PaymentSubmissionFetch {
	m.ModifiedOn = nil
	return m
}

func (m *PaymentSubmissionFetch) WithOrganisationID(organisationID strfmt.UUID) *PaymentSubmissionFetch {

	m.OrganisationID = &organisationID

	return m
}

func (m *PaymentSubmissionFetch) WithoutOrganisationID() *PaymentSubmissionFetch {
	m.OrganisationID = nil
	return m
}

func (m *PaymentSubmissionFetch) WithRelationships(relationships PaymentSubmissionFetchRelationships) *PaymentSubmissionFetch {

	m.Relationships = &relationships

	return m
}

func (m *PaymentSubmissionFetch) WithoutRelationships() *PaymentSubmissionFetch {
	m.Relationships = nil
	return m
}

func (m *PaymentSubmissionFetch) WithType(typeVar string) *PaymentSubmissionFetch {

	m.Type = typeVar

	return m
}

func (m *PaymentSubmissionFetch) WithVersion(version int64) *PaymentSubmissionFetch {

	m.Version = &version

	return m
}

func (m *PaymentSubmissionFetch) WithoutVersion() *PaymentSubmissionFetch {
	m.Version = nil
	return m
}

// Validate validates this payment submission fetch
func (m *PaymentSubmissionFetch) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAttributes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedOn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateModifiedOn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrganisationID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRelationships(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVersion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PaymentSubmissionFetch) validateAttributes(formats strfmt.Registry) error {

	if swag.IsZero(m.Attributes) { // not required
		return nil
	}

	if m.Attributes != nil {
		if err := m.Attributes.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("attributes")
			}
			return err
		}
	}

	return nil
}

func (m *PaymentSubmissionFetch) validateCreatedOn(formats strfmt.Registry) error {

	if swag.IsZero(m.CreatedOn) { // not required
		return nil
	}

	if err := validate.FormatOf("created_on", "body", "date-time", m.CreatedOn.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *PaymentSubmissionFetch) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	if err := validate.FormatOf("id", "body", "uuid", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *PaymentSubmissionFetch) validateModifiedOn(formats strfmt.Registry) error {

	if swag.IsZero(m.ModifiedOn) { // not required
		return nil
	}

	if err := validate.FormatOf("modified_on", "body", "date-time", m.ModifiedOn.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *PaymentSubmissionFetch) validateOrganisationID(formats strfmt.Registry) error {

	if err := validate.Required("organisation_id", "body", m.OrganisationID); err != nil {
		return err
	}

	if err := validate.FormatOf("organisation_id", "body", "uuid", m.OrganisationID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *PaymentSubmissionFetch) validateRelationships(formats strfmt.Registry) error {

	if swag.IsZero(m.Relationships) { // not required
		return nil
	}

	if m.Relationships != nil {
		if err := m.Relationships.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("relationships")
			}
			return err
		}
	}

	return nil
}

func (m *PaymentSubmissionFetch) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	if err := validate.Pattern("type", "body", string(m.Type), `^[A-Za-z_]*$`); err != nil {
		return err
	}

	return nil
}

func (m *PaymentSubmissionFetch) validateVersion(formats strfmt.Registry) error {

	if swag.IsZero(m.Version) { // not required
		return nil
	}

	if err := validate.MinimumInt("version", "body", int64(*m.Version), 0, false); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PaymentSubmissionFetch) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PaymentSubmissionFetch) UnmarshalBinary(b []byte) error {
	var res PaymentSubmissionFetch
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
func (m *PaymentSubmissionFetch) Json() string {
	json, err := json.MarshalIndent(m, "  ", "  ")
	if err != nil {
		log.Fatal(err)
	}
	return string(json)
}

// PaymentSubmissionFetchAttributes payment submission fetch attributes
// swagger:model PaymentSubmissionFetchAttributes
type PaymentSubmissionFetchAttributes struct {

	// Clearing infrastructure through which the payment instruction was processed
	// Pattern: ^[0-9A-Za-z_]*$
	ClearingSystem string `json:"clearing_system,omitempty"`

	// Identification code of the file sent to scheme.
	// Pattern: ^[0-9a-zA-Z]+$
	FileIdentifier *string `json:"file_identifier,omitempty"`

	// Number of the file sent to scheme.
	// Pattern: ^[0-9]+$
	FileNumber *string `json:"file_number,omitempty"`

	// Time a payment was released from being held due to a limit breach
	// Read Only: true
	// Format: date-time
	LimitBreachEndDatetime *strfmt.DateTime `json:"limit_breach_end_datetime,omitempty"`

	// Start time a payment was held due to a limit breach
	// Read Only: true
	// Format: date-time
	LimitBreachStartDatetime *strfmt.DateTime `json:"limit_breach_start_datetime,omitempty"`

	// posting status
	PostingStatus PostingStatus `json:"posting_status,omitempty"`

	// Details of the account to which funds are redirected (if applicable)
	RedirectedAccountNumber string `json:"redirected_account_number,omitempty"`

	// Details of the bank to which funds are redirected (if applicable)
	RedirectedBankID string `json:"redirected_bank_id,omitempty"`

	// Additional payment reference assigned by the scheme
	ReferenceID string `json:"reference_id,omitempty"`

	// Route taken for an outbound payment
	// Enum: ["on_us","xp"]
	Route string `json:"route,omitempty"`

	// Scheme-specific status (if submission has been submitted to a scheme)
	SchemeStatusCode string `json:"scheme_status_code,omitempty"`

	// [Description](http://api-docs.form3.tech/api.html#enumerations-scheme-status-codes-for-bacs) of `scheme_status_code`
	SchemeStatusCodeDescription string `json:"scheme_status_code_description,omitempty"`

	// Cycle in which the payment will be settled
	// Minimum: 0
	SettlementCycle *int64 `json:"settlement_cycle,omitempty"`

	// Date that the payment will be settled
	// Format: date
	SettlementDate *strfmt.Date `json:"settlement_date,omitempty"`

	// status
	Status PaymentSubmissionStatus `json:"status,omitempty"`

	// Description of the submission status
	StatusReason string `json:"status_reason,omitempty"`

	// Date of the submission
	// Read Only: true
	// Format: date-time
	SubmissionDatetime strfmt.DateTime `json:"submission_datetime,omitempty"`

	// Time the request was received by Form3. Used to compute the total transaction time of a payment.
	// Read Only: true
	// Format: date-time
	TransactionStartDatetime strfmt.DateTime `json:"transaction_start_datetime,omitempty"`
}

func PaymentSubmissionFetchAttributesWithDefaults(defaults client.Defaults) *PaymentSubmissionFetchAttributes {
	return &PaymentSubmissionFetchAttributes{

		ClearingSystem: defaults.GetString("PaymentSubmissionFetchAttributes", "clearing_system"),

		FileIdentifier: defaults.GetStringPtr("PaymentSubmissionFetchAttributes", "file_identifier"),

		FileNumber: defaults.GetStringPtr("PaymentSubmissionFetchAttributes", "file_number"),

		LimitBreachEndDatetime: defaults.GetStrfmtDateTimePtr("PaymentSubmissionFetchAttributes", "limit_breach_end_datetime"),

		LimitBreachStartDatetime: defaults.GetStrfmtDateTimePtr("PaymentSubmissionFetchAttributes", "limit_breach_start_datetime"),

		// TODO PostingStatus: PostingStatus,

		RedirectedAccountNumber: defaults.GetString("PaymentSubmissionFetchAttributes", "redirected_account_number"),

		RedirectedBankID: defaults.GetString("PaymentSubmissionFetchAttributes", "redirected_bank_id"),

		ReferenceID: defaults.GetString("PaymentSubmissionFetchAttributes", "reference_id"),

		Route: defaults.GetString("PaymentSubmissionFetchAttributes", "route"),

		SchemeStatusCode: defaults.GetString("PaymentSubmissionFetchAttributes", "scheme_status_code"),

		SchemeStatusCodeDescription: defaults.GetString("PaymentSubmissionFetchAttributes", "scheme_status_code_description"),

		SettlementCycle: defaults.GetInt64Ptr("PaymentSubmissionFetchAttributes", "settlement_cycle"),

		SettlementDate: defaults.GetStrfmtDatePtr("PaymentSubmissionFetchAttributes", "settlement_date"),

		// TODO Status: PaymentSubmissionStatus,

		StatusReason: defaults.GetString("PaymentSubmissionFetchAttributes", "status_reason"),

		SubmissionDatetime: defaults.GetStrfmtDateTime("PaymentSubmissionFetchAttributes", "submission_datetime"),

		TransactionStartDatetime: defaults.GetStrfmtDateTime("PaymentSubmissionFetchAttributes", "transaction_start_datetime"),
	}
}

func (m *PaymentSubmissionFetchAttributes) WithClearingSystem(clearingSystem string) *PaymentSubmissionFetchAttributes {

	m.ClearingSystem = clearingSystem

	return m
}

func (m *PaymentSubmissionFetchAttributes) WithFileIdentifier(fileIdentifier string) *PaymentSubmissionFetchAttributes {

	m.FileIdentifier = &fileIdentifier

	return m
}

func (m *PaymentSubmissionFetchAttributes) WithoutFileIdentifier() *PaymentSubmissionFetchAttributes {
	m.FileIdentifier = nil
	return m
}

func (m *PaymentSubmissionFetchAttributes) WithFileNumber(fileNumber string) *PaymentSubmissionFetchAttributes {

	m.FileNumber = &fileNumber

	return m
}

func (m *PaymentSubmissionFetchAttributes) WithoutFileNumber() *PaymentSubmissionFetchAttributes {
	m.FileNumber = nil
	return m
}

func (m *PaymentSubmissionFetchAttributes) WithLimitBreachEndDatetime(limitBreachEndDatetime strfmt.DateTime) *PaymentSubmissionFetchAttributes {

	m.LimitBreachEndDatetime = &limitBreachEndDatetime

	return m
}

func (m *PaymentSubmissionFetchAttributes) WithoutLimitBreachEndDatetime() *PaymentSubmissionFetchAttributes {
	m.LimitBreachEndDatetime = nil
	return m
}

func (m *PaymentSubmissionFetchAttributes) WithLimitBreachStartDatetime(limitBreachStartDatetime strfmt.DateTime) *PaymentSubmissionFetchAttributes {

	m.LimitBreachStartDatetime = &limitBreachStartDatetime

	return m
}

func (m *PaymentSubmissionFetchAttributes) WithoutLimitBreachStartDatetime() *PaymentSubmissionFetchAttributes {
	m.LimitBreachStartDatetime = nil
	return m
}

func (m *PaymentSubmissionFetchAttributes) WithPostingStatus(postingStatus PostingStatus) *PaymentSubmissionFetchAttributes {

	m.PostingStatus = postingStatus

	return m
}

func (m *PaymentSubmissionFetchAttributes) WithRedirectedAccountNumber(redirectedAccountNumber string) *PaymentSubmissionFetchAttributes {

	m.RedirectedAccountNumber = redirectedAccountNumber

	return m
}

func (m *PaymentSubmissionFetchAttributes) WithRedirectedBankID(redirectedBankID string) *PaymentSubmissionFetchAttributes {

	m.RedirectedBankID = redirectedBankID

	return m
}

func (m *PaymentSubmissionFetchAttributes) WithReferenceID(referenceID string) *PaymentSubmissionFetchAttributes {

	m.ReferenceID = referenceID

	return m
}

func (m *PaymentSubmissionFetchAttributes) WithRoute(route string) *PaymentSubmissionFetchAttributes {

	m.Route = route

	return m
}

func (m *PaymentSubmissionFetchAttributes) WithSchemeStatusCode(schemeStatusCode string) *PaymentSubmissionFetchAttributes {

	m.SchemeStatusCode = schemeStatusCode

	return m
}

func (m *PaymentSubmissionFetchAttributes) WithSchemeStatusCodeDescription(schemeStatusCodeDescription string) *PaymentSubmissionFetchAttributes {

	m.SchemeStatusCodeDescription = schemeStatusCodeDescription

	return m
}

func (m *PaymentSubmissionFetchAttributes) WithSettlementCycle(settlementCycle int64) *PaymentSubmissionFetchAttributes {

	m.SettlementCycle = &settlementCycle

	return m
}

func (m *PaymentSubmissionFetchAttributes) WithoutSettlementCycle() *PaymentSubmissionFetchAttributes {
	m.SettlementCycle = nil
	return m
}

func (m *PaymentSubmissionFetchAttributes) WithSettlementDate(settlementDate strfmt.Date) *PaymentSubmissionFetchAttributes {

	m.SettlementDate = &settlementDate

	return m
}

func (m *PaymentSubmissionFetchAttributes) WithoutSettlementDate() *PaymentSubmissionFetchAttributes {
	m.SettlementDate = nil
	return m
}

func (m *PaymentSubmissionFetchAttributes) WithStatus(status PaymentSubmissionStatus) *PaymentSubmissionFetchAttributes {

	m.Status = status

	return m
}

func (m *PaymentSubmissionFetchAttributes) WithStatusReason(statusReason string) *PaymentSubmissionFetchAttributes {

	m.StatusReason = statusReason

	return m
}

func (m *PaymentSubmissionFetchAttributes) WithSubmissionDatetime(submissionDatetime strfmt.DateTime) *PaymentSubmissionFetchAttributes {

	m.SubmissionDatetime = submissionDatetime

	return m
}

func (m *PaymentSubmissionFetchAttributes) WithTransactionStartDatetime(transactionStartDatetime strfmt.DateTime) *PaymentSubmissionFetchAttributes {

	m.TransactionStartDatetime = transactionStartDatetime

	return m
}

// Validate validates this payment submission fetch attributes
func (m *PaymentSubmissionFetchAttributes) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateClearingSystem(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFileIdentifier(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFileNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLimitBreachEndDatetime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLimitBreachStartDatetime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePostingStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRoute(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSettlementCycle(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSettlementDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubmissionDatetime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTransactionStartDatetime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PaymentSubmissionFetchAttributes) validateClearingSystem(formats strfmt.Registry) error {

	if swag.IsZero(m.ClearingSystem) { // not required
		return nil
	}

	if err := validate.Pattern("attributes"+"."+"clearing_system", "body", string(m.ClearingSystem), `^[0-9A-Za-z_]*$`); err != nil {
		return err
	}

	return nil
}

func (m *PaymentSubmissionFetchAttributes) validateFileIdentifier(formats strfmt.Registry) error {

	if swag.IsZero(m.FileIdentifier) { // not required
		return nil
	}

	if err := validate.Pattern("attributes"+"."+"file_identifier", "body", string(*m.FileIdentifier), `^[0-9a-zA-Z]+$`); err != nil {
		return err
	}

	return nil
}

func (m *PaymentSubmissionFetchAttributes) validateFileNumber(formats strfmt.Registry) error {

	if swag.IsZero(m.FileNumber) { // not required
		return nil
	}

	if err := validate.Pattern("attributes"+"."+"file_number", "body", string(*m.FileNumber), `^[0-9]+$`); err != nil {
		return err
	}

	return nil
}

func (m *PaymentSubmissionFetchAttributes) validateLimitBreachEndDatetime(formats strfmt.Registry) error {

	if swag.IsZero(m.LimitBreachEndDatetime) { // not required
		return nil
	}

	if err := validate.FormatOf("attributes"+"."+"limit_breach_end_datetime", "body", "date-time", m.LimitBreachEndDatetime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *PaymentSubmissionFetchAttributes) validateLimitBreachStartDatetime(formats strfmt.Registry) error {

	if swag.IsZero(m.LimitBreachStartDatetime) { // not required
		return nil
	}

	if err := validate.FormatOf("attributes"+"."+"limit_breach_start_datetime", "body", "date-time", m.LimitBreachStartDatetime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *PaymentSubmissionFetchAttributes) validatePostingStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.PostingStatus) { // not required
		return nil
	}

	if err := m.PostingStatus.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("attributes" + "." + "posting_status")
		}
		return err
	}

	return nil
}

var paymentSubmissionFetchAttributesTypeRoutePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["on_us","xp"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		paymentSubmissionFetchAttributesTypeRoutePropEnum = append(paymentSubmissionFetchAttributesTypeRoutePropEnum, v)
	}
}

const (

	// PaymentSubmissionFetchAttributesRouteOnUs captures enum value "on_us"
	PaymentSubmissionFetchAttributesRouteOnUs string = "on_us"

	// PaymentSubmissionFetchAttributesRouteXp captures enum value "xp"
	PaymentSubmissionFetchAttributesRouteXp string = "xp"
)

// prop value enum
func (m *PaymentSubmissionFetchAttributes) validateRouteEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, paymentSubmissionFetchAttributesTypeRoutePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *PaymentSubmissionFetchAttributes) validateRoute(formats strfmt.Registry) error {

	if swag.IsZero(m.Route) { // not required
		return nil
	}

	// value enum
	if err := m.validateRouteEnum("attributes"+"."+"route", "body", m.Route); err != nil {
		return err
	}

	return nil
}

func (m *PaymentSubmissionFetchAttributes) validateSettlementCycle(formats strfmt.Registry) error {

	if swag.IsZero(m.SettlementCycle) { // not required
		return nil
	}

	if err := validate.MinimumInt("attributes"+"."+"settlement_cycle", "body", int64(*m.SettlementCycle), 0, false); err != nil {
		return err
	}

	return nil
}

func (m *PaymentSubmissionFetchAttributes) validateSettlementDate(formats strfmt.Registry) error {

	if swag.IsZero(m.SettlementDate) { // not required
		return nil
	}

	if err := validate.FormatOf("attributes"+"."+"settlement_date", "body", "date", m.SettlementDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *PaymentSubmissionFetchAttributes) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	if err := m.Status.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("attributes" + "." + "status")
		}
		return err
	}

	return nil
}

func (m *PaymentSubmissionFetchAttributes) validateSubmissionDatetime(formats strfmt.Registry) error {

	if swag.IsZero(m.SubmissionDatetime) { // not required
		return nil
	}

	if err := validate.FormatOf("attributes"+"."+"submission_datetime", "body", "date-time", m.SubmissionDatetime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *PaymentSubmissionFetchAttributes) validateTransactionStartDatetime(formats strfmt.Registry) error {

	if swag.IsZero(m.TransactionStartDatetime) { // not required
		return nil
	}

	if err := validate.FormatOf("attributes"+"."+"transaction_start_datetime", "body", "date-time", m.TransactionStartDatetime.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PaymentSubmissionFetchAttributes) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PaymentSubmissionFetchAttributes) UnmarshalBinary(b []byte) error {
	var res PaymentSubmissionFetchAttributes
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
func (m *PaymentSubmissionFetchAttributes) Json() string {
	json, err := json.MarshalIndent(m, "  ", "  ")
	if err != nil {
		log.Fatal(err)
	}
	return string(json)
}
