// Code generated by go-swagger; DO NOT EDIT.

package payment_writes

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/form3tech-oss/go-form3/v7/pkg/generated/models"
)

// PatchReturnAdmissionTaskReader is a Reader for the PatchReturnAdmissionTask structure.
type PatchReturnAdmissionTaskReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchReturnAdmissionTaskReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewPatchReturnAdmissionTaskOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewPatchReturnAdmissionTaskBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 409:
		result := NewPatchReturnAdmissionTaskConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewPatchReturnAdmissionTaskOK creates a PatchReturnAdmissionTaskOK with default headers values
func NewPatchReturnAdmissionTaskOK() *PatchReturnAdmissionTaskOK {
	return &PatchReturnAdmissionTaskOK{}
}

/*
PatchReturnAdmissionTaskOK handles this case with default header values.

Return Admission Task update response
*/
type PatchReturnAdmissionTaskOK struct {

	//Payload

	// isStream: false
	*models.ReturnAdmissionTaskDetailsResponse
}

// IsSuccess returns true when this patch return admission task o k response has a 2xx status code
func (o *PatchReturnAdmissionTaskOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this patch return admission task o k response has a 3xx status code
func (o *PatchReturnAdmissionTaskOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch return admission task o k response has a 4xx status code
func (o *PatchReturnAdmissionTaskOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch return admission task o k response has a 5xx status code
func (o *PatchReturnAdmissionTaskOK) IsServerError() bool {
	return false
}

// IsCode returns true when this patch return admission task o k response a status code equal to that given
func (o *PatchReturnAdmissionTaskOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the patch return admission task o k response
func (o *PatchReturnAdmissionTaskOK) Code() int {
	return 200
}

func (o *PatchReturnAdmissionTaskOK) Error() string {
	return fmt.Sprintf("[PATCH /transaction/payments/{paymentId}/returns/{returnId}/admissions/{returnAdmissionId}/tasks/{taskId}][%d] patchReturnAdmissionTaskOK", 200)
}

func (o *PatchReturnAdmissionTaskOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.ReturnAdmissionTaskDetailsResponse = new(models.ReturnAdmissionTaskDetailsResponse)

	// response payload

	if err := consumer.Consume(response.Body(), o.ReturnAdmissionTaskDetailsResponse); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchReturnAdmissionTaskBadRequest creates a PatchReturnAdmissionTaskBadRequest with default headers values
func NewPatchReturnAdmissionTaskBadRequest() *PatchReturnAdmissionTaskBadRequest {
	return &PatchReturnAdmissionTaskBadRequest{}
}

/*
PatchReturnAdmissionTaskBadRequest handles this case with default header values.

Error
*/
type PatchReturnAdmissionTaskBadRequest struct {

	//Payload

	// isStream: false
	*models.APIError
}

// IsSuccess returns true when this patch return admission task bad request response has a 2xx status code
func (o *PatchReturnAdmissionTaskBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch return admission task bad request response has a 3xx status code
func (o *PatchReturnAdmissionTaskBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch return admission task bad request response has a 4xx status code
func (o *PatchReturnAdmissionTaskBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch return admission task bad request response has a 5xx status code
func (o *PatchReturnAdmissionTaskBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this patch return admission task bad request response a status code equal to that given
func (o *PatchReturnAdmissionTaskBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the patch return admission task bad request response
func (o *PatchReturnAdmissionTaskBadRequest) Code() int {
	return 400
}

func (o *PatchReturnAdmissionTaskBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /transaction/payments/{paymentId}/returns/{returnId}/admissions/{returnAdmissionId}/tasks/{taskId}][%d] patchReturnAdmissionTaskBadRequest", 400)
}

func (o *PatchReturnAdmissionTaskBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.APIError = new(models.APIError)

	// response payload

	if err := consumer.Consume(response.Body(), o.APIError); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchReturnAdmissionTaskConflict creates a PatchReturnAdmissionTaskConflict with default headers values
func NewPatchReturnAdmissionTaskConflict() *PatchReturnAdmissionTaskConflict {
	return &PatchReturnAdmissionTaskConflict{}
}

/*
PatchReturnAdmissionTaskConflict handles this case with default header values.

Conflict
*/
type PatchReturnAdmissionTaskConflict struct {

	//Payload

	// isStream: false
	*models.APIErrorWithActualResource
}

// IsSuccess returns true when this patch return admission task conflict response has a 2xx status code
func (o *PatchReturnAdmissionTaskConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch return admission task conflict response has a 3xx status code
func (o *PatchReturnAdmissionTaskConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch return admission task conflict response has a 4xx status code
func (o *PatchReturnAdmissionTaskConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch return admission task conflict response has a 5xx status code
func (o *PatchReturnAdmissionTaskConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this patch return admission task conflict response a status code equal to that given
func (o *PatchReturnAdmissionTaskConflict) IsCode(code int) bool {
	return code == 409
}

// Code gets the status code for the patch return admission task conflict response
func (o *PatchReturnAdmissionTaskConflict) Code() int {
	return 409
}

func (o *PatchReturnAdmissionTaskConflict) Error() string {
	return fmt.Sprintf("[PATCH /transaction/payments/{paymentId}/returns/{returnId}/admissions/{returnAdmissionId}/tasks/{taskId}][%d] patchReturnAdmissionTaskConflict", 409)
}

func (o *PatchReturnAdmissionTaskConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.APIErrorWithActualResource = new(models.APIErrorWithActualResource)

	// response payload

	if err := consumer.Consume(response.Body(), o.APIErrorWithActualResource); err != nil && err != io.EOF {
		return err
	}

	return nil
}
