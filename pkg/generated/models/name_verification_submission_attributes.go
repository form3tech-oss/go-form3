// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"log"
	"strconv"

	"github.com/form3tech-oss/go-form3/v7/pkg/client"
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NameVerificationSubmissionAttributes name verification submission attributes
// swagger:model NameVerificationSubmissionAttributes
type NameVerificationSubmissionAttributes struct {

	// actual name
	ActualName string `json:"actual_name,omitempty"`

	// additional messages
	// Max Items: 1
	AdditionalMessages []*NameVerificationSubmissionAdditionalMessage `json:"additional_messages"`

	// answer
	Answer NameVerificationSubmissionAnswer `json:"answer,omitempty"`

	// reason
	Reason string `json:"reason,omitempty"`

	// reason code
	ReasonCode NameVerificationSubmissionReasonCode `json:"reason_code,omitempty"`

	// status
	// Required: true
	Status *NameVerificationSubmissionStatus `json:"status"`

	// status reason
	StatusReason string `json:"status_reason,omitempty"`
}

func NameVerificationSubmissionAttributesWithDefaults(defaults client.Defaults) *NameVerificationSubmissionAttributes {
	return &NameVerificationSubmissionAttributes{

		ActualName: defaults.GetString("NameVerificationSubmissionAttributes", "actual_name"),

		AdditionalMessages: make([]*NameVerificationSubmissionAdditionalMessage, 0),

		// TODO Answer: NameVerificationSubmissionAnswer,

		Reason: defaults.GetString("NameVerificationSubmissionAttributes", "reason"),

		// TODO ReasonCode: NameVerificationSubmissionReasonCode,

		// TODO Status: NameVerificationSubmissionStatus,

		StatusReason: defaults.GetString("NameVerificationSubmissionAttributes", "status_reason"),
	}
}

func (m *NameVerificationSubmissionAttributes) WithActualName(actualName string) *NameVerificationSubmissionAttributes {

	m.ActualName = actualName

	return m
}

func (m *NameVerificationSubmissionAttributes) WithAdditionalMessages(additionalMessages []*NameVerificationSubmissionAdditionalMessage) *NameVerificationSubmissionAttributes {

	m.AdditionalMessages = additionalMessages

	return m
}

func (m *NameVerificationSubmissionAttributes) WithAnswer(answer NameVerificationSubmissionAnswer) *NameVerificationSubmissionAttributes {

	m.Answer = answer

	return m
}

func (m *NameVerificationSubmissionAttributes) WithReason(reason string) *NameVerificationSubmissionAttributes {

	m.Reason = reason

	return m
}

func (m *NameVerificationSubmissionAttributes) WithReasonCode(reasonCode NameVerificationSubmissionReasonCode) *NameVerificationSubmissionAttributes {

	m.ReasonCode = reasonCode

	return m
}

func (m *NameVerificationSubmissionAttributes) WithStatus(status NameVerificationSubmissionStatus) *NameVerificationSubmissionAttributes {

	m.Status = &status

	return m
}

func (m *NameVerificationSubmissionAttributes) WithoutStatus() *NameVerificationSubmissionAttributes {
	m.Status = nil
	return m
}

func (m *NameVerificationSubmissionAttributes) WithStatusReason(statusReason string) *NameVerificationSubmissionAttributes {

	m.StatusReason = statusReason

	return m
}

// Validate validates this name verification submission attributes
func (m *NameVerificationSubmissionAttributes) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAdditionalMessages(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAnswer(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReasonCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NameVerificationSubmissionAttributes) validateAdditionalMessages(formats strfmt.Registry) error {

	if swag.IsZero(m.AdditionalMessages) { // not required
		return nil
	}

	iAdditionalMessagesSize := int64(len(m.AdditionalMessages))

	if err := validate.MaxItems("additional_messages", "body", iAdditionalMessagesSize, 1); err != nil {
		return err
	}

	for i := 0; i < len(m.AdditionalMessages); i++ {
		if swag.IsZero(m.AdditionalMessages[i]) { // not required
			continue
		}

		if m.AdditionalMessages[i] != nil {
			if err := m.AdditionalMessages[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("additional_messages" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *NameVerificationSubmissionAttributes) validateAnswer(formats strfmt.Registry) error {

	if swag.IsZero(m.Answer) { // not required
		return nil
	}

	if err := m.Answer.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("answer")
		}
		return err
	}

	return nil
}

func (m *NameVerificationSubmissionAttributes) validateReasonCode(formats strfmt.Registry) error {

	if swag.IsZero(m.ReasonCode) { // not required
		return nil
	}

	if err := m.ReasonCode.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("reason_code")
		}
		return err
	}

	return nil
}

func (m *NameVerificationSubmissionAttributes) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	if m.Status != nil {
		if err := m.Status.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *NameVerificationSubmissionAttributes) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NameVerificationSubmissionAttributes) UnmarshalBinary(b []byte) error {
	var res NameVerificationSubmissionAttributes
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
func (m *NameVerificationSubmissionAttributes) Json() string {
	json, err := json.MarshalIndent(m, "  ", "  ")
	if err != nil {
		log.Fatal(err)
	}
	return string(json)
}
