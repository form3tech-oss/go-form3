// Code generated by go-swagger; DO NOT EDIT.

package scheme_messages

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/form3tech-oss/go-form3/v7/pkg/generated/models"
)

// GetSchemeMessageAdmissionReader is a Reader for the GetSchemeMessageAdmission structure.
type GetSchemeMessageAdmissionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetSchemeMessageAdmissionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetSchemeMessageAdmissionOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewGetSchemeMessageAdmissionBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewGetSchemeMessageAdmissionUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewGetSchemeMessageAdmissionForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewGetSchemeMessageAdmissionNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetSchemeMessageAdmissionOK creates a GetSchemeMessageAdmissionOK with default headers values
func NewGetSchemeMessageAdmissionOK() *GetSchemeMessageAdmissionOK {
	return &GetSchemeMessageAdmissionOK{}
}

/*
GetSchemeMessageAdmissionOK handles this case with default header values.

Get scheme message admission by Id
*/
type GetSchemeMessageAdmissionOK struct {

	//Payload

	// isStream: false
	*models.SchemeMessageAdmissionDetailsResponse
}

// IsSuccess returns true when this get scheme message admission o k response has a 2xx status code
func (o *GetSchemeMessageAdmissionOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get scheme message admission o k response has a 3xx status code
func (o *GetSchemeMessageAdmissionOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get scheme message admission o k response has a 4xx status code
func (o *GetSchemeMessageAdmissionOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get scheme message admission o k response has a 5xx status code
func (o *GetSchemeMessageAdmissionOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get scheme message admission o k response a status code equal to that given
func (o *GetSchemeMessageAdmissionOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get scheme message admission o k response
func (o *GetSchemeMessageAdmissionOK) Code() int {
	return 200
}

func (o *GetSchemeMessageAdmissionOK) Error() string {
	return fmt.Sprintf("[GET /notification/schememessages/{id}/admissions/{admissionId}][%d] getSchemeMessageAdmissionOK", 200)
}

func (o *GetSchemeMessageAdmissionOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.SchemeMessageAdmissionDetailsResponse = new(models.SchemeMessageAdmissionDetailsResponse)

	// response payload

	if err := consumer.Consume(response.Body(), o.SchemeMessageAdmissionDetailsResponse); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSchemeMessageAdmissionBadRequest creates a GetSchemeMessageAdmissionBadRequest with default headers values
func NewGetSchemeMessageAdmissionBadRequest() *GetSchemeMessageAdmissionBadRequest {
	return &GetSchemeMessageAdmissionBadRequest{}
}

/*
GetSchemeMessageAdmissionBadRequest handles this case with default header values.

Scheme Message Admission by Id bad request
*/
type GetSchemeMessageAdmissionBadRequest struct {

	//Payload

	// isStream: false
	*models.APIError
}

// IsSuccess returns true when this get scheme message admission bad request response has a 2xx status code
func (o *GetSchemeMessageAdmissionBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get scheme message admission bad request response has a 3xx status code
func (o *GetSchemeMessageAdmissionBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get scheme message admission bad request response has a 4xx status code
func (o *GetSchemeMessageAdmissionBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get scheme message admission bad request response has a 5xx status code
func (o *GetSchemeMessageAdmissionBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get scheme message admission bad request response a status code equal to that given
func (o *GetSchemeMessageAdmissionBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get scheme message admission bad request response
func (o *GetSchemeMessageAdmissionBadRequest) Code() int {
	return 400
}

func (o *GetSchemeMessageAdmissionBadRequest) Error() string {
	return fmt.Sprintf("[GET /notification/schememessages/{id}/admissions/{admissionId}][%d] getSchemeMessageAdmissionBadRequest", 400)
}

func (o *GetSchemeMessageAdmissionBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.APIError = new(models.APIError)

	// response payload

	if err := consumer.Consume(response.Body(), o.APIError); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSchemeMessageAdmissionUnauthorized creates a GetSchemeMessageAdmissionUnauthorized with default headers values
func NewGetSchemeMessageAdmissionUnauthorized() *GetSchemeMessageAdmissionUnauthorized {
	return &GetSchemeMessageAdmissionUnauthorized{}
}

/*
GetSchemeMessageAdmissionUnauthorized handles this case with default header values.

Unauthorized
*/
type GetSchemeMessageAdmissionUnauthorized struct {

	//Payload

	// isStream: false
	*models.APIError
}

// IsSuccess returns true when this get scheme message admission unauthorized response has a 2xx status code
func (o *GetSchemeMessageAdmissionUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get scheme message admission unauthorized response has a 3xx status code
func (o *GetSchemeMessageAdmissionUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get scheme message admission unauthorized response has a 4xx status code
func (o *GetSchemeMessageAdmissionUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get scheme message admission unauthorized response has a 5xx status code
func (o *GetSchemeMessageAdmissionUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get scheme message admission unauthorized response a status code equal to that given
func (o *GetSchemeMessageAdmissionUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get scheme message admission unauthorized response
func (o *GetSchemeMessageAdmissionUnauthorized) Code() int {
	return 401
}

func (o *GetSchemeMessageAdmissionUnauthorized) Error() string {
	return fmt.Sprintf("[GET /notification/schememessages/{id}/admissions/{admissionId}][%d] getSchemeMessageAdmissionUnauthorized", 401)
}

func (o *GetSchemeMessageAdmissionUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.APIError = new(models.APIError)

	// response payload

	if err := consumer.Consume(response.Body(), o.APIError); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSchemeMessageAdmissionForbidden creates a GetSchemeMessageAdmissionForbidden with default headers values
func NewGetSchemeMessageAdmissionForbidden() *GetSchemeMessageAdmissionForbidden {
	return &GetSchemeMessageAdmissionForbidden{}
}

/*
GetSchemeMessageAdmissionForbidden handles this case with default header values.

Forbidden
*/
type GetSchemeMessageAdmissionForbidden struct {

	//Payload

	// isStream: false
	*models.APIError
}

// IsSuccess returns true when this get scheme message admission forbidden response has a 2xx status code
func (o *GetSchemeMessageAdmissionForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get scheme message admission forbidden response has a 3xx status code
func (o *GetSchemeMessageAdmissionForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get scheme message admission forbidden response has a 4xx status code
func (o *GetSchemeMessageAdmissionForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get scheme message admission forbidden response has a 5xx status code
func (o *GetSchemeMessageAdmissionForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get scheme message admission forbidden response a status code equal to that given
func (o *GetSchemeMessageAdmissionForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get scheme message admission forbidden response
func (o *GetSchemeMessageAdmissionForbidden) Code() int {
	return 403
}

func (o *GetSchemeMessageAdmissionForbidden) Error() string {
	return fmt.Sprintf("[GET /notification/schememessages/{id}/admissions/{admissionId}][%d] getSchemeMessageAdmissionForbidden", 403)
}

func (o *GetSchemeMessageAdmissionForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.APIError = new(models.APIError)

	// response payload

	if err := consumer.Consume(response.Body(), o.APIError); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSchemeMessageAdmissionNotFound creates a GetSchemeMessageAdmissionNotFound with default headers values
func NewGetSchemeMessageAdmissionNotFound() *GetSchemeMessageAdmissionNotFound {
	return &GetSchemeMessageAdmissionNotFound{}
}

/*
GetSchemeMessageAdmissionNotFound handles this case with default header values.

Scheme Message Not found
*/
type GetSchemeMessageAdmissionNotFound struct {

	//Payload

	// isStream: false
	*models.APIError
}

// IsSuccess returns true when this get scheme message admission not found response has a 2xx status code
func (o *GetSchemeMessageAdmissionNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get scheme message admission not found response has a 3xx status code
func (o *GetSchemeMessageAdmissionNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get scheme message admission not found response has a 4xx status code
func (o *GetSchemeMessageAdmissionNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get scheme message admission not found response has a 5xx status code
func (o *GetSchemeMessageAdmissionNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get scheme message admission not found response a status code equal to that given
func (o *GetSchemeMessageAdmissionNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get scheme message admission not found response
func (o *GetSchemeMessageAdmissionNotFound) Code() int {
	return 404
}

func (o *GetSchemeMessageAdmissionNotFound) Error() string {
	return fmt.Sprintf("[GET /notification/schememessages/{id}/admissions/{admissionId}][%d] getSchemeMessageAdmissionNotFound", 404)
}

func (o *GetSchemeMessageAdmissionNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.APIError = new(models.APIError)

	// response payload

	if err := consumer.Consume(response.Body(), o.APIError); err != nil && err != io.EOF {
		return err
	}

	return nil
}
