// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"log"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// NameVerificationAdmissionReasonCode name verification admission reason code
// swagger:model NameVerificationAdmissionReasonCode
type NameVerificationAdmissionReasonCode string

const (

	// NameVerificationAdmissionReasonCodeAC01 captures enum value "AC01"
	NameVerificationAdmissionReasonCodeAC01 NameVerificationAdmissionReasonCode = "AC01"

	// NameVerificationAdmissionReasonCodeACNS captures enum value "ACNS"
	NameVerificationAdmissionReasonCodeACNS NameVerificationAdmissionReasonCode = "ACNS"

	// NameVerificationAdmissionReasonCodeANNM captures enum value "ANNM"
	NameVerificationAdmissionReasonCodeANNM NameVerificationAdmissionReasonCode = "ANNM"

	// NameVerificationAdmissionReasonCodeBAMM captures enum value "BAMM"
	NameVerificationAdmissionReasonCodeBAMM NameVerificationAdmissionReasonCode = "BAMM"

	// NameVerificationAdmissionReasonCodeBANM captures enum value "BANM"
	NameVerificationAdmissionReasonCodeBANM NameVerificationAdmissionReasonCode = "BANM"

	// NameVerificationAdmissionReasonCodeCASS captures enum value "CASS"
	NameVerificationAdmissionReasonCodeCASS NameVerificationAdmissionReasonCode = "CASS"

	// NameVerificationAdmissionReasonCodeCMTC captures enum value "CMTC"
	NameVerificationAdmissionReasonCodeCMTC NameVerificationAdmissionReasonCode = "CMTC"

	// NameVerificationAdmissionReasonCodeIVCR captures enum value "IVCR"
	NameVerificationAdmissionReasonCodeIVCR NameVerificationAdmissionReasonCode = "IVCR"

	// NameVerificationAdmissionReasonCodeMBAM captures enum value "MBAM"
	NameVerificationAdmissionReasonCodeMBAM NameVerificationAdmissionReasonCode = "MBAM"

	// NameVerificationAdmissionReasonCodeNMTC captures enum value "NMTC"
	NameVerificationAdmissionReasonCodeNMTC NameVerificationAdmissionReasonCode = "NMTC"

	// NameVerificationAdmissionReasonCodeNOAP captures enum value "NOAP"
	NameVerificationAdmissionReasonCodeNOAP NameVerificationAdmissionReasonCode = "NOAP"

	// NameVerificationAdmissionReasonCodeOPTO captures enum value "OPTO"
	NameVerificationAdmissionReasonCodeOPTO NameVerificationAdmissionReasonCode = "OPTO"

	// NameVerificationAdmissionReasonCodePAMM captures enum value "PAMM"
	NameVerificationAdmissionReasonCodePAMM NameVerificationAdmissionReasonCode = "PAMM"

	// NameVerificationAdmissionReasonCodePANM captures enum value "PANM"
	NameVerificationAdmissionReasonCodePANM NameVerificationAdmissionReasonCode = "PANM"

	// NameVerificationAdmissionReasonCodeSCNS captures enum value "SCNS"
	NameVerificationAdmissionReasonCodeSCNS NameVerificationAdmissionReasonCode = "SCNS"
)

// for schema
var nameVerificationAdmissionReasonCodeEnum []interface{}

func init() {
	var res []NameVerificationAdmissionReasonCode
	if err := json.Unmarshal([]byte(`["AC01","ACNS","ANNM","BAMM","BANM","CASS","CMTC","IVCR","MBAM","NMTC","NOAP","OPTO","PAMM","PANM","SCNS"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		nameVerificationAdmissionReasonCodeEnum = append(nameVerificationAdmissionReasonCodeEnum, v)
	}
}

func (m NameVerificationAdmissionReasonCode) validateNameVerificationAdmissionReasonCodeEnum(path, location string, value NameVerificationAdmissionReasonCode) error {
	if err := validate.Enum(path, location, value, nameVerificationAdmissionReasonCodeEnum); err != nil {
		return err
	}
	return nil
}

// Validate validates this name verification admission reason code
func (m NameVerificationAdmissionReasonCode) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateNameVerificationAdmissionReasonCodeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NameVerificationAdmissionReasonCode) Json() string {
	json, err := json.MarshalIndent(m, "  ", "  ")
	if err != nil {
		log.Fatal(err)
	}
	return string(json)
}
