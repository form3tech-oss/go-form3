// Code generated by go-swagger; DO NOT EDIT.

package payments

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/form3tech-oss/go-form3/v6/pkg/generated/models"
)

// Client.PatchReturnSubmissionTask creates a new PatchReturnSubmissionTaskRequest object
// with the default values initialized.
func (c *Client) PatchReturnSubmissionTask() *PatchReturnSubmissionTaskRequest {
	var ()
	return &PatchReturnSubmissionTaskRequest{

		ReturnSubmissionTaskAmendment: models.ReturnSubmissionTaskAmendmentWithDefaults(c.Defaults),

		PaymentID: c.Defaults.GetStrfmtUUID("PatchReturnSubmissionTask", "paymentId"),

		ReturnID: c.Defaults.GetStrfmtUUID("PatchReturnSubmissionTask", "returnId"),

		ReturnSubmissionID: c.Defaults.GetStrfmtUUID("PatchReturnSubmissionTask", "returnSubmissionId"),

		TaskID: c.Defaults.GetStrfmtUUID("PatchReturnSubmissionTask", "taskId"),

		timeout: cr.DefaultTimeout,

		transport: c.transport,
		formats:   c.formats,
	}
}

type PatchReturnSubmissionTaskRequest struct {

	/*ReturnSubmissionTaskPatchRequest*/

	*models.ReturnSubmissionTaskAmendment

	/*PaymentID      Payment ID      */

	PaymentID strfmt.UUID

	/*ReturnID      Return ID      */

	ReturnID strfmt.UUID

	/*ReturnSubmissionID      Return Submission ID      */

	ReturnSubmissionID strfmt.UUID

	/*TaskID      Return Submission Task Id      */

	TaskID strfmt.UUID

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client

	transport runtime.ClientTransport
	formats   strfmt.Registry
}

func (o *PatchReturnSubmissionTaskRequest) FromJson(j string) (*PatchReturnSubmissionTaskRequest, error) {

	var m models.ReturnSubmissionTaskAmendment
	if err := json.Unmarshal([]byte(j), &m); err != nil {
		return nil, fmt.Errorf("could not unmarshal JSON: %w", err)
	}

	o.ReturnSubmissionTaskAmendment = &m

	return o, nil
}

func (o *PatchReturnSubmissionTaskRequest) WithReturnSubmissionTaskPatchRequest(returnSubmissionTaskPatchRequest models.ReturnSubmissionTaskAmendment) *PatchReturnSubmissionTaskRequest {

	o.ReturnSubmissionTaskAmendment = &returnSubmissionTaskPatchRequest

	return o
}

func (o *PatchReturnSubmissionTaskRequest) WithoutReturnSubmissionTaskPatchRequest() *PatchReturnSubmissionTaskRequest {

	o.ReturnSubmissionTaskAmendment = &models.ReturnSubmissionTaskAmendment{}

	return o
}

func (o *PatchReturnSubmissionTaskRequest) WithPaymentID(paymentID strfmt.UUID) *PatchReturnSubmissionTaskRequest {

	o.PaymentID = paymentID

	return o
}

func (o *PatchReturnSubmissionTaskRequest) WithReturnID(returnID strfmt.UUID) *PatchReturnSubmissionTaskRequest {

	o.ReturnID = returnID

	return o
}

func (o *PatchReturnSubmissionTaskRequest) WithReturnSubmissionID(returnSubmissionID strfmt.UUID) *PatchReturnSubmissionTaskRequest {

	o.ReturnSubmissionID = returnSubmissionID

	return o
}

func (o *PatchReturnSubmissionTaskRequest) WithTaskID(taskID strfmt.UUID) *PatchReturnSubmissionTaskRequest {

	o.TaskID = taskID

	return o
}

//////////////////
// WithContext adds the context to the patch return submission task Request
func (o *PatchReturnSubmissionTaskRequest) WithContext(ctx context.Context) *PatchReturnSubmissionTaskRequest {
	o.Context = ctx
	return o
}

// WithHTTPClient adds the HTTPClient to the patch return submission task Request
func (o *PatchReturnSubmissionTaskRequest) WithHTTPClient(client *http.Client) *PatchReturnSubmissionTaskRequest {
	o.HTTPClient = client
	return o
}

// WriteToRequest writes these Request to a swagger request
func (o *PatchReturnSubmissionTaskRequest) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// ISBODYPARAM
	if o.ReturnSubmissionTaskAmendment != nil {
		if err := r.SetBodyParam(o.ReturnSubmissionTaskAmendment); err != nil {
			return err
		}
	}

	// path param paymentId
	if err := r.SetPathParam("paymentId", o.PaymentID.String()); err != nil {
		return err
	}

	// path param returnId
	if err := r.SetPathParam("returnId", o.ReturnID.String()); err != nil {
		return err
	}

	// path param returnSubmissionId
	if err := r.SetPathParam("returnSubmissionId", o.ReturnSubmissionID.String()); err != nil {
		return err
	}

	// path param taskId
	if err := r.SetPathParam("taskId", o.TaskID.String()); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
