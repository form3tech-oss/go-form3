// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"log"
	"strconv"

	"github.com/form3tech-oss/go-form3/v7/pkg/client"
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TransactionFileSubmission transaction file submission
// swagger:model TransactionFileSubmission
type TransactionFileSubmission struct {

	// id
	// Required: true
	// Format: uuid
	ID *strfmt.UUID `json:"id"`

	// type
	// Enum: ["transaction_file_submissions"]
	Type string `json:"type,omitempty"`

	// Unique ID of the organisation this resource is created by
	// Required: true
	// Format: uuid
	OrganisationID *strfmt.UUID `json:"organisation_id"`

	// Version number
	// Minimum: 0
	Version *int64 `json:"version,omitempty"`

	// created on
	// Read Only: true
	// Format: date-time
	CreatedOn strfmt.DateTime `json:"created_on,omitempty"`

	// modified on
	// Read Only: true
	// Format: date-time
	ModifiedOn strfmt.DateTime `json:"modified_on,omitempty"`

	// attributes
	Attributes *TransactionFileSubmissionAttributes `json:"attributes,omitempty"`

	// relationships
	// Read Only: true
	Relationships *TransactionFileSubmissionRelationships `json:"relationships,omitempty"`
}

func TransactionFileSubmissionWithDefaults(defaults client.Defaults) *TransactionFileSubmission {
	return &TransactionFileSubmission{

		ID: defaults.GetStrfmtUUIDPtr("TransactionFileSubmission", "id"),

		Type: defaults.GetString("TransactionFileSubmission", "type"),

		OrganisationID: defaults.GetStrfmtUUIDPtr("TransactionFileSubmission", "organisation_id"),

		Version: defaults.GetInt64Ptr("TransactionFileSubmission", "version"),

		CreatedOn: defaults.GetStrfmtDateTime("TransactionFileSubmission", "created_on"),

		ModifiedOn: defaults.GetStrfmtDateTime("TransactionFileSubmission", "modified_on"),

		Attributes: TransactionFileSubmissionAttributesWithDefaults(defaults),

		Relationships: TransactionFileSubmissionRelationshipsWithDefaults(defaults),
	}
}

func (m *TransactionFileSubmission) WithID(id strfmt.UUID) *TransactionFileSubmission {

	m.ID = &id

	return m
}

func (m *TransactionFileSubmission) WithoutID() *TransactionFileSubmission {
	m.ID = nil
	return m
}

func (m *TransactionFileSubmission) WithType(typeVar string) *TransactionFileSubmission {

	m.Type = typeVar

	return m
}

func (m *TransactionFileSubmission) WithOrganisationID(organisationID strfmt.UUID) *TransactionFileSubmission {

	m.OrganisationID = &organisationID

	return m
}

func (m *TransactionFileSubmission) WithoutOrganisationID() *TransactionFileSubmission {
	m.OrganisationID = nil
	return m
}

func (m *TransactionFileSubmission) WithVersion(version int64) *TransactionFileSubmission {

	m.Version = &version

	return m
}

func (m *TransactionFileSubmission) WithoutVersion() *TransactionFileSubmission {
	m.Version = nil
	return m
}

func (m *TransactionFileSubmission) WithCreatedOn(createdOn strfmt.DateTime) *TransactionFileSubmission {

	m.CreatedOn = createdOn

	return m
}

func (m *TransactionFileSubmission) WithModifiedOn(modifiedOn strfmt.DateTime) *TransactionFileSubmission {

	m.ModifiedOn = modifiedOn

	return m
}

func (m *TransactionFileSubmission) WithAttributes(attributes TransactionFileSubmissionAttributes) *TransactionFileSubmission {

	m.Attributes = &attributes

	return m
}

func (m *TransactionFileSubmission) WithoutAttributes() *TransactionFileSubmission {
	m.Attributes = nil
	return m
}

func (m *TransactionFileSubmission) WithRelationships(relationships TransactionFileSubmissionRelationships) *TransactionFileSubmission {

	m.Relationships = &relationships

	return m
}

func (m *TransactionFileSubmission) WithoutRelationships() *TransactionFileSubmission {
	m.Relationships = nil
	return m
}

// Validate validates this transaction file submission
func (m *TransactionFileSubmission) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrganisationID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVersion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedOn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateModifiedOn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAttributes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRelationships(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TransactionFileSubmission) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	if err := validate.FormatOf("id", "body", "uuid", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

var transactionFileSubmissionTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["transaction_file_submissions"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		transactionFileSubmissionTypeTypePropEnum = append(transactionFileSubmissionTypeTypePropEnum, v)
	}
}

const (

	// TransactionFileSubmissionTypeTransactionFileSubmissions captures enum value "transaction_file_submissions"
	TransactionFileSubmissionTypeTransactionFileSubmissions string = "transaction_file_submissions"
)

// prop value enum
func (m *TransactionFileSubmission) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, transactionFileSubmissionTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *TransactionFileSubmission) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

func (m *TransactionFileSubmission) validateOrganisationID(formats strfmt.Registry) error {

	if err := validate.Required("organisation_id", "body", m.OrganisationID); err != nil {
		return err
	}

	if err := validate.FormatOf("organisation_id", "body", "uuid", m.OrganisationID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *TransactionFileSubmission) validateVersion(formats strfmt.Registry) error {

	if swag.IsZero(m.Version) { // not required
		return nil
	}

	if err := validate.MinimumInt("version", "body", int64(*m.Version), 0, false); err != nil {
		return err
	}

	return nil
}

func (m *TransactionFileSubmission) validateCreatedOn(formats strfmt.Registry) error {

	if swag.IsZero(m.CreatedOn) { // not required
		return nil
	}

	if err := validate.FormatOf("created_on", "body", "date-time", m.CreatedOn.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *TransactionFileSubmission) validateModifiedOn(formats strfmt.Registry) error {

	if swag.IsZero(m.ModifiedOn) { // not required
		return nil
	}

	if err := validate.FormatOf("modified_on", "body", "date-time", m.ModifiedOn.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *TransactionFileSubmission) validateAttributes(formats strfmt.Registry) error {

	if swag.IsZero(m.Attributes) { // not required
		return nil
	}

	if m.Attributes != nil {
		if err := m.Attributes.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("attributes")
			}
			return err
		}
	}

	return nil
}

func (m *TransactionFileSubmission) validateRelationships(formats strfmt.Registry) error {

	if swag.IsZero(m.Relationships) { // not required
		return nil
	}

	if m.Relationships != nil {
		if err := m.Relationships.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("relationships")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TransactionFileSubmission) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TransactionFileSubmission) UnmarshalBinary(b []byte) error {
	var res TransactionFileSubmission
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
func (m *TransactionFileSubmission) Json() string {
	json, err := json.MarshalIndent(m, "  ", "  ")
	if err != nil {
		log.Fatal(err)
	}
	return string(json)
}

// TransactionFileSubmissionAttributes transaction file submission attributes
// swagger:model TransactionFileSubmissionAttributes
type TransactionFileSubmissionAttributes struct {

	// Summary of scheme-specific references submission to the scheme
	SchemeReferences []*TransactionFileSubmissionSchemeReference `json:"scheme_references"`

	// status
	Status TransactionFileSubmissionStatus `json:"status,omitempty"`

	// Plain-text description of the status attribute
	// Read Only: true
	StatusReason string `json:"status_reason,omitempty"`

	// Time when the Form3 system begins processing of the submission
	// Read Only: true
	// Format: date-time
	SubmissionDatetime strfmt.DateTime `json:"submission_datetime,omitempty"`

	// Time the submission request was received by Form3. Used to compute the total transaction time
	// Read Only: true
	// Format: date-time
	TransactionStartDatetime strfmt.DateTime `json:"transaction_start_datetime,omitempty"`
}

func TransactionFileSubmissionAttributesWithDefaults(defaults client.Defaults) *TransactionFileSubmissionAttributes {
	return &TransactionFileSubmissionAttributes{

		SchemeReferences: make([]*TransactionFileSubmissionSchemeReference, 0),

		// TODO Status: TransactionFileSubmissionStatus,

		StatusReason: defaults.GetString("TransactionFileSubmissionAttributes", "status_reason"),

		SubmissionDatetime: defaults.GetStrfmtDateTime("TransactionFileSubmissionAttributes", "submission_datetime"),

		TransactionStartDatetime: defaults.GetStrfmtDateTime("TransactionFileSubmissionAttributes", "transaction_start_datetime"),
	}
}

func (m *TransactionFileSubmissionAttributes) WithSchemeReferences(schemeReferences []*TransactionFileSubmissionSchemeReference) *TransactionFileSubmissionAttributes {

	m.SchemeReferences = schemeReferences

	return m
}

func (m *TransactionFileSubmissionAttributes) WithStatus(status TransactionFileSubmissionStatus) *TransactionFileSubmissionAttributes {

	m.Status = status

	return m
}

func (m *TransactionFileSubmissionAttributes) WithStatusReason(statusReason string) *TransactionFileSubmissionAttributes {

	m.StatusReason = statusReason

	return m
}

func (m *TransactionFileSubmissionAttributes) WithSubmissionDatetime(submissionDatetime strfmt.DateTime) *TransactionFileSubmissionAttributes {

	m.SubmissionDatetime = submissionDatetime

	return m
}

func (m *TransactionFileSubmissionAttributes) WithTransactionStartDatetime(transactionStartDatetime strfmt.DateTime) *TransactionFileSubmissionAttributes {

	m.TransactionStartDatetime = transactionStartDatetime

	return m
}

// Validate validates this transaction file submission attributes
func (m *TransactionFileSubmissionAttributes) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSchemeReferences(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubmissionDatetime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTransactionStartDatetime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TransactionFileSubmissionAttributes) validateSchemeReferences(formats strfmt.Registry) error {

	if swag.IsZero(m.SchemeReferences) { // not required
		return nil
	}

	for i := 0; i < len(m.SchemeReferences); i++ {
		if swag.IsZero(m.SchemeReferences[i]) { // not required
			continue
		}

		if m.SchemeReferences[i] != nil {
			if err := m.SchemeReferences[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("attributes" + "." + "scheme_references" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TransactionFileSubmissionAttributes) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	if err := m.Status.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("attributes" + "." + "status")
		}
		return err
	}

	return nil
}

func (m *TransactionFileSubmissionAttributes) validateSubmissionDatetime(formats strfmt.Registry) error {

	if swag.IsZero(m.SubmissionDatetime) { // not required
		return nil
	}

	if err := validate.FormatOf("attributes"+"."+"submission_datetime", "body", "date-time", m.SubmissionDatetime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *TransactionFileSubmissionAttributes) validateTransactionStartDatetime(formats strfmt.Registry) error {

	if swag.IsZero(m.TransactionStartDatetime) { // not required
		return nil
	}

	if err := validate.FormatOf("attributes"+"."+"transaction_start_datetime", "body", "date-time", m.TransactionStartDatetime.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TransactionFileSubmissionAttributes) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TransactionFileSubmissionAttributes) UnmarshalBinary(b []byte) error {
	var res TransactionFileSubmissionAttributes
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
func (m *TransactionFileSubmissionAttributes) Json() string {
	json, err := json.MarshalIndent(m, "  ", "  ")
	if err != nil {
		log.Fatal(err)
	}
	return string(json)
}
