// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"log"

	"github.com/form3tech-oss/go-form3/pkg/client"
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// FXRate f x rate
// swagger:model FXRate
type FXRate struct {

	// type
	// Required: true
	Type FXRateResourceType `json:"type"`

	// organisation id
	// Required: true
	// Format: uuid
	OrganisationID *strfmt.UUID `json:"organisation_id"`

	// attributes
	// Required: true
	Attributes *FXRateAttributes `json:"attributes"`
}

func FXRateWithDefaults(defaults client.Defaults) *FXRate {
	return &FXRate{

		// TODO Type: FXRateResourceType,

		OrganisationID: defaults.GetStrfmtUUIDPtr("FXRate", "organisation_id"),

		Attributes: FXRateAttributesWithDefaults(defaults),
	}
}

func (m *FXRate) WithType(typeVar FXRateResourceType) *FXRate {

	m.Type = typeVar

	return m
}

func (m *FXRate) WithOrganisationID(organisationID strfmt.UUID) *FXRate {

	m.OrganisationID = &organisationID

	return m
}

func (m *FXRate) WithoutOrganisationID() *FXRate {
	m.OrganisationID = nil
	return m
}

func (m *FXRate) WithAttributes(attributes FXRateAttributes) *FXRate {

	m.Attributes = &attributes

	return m
}

func (m *FXRate) WithoutAttributes() *FXRate {
	m.Attributes = nil
	return m
}

// Validate validates this f x rate
func (m *FXRate) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrganisationID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAttributes(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FXRate) validateType(formats strfmt.Registry) error {

	if err := m.Type.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("type")
		}
		return err
	}

	return nil
}

func (m *FXRate) validateOrganisationID(formats strfmt.Registry) error {

	if err := validate.Required("organisation_id", "body", m.OrganisationID); err != nil {
		return err
	}

	if err := validate.FormatOf("organisation_id", "body", "uuid", m.OrganisationID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *FXRate) validateAttributes(formats strfmt.Registry) error {

	if err := validate.Required("attributes", "body", m.Attributes); err != nil {
		return err
	}

	if m.Attributes != nil {
		if err := m.Attributes.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("attributes")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FXRate) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FXRate) UnmarshalBinary(b []byte) error {
	var res FXRate
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
func (m *FXRate) Json() string {
	json, err := json.MarshalIndent(m, "  ", "  ")
	if err != nil {
		log.Fatal(err)
	}
	return string(json)
}
