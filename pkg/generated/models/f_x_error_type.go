// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"log"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// FXErrorType f x error type
// swagger:model FXErrorType
type FXErrorType string

const (

	// FXErrorTypeAPIFxInvalidPartyID captures enum value "api.fx.invalid_party_id"
	FXErrorTypeAPIFxInvalidPartyID FXErrorType = "api.fx.invalid_party_id"

	// FXErrorTypeAPIFxTargetCurrencyNotAllowed captures enum value "api.fx.target_currency_not_allowed"
	FXErrorTypeAPIFxTargetCurrencyNotAllowed FXErrorType = "api.fx.target_currency_not_allowed"

	// FXErrorTypeAPIFxSourceCurrencyNotAllowed captures enum value "api.fx.source_currency_not_allowed"
	FXErrorTypeAPIFxSourceCurrencyNotAllowed FXErrorType = "api.fx.source_currency_not_allowed"

	// FXErrorTypeAPIFxTypeNotAllowed captures enum value "api.fx.type_not_allowed"
	FXErrorTypeAPIFxTypeNotAllowed FXErrorType = "api.fx.type_not_allowed"

	// FXErrorTypeAPIFxAmountExceedsMaximum captures enum value "api.fx.amount_exceeds_maximum"
	FXErrorTypeAPIFxAmountExceedsMaximum FXErrorType = "api.fx.amount_exceeds_maximum"

	// FXErrorTypeAPIFxCurrencyNotAllowed captures enum value "api.fx.currency_not_allowed"
	FXErrorTypeAPIFxCurrencyNotAllowed FXErrorType = "api.fx.currency_not_allowed"

	// FXErrorTypeAPIFxCurrencyNotEqual captures enum value "api.fx.currency_not_equal"
	FXErrorTypeAPIFxCurrencyNotEqual FXErrorType = "api.fx.currency_not_equal"

	// FXErrorTypeAPIFxExpiredDeal captures enum value "api.fx.expired_deal"
	FXErrorTypeAPIFxExpiredDeal FXErrorType = "api.fx.expired_deal"

	// FXErrorTypeAPIFxInvalidPurpose captures enum value "api.fx.invalid_purpose"
	FXErrorTypeAPIFxInvalidPurpose FXErrorType = "api.fx.invalid_purpose"

	// FXErrorTypeAPIFxGatewayIssue captures enum value "api.fx.gateway_issue"
	FXErrorTypeAPIFxGatewayIssue FXErrorType = "api.fx.gateway_issue"
)

// for schema
var fXErrorTypeEnum []interface{}

func init() {
	var res []FXErrorType
	if err := json.Unmarshal([]byte(`["api.fx.invalid_party_id","api.fx.target_currency_not_allowed","api.fx.source_currency_not_allowed","api.fx.type_not_allowed","api.fx.amount_exceeds_maximum","api.fx.currency_not_allowed","api.fx.currency_not_equal","api.fx.expired_deal","api.fx.invalid_purpose","api.fx.gateway_issue"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		fXErrorTypeEnum = append(fXErrorTypeEnum, v)
	}
}

func (m FXErrorType) validateFXErrorTypeEnum(path, location string, value FXErrorType) error {
	if err := validate.Enum(path, location, value, fXErrorTypeEnum); err != nil {
		return err
	}
	return nil
}

// Validate validates this f x error type
func (m FXErrorType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateFXErrorTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FXErrorType) Json() string {
	json, err := json.MarshalIndent(m, "  ", "  ")
	if err != nil {
		log.Fatal(err)
	}
	return string(json)
}
