// Code generated by go-swagger; DO NOT EDIT.

package mandates

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// Client.ListMandates creates a new ListMandatesRequest object
// with the default values initialized.
func (c *Client) ListMandates() *ListMandatesRequest {
	var ()
	return &ListMandatesRequest{

		FilterAdmissionAdmissionDateFrom: c.Defaults.GetStrfmtDateTimePtr("ListMandates", "filter[admission.admission_date_from]"),

		FilterAdmissionAdmissionDateTo: c.Defaults.GetStrfmtDateTimePtr("ListMandates", "filter[admission.admission_date_to]"),

		FilterAdmissionSchemeStatusCode: c.Defaults.GetStringPtr("ListMandates", "filter[admission.scheme_status_code]"),

		FilterAdmissionStatus: c.Defaults.GetStringPtr("ListMandates", "filter[admission.status]"),

		FilterAllVersions: c.Defaults.GetBoolPtr("ListMandates", "filter[all_versions]"),

		FilterAmount: c.Defaults.GetStringPtr("ListMandates", "filter[amount]"),

		FilterBeneficiaryPartyAccountNumber: c.Defaults.GetStringPtr("ListMandates", "filter[beneficiary_party.account_number]"),

		FilterBeneficiaryPartyBankID: c.Defaults.GetStringPtr("ListMandates", "filter[beneficiary_party.bank_id]"),

		FilterClearingID: c.Defaults.GetStringPtr("ListMandates", "filter[clearing_id]"),

		FilterCurrency: c.Defaults.GetStringPtr("ListMandates", "filter[currency]"),

		FilterDebtorPartyAccountNumber: c.Defaults.GetStringPtr("ListMandates", "filter[debtor_party.account_number]"),

		FilterDebtorPartyBankID: c.Defaults.GetStringPtr("ListMandates", "filter[debtor_party.bank_id]"),

		FilterOrganisationID: make([]strfmt.UUID, 0),

		FilterPaymentScheme: c.Defaults.GetStringPtr("ListMandates", "filter[payment_scheme]"),

		FilterProcessingDateFrom: c.Defaults.GetStrfmtDatePtr("ListMandates", "filter[processing_date_from]"),

		FilterProcessingDateTo: c.Defaults.GetStrfmtDatePtr("ListMandates", "filter[processing_date_to]"),

		FilterReference: c.Defaults.GetStringPtr("ListMandates", "filter[reference]"),

		FilterSchemePaymentType: c.Defaults.GetStringPtr("ListMandates", "filter[scheme_payment_type]"),

		FilterSchemeProcessingDateFrom: c.Defaults.GetStrfmtDatePtr("ListMandates", "filter[scheme_processing_date_from]"),

		FilterSchemeProcessingDateTo: c.Defaults.GetStrfmtDatePtr("ListMandates", "filter[scheme_processing_date_to]"),

		FilterStatus: c.Defaults.GetStringPtr("ListMandates", "filter[status]"),

		FilterStatusReason: c.Defaults.GetStringPtr("ListMandates", "filter[status_reason]"),

		FilterSubmissionSubmissionDateFrom: c.Defaults.GetStrfmtDateTimePtr("ListMandates", "filter[submission.submission_date_from]"),

		FilterSubmissionSubmissionDateTo: c.Defaults.GetStrfmtDateTimePtr("ListMandates", "filter[submission.submission_date_to]"),

		FilterUniqueSchemeID: c.Defaults.GetStringPtr("ListMandates", "filter[unique_scheme_id]"),

		PageNumber: c.Defaults.GetStringPtr("ListMandates", "page[number]"),

		PageSize: c.Defaults.GetInt64Ptr("ListMandates", "page[size]"),

		timeout: cr.DefaultTimeout,

		transport: c.transport,
		formats:   c.formats,
	}
}

type ListMandatesRequest struct {

	/*FilterAdmissionAdmissionDateFrom*/

	FilterAdmissionAdmissionDateFrom *strfmt.DateTime

	/*FilterAdmissionAdmissionDateTo*/

	FilterAdmissionAdmissionDateTo *strfmt.DateTime

	/*FilterAdmissionSchemeStatusCode      Filter by admission scheme status code      */

	FilterAdmissionSchemeStatusCode *string

	/*FilterAdmissionStatus      Filter by admission status      */

	FilterAdmissionStatus *string

	/*FilterAllVersions      Include old versions of mandates      */

	FilterAllVersions *bool

	/*FilterAmount      Filter by amount      */

	FilterAmount *string

	/*FilterBeneficiaryPartyAccountNumber*/

	FilterBeneficiaryPartyAccountNumber *string

	/*FilterBeneficiaryPartyBankID*/

	FilterBeneficiaryPartyBankID *string

	/*FilterClearingID*/

	FilterClearingID *string

	/*FilterCurrency*/

	FilterCurrency *string

	/*FilterDebtorPartyAccountNumber*/

	FilterDebtorPartyAccountNumber *string

	/*FilterDebtorPartyBankID*/

	FilterDebtorPartyBankID *string

	/*FilterOrganisationID      Filter by organisation id      */

	FilterOrganisationID []strfmt.UUID

	/*FilterPaymentScheme*/

	FilterPaymentScheme *string

	/*FilterProcessingDateFrom*/

	FilterProcessingDateFrom *strfmt.Date

	/*FilterProcessingDateTo*/

	FilterProcessingDateTo *strfmt.Date

	/*FilterReference      Filter by reference      */

	FilterReference *string

	/*FilterSchemePaymentType*/

	FilterSchemePaymentType *string

	/*FilterSchemeProcessingDateFrom*/

	FilterSchemeProcessingDateFrom *strfmt.Date

	/*FilterSchemeProcessingDateTo*/

	FilterSchemeProcessingDateTo *strfmt.Date

	/*FilterStatus      Filter by mandate status      */

	FilterStatus *string

	/*FilterStatusReason      Filter by mandate status reason      */

	FilterStatusReason *string

	/*FilterSubmissionSubmissionDateFrom*/

	FilterSubmissionSubmissionDateFrom *strfmt.DateTime

	/*FilterSubmissionSubmissionDateTo*/

	FilterSubmissionSubmissionDateTo *strfmt.DateTime

	/*FilterUniqueSchemeID      Filter by unique scheme id      */

	FilterUniqueSchemeID *string

	/*PageNumber      Which page to select      */

	PageNumber *string

	/*PageSize      Number of items to select      */

	PageSize *int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client

	transport runtime.ClientTransport
	formats   strfmt.Registry
}

func (o *ListMandatesRequest) FromJson(j string) (*ListMandatesRequest, error) {

	return o, nil
}

func (o *ListMandatesRequest) WithFilterAdmissionAdmissionDateFrom(filterAdmissionAdmissionDateFrom strfmt.DateTime) *ListMandatesRequest {

	o.FilterAdmissionAdmissionDateFrom = &filterAdmissionAdmissionDateFrom

	return o
}

func (o *ListMandatesRequest) WithoutFilterAdmissionAdmissionDateFrom() *ListMandatesRequest {

	o.FilterAdmissionAdmissionDateFrom = nil

	return o
}

func (o *ListMandatesRequest) WithFilterAdmissionAdmissionDateTo(filterAdmissionAdmissionDateTo strfmt.DateTime) *ListMandatesRequest {

	o.FilterAdmissionAdmissionDateTo = &filterAdmissionAdmissionDateTo

	return o
}

func (o *ListMandatesRequest) WithoutFilterAdmissionAdmissionDateTo() *ListMandatesRequest {

	o.FilterAdmissionAdmissionDateTo = nil

	return o
}

func (o *ListMandatesRequest) WithFilterAdmissionSchemeStatusCode(filterAdmissionSchemeStatusCode string) *ListMandatesRequest {

	o.FilterAdmissionSchemeStatusCode = &filterAdmissionSchemeStatusCode

	return o
}

func (o *ListMandatesRequest) WithoutFilterAdmissionSchemeStatusCode() *ListMandatesRequest {

	o.FilterAdmissionSchemeStatusCode = nil

	return o
}

func (o *ListMandatesRequest) WithFilterAdmissionStatus(filterAdmissionStatus string) *ListMandatesRequest {

	o.FilterAdmissionStatus = &filterAdmissionStatus

	return o
}

func (o *ListMandatesRequest) WithoutFilterAdmissionStatus() *ListMandatesRequest {

	o.FilterAdmissionStatus = nil

	return o
}

func (o *ListMandatesRequest) WithFilterAllVersions(filterAllVersions bool) *ListMandatesRequest {

	o.FilterAllVersions = &filterAllVersions

	return o
}

func (o *ListMandatesRequest) WithoutFilterAllVersions() *ListMandatesRequest {

	o.FilterAllVersions = nil

	return o
}

func (o *ListMandatesRequest) WithFilterAmount(filterAmount string) *ListMandatesRequest {

	o.FilterAmount = &filterAmount

	return o
}

func (o *ListMandatesRequest) WithoutFilterAmount() *ListMandatesRequest {

	o.FilterAmount = nil

	return o
}

func (o *ListMandatesRequest) WithFilterBeneficiaryPartyAccountNumber(filterBeneficiaryPartyAccountNumber string) *ListMandatesRequest {

	o.FilterBeneficiaryPartyAccountNumber = &filterBeneficiaryPartyAccountNumber

	return o
}

func (o *ListMandatesRequest) WithoutFilterBeneficiaryPartyAccountNumber() *ListMandatesRequest {

	o.FilterBeneficiaryPartyAccountNumber = nil

	return o
}

func (o *ListMandatesRequest) WithFilterBeneficiaryPartyBankID(filterBeneficiaryPartyBankID string) *ListMandatesRequest {

	o.FilterBeneficiaryPartyBankID = &filterBeneficiaryPartyBankID

	return o
}

func (o *ListMandatesRequest) WithoutFilterBeneficiaryPartyBankID() *ListMandatesRequest {

	o.FilterBeneficiaryPartyBankID = nil

	return o
}

func (o *ListMandatesRequest) WithFilterClearingID(filterClearingID string) *ListMandatesRequest {

	o.FilterClearingID = &filterClearingID

	return o
}

func (o *ListMandatesRequest) WithoutFilterClearingID() *ListMandatesRequest {

	o.FilterClearingID = nil

	return o
}

func (o *ListMandatesRequest) WithFilterCurrency(filterCurrency string) *ListMandatesRequest {

	o.FilterCurrency = &filterCurrency

	return o
}

func (o *ListMandatesRequest) WithoutFilterCurrency() *ListMandatesRequest {

	o.FilterCurrency = nil

	return o
}

func (o *ListMandatesRequest) WithFilterDebtorPartyAccountNumber(filterDebtorPartyAccountNumber string) *ListMandatesRequest {

	o.FilterDebtorPartyAccountNumber = &filterDebtorPartyAccountNumber

	return o
}

func (o *ListMandatesRequest) WithoutFilterDebtorPartyAccountNumber() *ListMandatesRequest {

	o.FilterDebtorPartyAccountNumber = nil

	return o
}

func (o *ListMandatesRequest) WithFilterDebtorPartyBankID(filterDebtorPartyBankID string) *ListMandatesRequest {

	o.FilterDebtorPartyBankID = &filterDebtorPartyBankID

	return o
}

func (o *ListMandatesRequest) WithoutFilterDebtorPartyBankID() *ListMandatesRequest {

	o.FilterDebtorPartyBankID = nil

	return o
}

func (o *ListMandatesRequest) WithFilterOrganisationID(filterOrganisationID []strfmt.UUID) *ListMandatesRequest {

	o.FilterOrganisationID = filterOrganisationID

	return o
}

func (o *ListMandatesRequest) WithoutFilterOrganisationID() *ListMandatesRequest {

	o.FilterOrganisationID = nil

	return o
}

func (o *ListMandatesRequest) WithFilterPaymentScheme(filterPaymentScheme string) *ListMandatesRequest {

	o.FilterPaymentScheme = &filterPaymentScheme

	return o
}

func (o *ListMandatesRequest) WithoutFilterPaymentScheme() *ListMandatesRequest {

	o.FilterPaymentScheme = nil

	return o
}

func (o *ListMandatesRequest) WithFilterProcessingDateFrom(filterProcessingDateFrom strfmt.Date) *ListMandatesRequest {

	o.FilterProcessingDateFrom = &filterProcessingDateFrom

	return o
}

func (o *ListMandatesRequest) WithoutFilterProcessingDateFrom() *ListMandatesRequest {

	o.FilterProcessingDateFrom = nil

	return o
}

func (o *ListMandatesRequest) WithFilterProcessingDateTo(filterProcessingDateTo strfmt.Date) *ListMandatesRequest {

	o.FilterProcessingDateTo = &filterProcessingDateTo

	return o
}

func (o *ListMandatesRequest) WithoutFilterProcessingDateTo() *ListMandatesRequest {

	o.FilterProcessingDateTo = nil

	return o
}

func (o *ListMandatesRequest) WithFilterReference(filterReference string) *ListMandatesRequest {

	o.FilterReference = &filterReference

	return o
}

func (o *ListMandatesRequest) WithoutFilterReference() *ListMandatesRequest {

	o.FilterReference = nil

	return o
}

func (o *ListMandatesRequest) WithFilterSchemePaymentType(filterSchemePaymentType string) *ListMandatesRequest {

	o.FilterSchemePaymentType = &filterSchemePaymentType

	return o
}

func (o *ListMandatesRequest) WithoutFilterSchemePaymentType() *ListMandatesRequest {

	o.FilterSchemePaymentType = nil

	return o
}

func (o *ListMandatesRequest) WithFilterSchemeProcessingDateFrom(filterSchemeProcessingDateFrom strfmt.Date) *ListMandatesRequest {

	o.FilterSchemeProcessingDateFrom = &filterSchemeProcessingDateFrom

	return o
}

func (o *ListMandatesRequest) WithoutFilterSchemeProcessingDateFrom() *ListMandatesRequest {

	o.FilterSchemeProcessingDateFrom = nil

	return o
}

func (o *ListMandatesRequest) WithFilterSchemeProcessingDateTo(filterSchemeProcessingDateTo strfmt.Date) *ListMandatesRequest {

	o.FilterSchemeProcessingDateTo = &filterSchemeProcessingDateTo

	return o
}

func (o *ListMandatesRequest) WithoutFilterSchemeProcessingDateTo() *ListMandatesRequest {

	o.FilterSchemeProcessingDateTo = nil

	return o
}

func (o *ListMandatesRequest) WithFilterStatus(filterStatus string) *ListMandatesRequest {

	o.FilterStatus = &filterStatus

	return o
}

func (o *ListMandatesRequest) WithoutFilterStatus() *ListMandatesRequest {

	o.FilterStatus = nil

	return o
}

func (o *ListMandatesRequest) WithFilterStatusReason(filterStatusReason string) *ListMandatesRequest {

	o.FilterStatusReason = &filterStatusReason

	return o
}

func (o *ListMandatesRequest) WithoutFilterStatusReason() *ListMandatesRequest {

	o.FilterStatusReason = nil

	return o
}

func (o *ListMandatesRequest) WithFilterSubmissionSubmissionDateFrom(filterSubmissionSubmissionDateFrom strfmt.DateTime) *ListMandatesRequest {

	o.FilterSubmissionSubmissionDateFrom = &filterSubmissionSubmissionDateFrom

	return o
}

func (o *ListMandatesRequest) WithoutFilterSubmissionSubmissionDateFrom() *ListMandatesRequest {

	o.FilterSubmissionSubmissionDateFrom = nil

	return o
}

func (o *ListMandatesRequest) WithFilterSubmissionSubmissionDateTo(filterSubmissionSubmissionDateTo strfmt.DateTime) *ListMandatesRequest {

	o.FilterSubmissionSubmissionDateTo = &filterSubmissionSubmissionDateTo

	return o
}

func (o *ListMandatesRequest) WithoutFilterSubmissionSubmissionDateTo() *ListMandatesRequest {

	o.FilterSubmissionSubmissionDateTo = nil

	return o
}

func (o *ListMandatesRequest) WithFilterUniqueSchemeID(filterUniqueSchemeID string) *ListMandatesRequest {

	o.FilterUniqueSchemeID = &filterUniqueSchemeID

	return o
}

func (o *ListMandatesRequest) WithoutFilterUniqueSchemeID() *ListMandatesRequest {

	o.FilterUniqueSchemeID = nil

	return o
}

func (o *ListMandatesRequest) WithPageNumber(pageNumber string) *ListMandatesRequest {

	o.PageNumber = &pageNumber

	return o
}

func (o *ListMandatesRequest) WithoutPageNumber() *ListMandatesRequest {

	o.PageNumber = nil

	return o
}

func (o *ListMandatesRequest) WithPageSize(pageSize int64) *ListMandatesRequest {

	o.PageSize = &pageSize

	return o
}

func (o *ListMandatesRequest) WithoutPageSize() *ListMandatesRequest {

	o.PageSize = nil

	return o
}

// ////////////////
// WithContext adds the context to the list mandates Request
func (o *ListMandatesRequest) WithContext(ctx context.Context) *ListMandatesRequest {
	o.Context = ctx
	return o
}

// WithHTTPClient adds the HTTPClient to the list mandates Request
func (o *ListMandatesRequest) WithHTTPClient(client *http.Client) *ListMandatesRequest {
	o.HTTPClient = client
	return o
}

// WriteToRequest writes these Request to a swagger request
func (o *ListMandatesRequest) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.FilterAdmissionAdmissionDateFrom != nil {

		// query param filter[admission.admission_date_from]
		var qrFilterAdmissionAdmissionDateFrom strfmt.DateTime
		if o.FilterAdmissionAdmissionDateFrom != nil {
			qrFilterAdmissionAdmissionDateFrom = *o.FilterAdmissionAdmissionDateFrom
		}
		qFilterAdmissionAdmissionDateFrom := qrFilterAdmissionAdmissionDateFrom.String()
		if qFilterAdmissionAdmissionDateFrom != "" {
			if err := r.SetQueryParam("filter[admission.admission_date_from]", qFilterAdmissionAdmissionDateFrom); err != nil {
				return err
			}
		}

	}

	if o.FilterAdmissionAdmissionDateTo != nil {

		// query param filter[admission.admission_date_to]
		var qrFilterAdmissionAdmissionDateTo strfmt.DateTime
		if o.FilterAdmissionAdmissionDateTo != nil {
			qrFilterAdmissionAdmissionDateTo = *o.FilterAdmissionAdmissionDateTo
		}
		qFilterAdmissionAdmissionDateTo := qrFilterAdmissionAdmissionDateTo.String()
		if qFilterAdmissionAdmissionDateTo != "" {
			if err := r.SetQueryParam("filter[admission.admission_date_to]", qFilterAdmissionAdmissionDateTo); err != nil {
				return err
			}
		}

	}

	if o.FilterAdmissionSchemeStatusCode != nil {

		// query param filter[admission.scheme_status_code]
		var qrFilterAdmissionSchemeStatusCode string
		if o.FilterAdmissionSchemeStatusCode != nil {
			qrFilterAdmissionSchemeStatusCode = *o.FilterAdmissionSchemeStatusCode
		}
		qFilterAdmissionSchemeStatusCode := qrFilterAdmissionSchemeStatusCode
		if qFilterAdmissionSchemeStatusCode != "" {
			if err := r.SetQueryParam("filter[admission.scheme_status_code]", qFilterAdmissionSchemeStatusCode); err != nil {
				return err
			}
		}

	}

	if o.FilterAdmissionStatus != nil {

		// query param filter[admission.status]
		var qrFilterAdmissionStatus string
		if o.FilterAdmissionStatus != nil {
			qrFilterAdmissionStatus = *o.FilterAdmissionStatus
		}
		qFilterAdmissionStatus := qrFilterAdmissionStatus
		if qFilterAdmissionStatus != "" {
			if err := r.SetQueryParam("filter[admission.status]", qFilterAdmissionStatus); err != nil {
				return err
			}
		}

	}

	if o.FilterAllVersions != nil {

		// query param filter[all_versions]
		var qrFilterAllVersions bool
		if o.FilterAllVersions != nil {
			qrFilterAllVersions = *o.FilterAllVersions
		}
		qFilterAllVersions := swag.FormatBool(qrFilterAllVersions)
		if qFilterAllVersions != "" {
			if err := r.SetQueryParam("filter[all_versions]", qFilterAllVersions); err != nil {
				return err
			}
		}

	}

	if o.FilterAmount != nil {

		// query param filter[amount]
		var qrFilterAmount string
		if o.FilterAmount != nil {
			qrFilterAmount = *o.FilterAmount
		}
		qFilterAmount := qrFilterAmount
		if qFilterAmount != "" {
			if err := r.SetQueryParam("filter[amount]", qFilterAmount); err != nil {
				return err
			}
		}

	}

	if o.FilterBeneficiaryPartyAccountNumber != nil {

		// query param filter[beneficiary_party.account_number]
		var qrFilterBeneficiaryPartyAccountNumber string
		if o.FilterBeneficiaryPartyAccountNumber != nil {
			qrFilterBeneficiaryPartyAccountNumber = *o.FilterBeneficiaryPartyAccountNumber
		}
		qFilterBeneficiaryPartyAccountNumber := qrFilterBeneficiaryPartyAccountNumber
		if qFilterBeneficiaryPartyAccountNumber != "" {
			if err := r.SetQueryParam("filter[beneficiary_party.account_number]", qFilterBeneficiaryPartyAccountNumber); err != nil {
				return err
			}
		}

	}

	if o.FilterBeneficiaryPartyBankID != nil {

		// query param filter[beneficiary_party.bank_id]
		var qrFilterBeneficiaryPartyBankID string
		if o.FilterBeneficiaryPartyBankID != nil {
			qrFilterBeneficiaryPartyBankID = *o.FilterBeneficiaryPartyBankID
		}
		qFilterBeneficiaryPartyBankID := qrFilterBeneficiaryPartyBankID
		if qFilterBeneficiaryPartyBankID != "" {
			if err := r.SetQueryParam("filter[beneficiary_party.bank_id]", qFilterBeneficiaryPartyBankID); err != nil {
				return err
			}
		}

	}

	if o.FilterClearingID != nil {

		// query param filter[clearing_id]
		var qrFilterClearingID string
		if o.FilterClearingID != nil {
			qrFilterClearingID = *o.FilterClearingID
		}
		qFilterClearingID := qrFilterClearingID
		if qFilterClearingID != "" {
			if err := r.SetQueryParam("filter[clearing_id]", qFilterClearingID); err != nil {
				return err
			}
		}

	}

	if o.FilterCurrency != nil {

		// query param filter[currency]
		var qrFilterCurrency string
		if o.FilterCurrency != nil {
			qrFilterCurrency = *o.FilterCurrency
		}
		qFilterCurrency := qrFilterCurrency
		if qFilterCurrency != "" {
			if err := r.SetQueryParam("filter[currency]", qFilterCurrency); err != nil {
				return err
			}
		}

	}

	if o.FilterDebtorPartyAccountNumber != nil {

		// query param filter[debtor_party.account_number]
		var qrFilterDebtorPartyAccountNumber string
		if o.FilterDebtorPartyAccountNumber != nil {
			qrFilterDebtorPartyAccountNumber = *o.FilterDebtorPartyAccountNumber
		}
		qFilterDebtorPartyAccountNumber := qrFilterDebtorPartyAccountNumber
		if qFilterDebtorPartyAccountNumber != "" {
			if err := r.SetQueryParam("filter[debtor_party.account_number]", qFilterDebtorPartyAccountNumber); err != nil {
				return err
			}
		}

	}

	if o.FilterDebtorPartyBankID != nil {

		// query param filter[debtor_party.bank_id]
		var qrFilterDebtorPartyBankID string
		if o.FilterDebtorPartyBankID != nil {
			qrFilterDebtorPartyBankID = *o.FilterDebtorPartyBankID
		}
		qFilterDebtorPartyBankID := qrFilterDebtorPartyBankID
		if qFilterDebtorPartyBankID != "" {
			if err := r.SetQueryParam("filter[debtor_party.bank_id]", qFilterDebtorPartyBankID); err != nil {
				return err
			}
		}

	}

	var valuesFilterOrganisationID []string
	for _, v := range o.FilterOrganisationID {
		valuesFilterOrganisationID = append(valuesFilterOrganisationID, v.String())
	}

	joinedFilterOrganisationID := swag.JoinByFormat(valuesFilterOrganisationID, "")
	// query array param filter[organisation_id]
	if err := r.SetQueryParam("filter[organisation_id]", joinedFilterOrganisationID...); err != nil {
		return err
	}

	if o.FilterPaymentScheme != nil {

		// query param filter[payment_scheme]
		var qrFilterPaymentScheme string
		if o.FilterPaymentScheme != nil {
			qrFilterPaymentScheme = *o.FilterPaymentScheme
		}
		qFilterPaymentScheme := qrFilterPaymentScheme
		if qFilterPaymentScheme != "" {
			if err := r.SetQueryParam("filter[payment_scheme]", qFilterPaymentScheme); err != nil {
				return err
			}
		}

	}

	if o.FilterProcessingDateFrom != nil {

		// query param filter[processing_date_from]
		var qrFilterProcessingDateFrom strfmt.Date
		if o.FilterProcessingDateFrom != nil {
			qrFilterProcessingDateFrom = *o.FilterProcessingDateFrom
		}
		qFilterProcessingDateFrom := qrFilterProcessingDateFrom.String()
		if qFilterProcessingDateFrom != "" {
			if err := r.SetQueryParam("filter[processing_date_from]", qFilterProcessingDateFrom); err != nil {
				return err
			}
		}

	}

	if o.FilterProcessingDateTo != nil {

		// query param filter[processing_date_to]
		var qrFilterProcessingDateTo strfmt.Date
		if o.FilterProcessingDateTo != nil {
			qrFilterProcessingDateTo = *o.FilterProcessingDateTo
		}
		qFilterProcessingDateTo := qrFilterProcessingDateTo.String()
		if qFilterProcessingDateTo != "" {
			if err := r.SetQueryParam("filter[processing_date_to]", qFilterProcessingDateTo); err != nil {
				return err
			}
		}

	}

	if o.FilterReference != nil {

		// query param filter[reference]
		var qrFilterReference string
		if o.FilterReference != nil {
			qrFilterReference = *o.FilterReference
		}
		qFilterReference := qrFilterReference
		if qFilterReference != "" {
			if err := r.SetQueryParam("filter[reference]", qFilterReference); err != nil {
				return err
			}
		}

	}

	if o.FilterSchemePaymentType != nil {

		// query param filter[scheme_payment_type]
		var qrFilterSchemePaymentType string
		if o.FilterSchemePaymentType != nil {
			qrFilterSchemePaymentType = *o.FilterSchemePaymentType
		}
		qFilterSchemePaymentType := qrFilterSchemePaymentType
		if qFilterSchemePaymentType != "" {
			if err := r.SetQueryParam("filter[scheme_payment_type]", qFilterSchemePaymentType); err != nil {
				return err
			}
		}

	}

	if o.FilterSchemeProcessingDateFrom != nil {

		// query param filter[scheme_processing_date_from]
		var qrFilterSchemeProcessingDateFrom strfmt.Date
		if o.FilterSchemeProcessingDateFrom != nil {
			qrFilterSchemeProcessingDateFrom = *o.FilterSchemeProcessingDateFrom
		}
		qFilterSchemeProcessingDateFrom := qrFilterSchemeProcessingDateFrom.String()
		if qFilterSchemeProcessingDateFrom != "" {
			if err := r.SetQueryParam("filter[scheme_processing_date_from]", qFilterSchemeProcessingDateFrom); err != nil {
				return err
			}
		}

	}

	if o.FilterSchemeProcessingDateTo != nil {

		// query param filter[scheme_processing_date_to]
		var qrFilterSchemeProcessingDateTo strfmt.Date
		if o.FilterSchemeProcessingDateTo != nil {
			qrFilterSchemeProcessingDateTo = *o.FilterSchemeProcessingDateTo
		}
		qFilterSchemeProcessingDateTo := qrFilterSchemeProcessingDateTo.String()
		if qFilterSchemeProcessingDateTo != "" {
			if err := r.SetQueryParam("filter[scheme_processing_date_to]", qFilterSchemeProcessingDateTo); err != nil {
				return err
			}
		}

	}

	if o.FilterStatus != nil {

		// query param filter[status]
		var qrFilterStatus string
		if o.FilterStatus != nil {
			qrFilterStatus = *o.FilterStatus
		}
		qFilterStatus := qrFilterStatus
		if qFilterStatus != "" {
			if err := r.SetQueryParam("filter[status]", qFilterStatus); err != nil {
				return err
			}
		}

	}

	if o.FilterStatusReason != nil {

		// query param filter[status_reason]
		var qrFilterStatusReason string
		if o.FilterStatusReason != nil {
			qrFilterStatusReason = *o.FilterStatusReason
		}
		qFilterStatusReason := qrFilterStatusReason
		if qFilterStatusReason != "" {
			if err := r.SetQueryParam("filter[status_reason]", qFilterStatusReason); err != nil {
				return err
			}
		}

	}

	if o.FilterSubmissionSubmissionDateFrom != nil {

		// query param filter[submission.submission_date_from]
		var qrFilterSubmissionSubmissionDateFrom strfmt.DateTime
		if o.FilterSubmissionSubmissionDateFrom != nil {
			qrFilterSubmissionSubmissionDateFrom = *o.FilterSubmissionSubmissionDateFrom
		}
		qFilterSubmissionSubmissionDateFrom := qrFilterSubmissionSubmissionDateFrom.String()
		if qFilterSubmissionSubmissionDateFrom != "" {
			if err := r.SetQueryParam("filter[submission.submission_date_from]", qFilterSubmissionSubmissionDateFrom); err != nil {
				return err
			}
		}

	}

	if o.FilterSubmissionSubmissionDateTo != nil {

		// query param filter[submission.submission_date_to]
		var qrFilterSubmissionSubmissionDateTo strfmt.DateTime
		if o.FilterSubmissionSubmissionDateTo != nil {
			qrFilterSubmissionSubmissionDateTo = *o.FilterSubmissionSubmissionDateTo
		}
		qFilterSubmissionSubmissionDateTo := qrFilterSubmissionSubmissionDateTo.String()
		if qFilterSubmissionSubmissionDateTo != "" {
			if err := r.SetQueryParam("filter[submission.submission_date_to]", qFilterSubmissionSubmissionDateTo); err != nil {
				return err
			}
		}

	}

	if o.FilterUniqueSchemeID != nil {

		// query param filter[unique_scheme_id]
		var qrFilterUniqueSchemeID string
		if o.FilterUniqueSchemeID != nil {
			qrFilterUniqueSchemeID = *o.FilterUniqueSchemeID
		}
		qFilterUniqueSchemeID := qrFilterUniqueSchemeID
		if qFilterUniqueSchemeID != "" {
			if err := r.SetQueryParam("filter[unique_scheme_id]", qFilterUniqueSchemeID); err != nil {
				return err
			}
		}

	}

	if o.PageNumber != nil {

		// query param page[number]
		var qrPageNumber string
		if o.PageNumber != nil {
			qrPageNumber = *o.PageNumber
		}
		qPageNumber := qrPageNumber
		if qPageNumber != "" {
			if err := r.SetQueryParam("page[number]", qPageNumber); err != nil {
				return err
			}
		}

	}

	if o.PageSize != nil {

		// query param page[size]
		var qrPageSize int64
		if o.PageSize != nil {
			qrPageSize = *o.PageSize
		}
		qPageSize := swag.FormatInt64(qrPageSize)
		if qPageSize != "" {
			if err := r.SetQueryParam("page[size]", qPageSize); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
