// Code generated by go-swagger; DO NOT EDIT.

package branch_identification

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// Client.DeleteBranchIdentification creates a new DeleteBranchIdentificationRequest object
// with the default values initialized.
func (c *Client) DeleteBranchIdentification() *DeleteBranchIdentificationRequest {
	var ()
	return &DeleteBranchIdentificationRequest{

		BranchID: c.Defaults.GetStrfmtUUID("DeleteBranchIdentification", "branch_id"),

		IdentificationID: c.Defaults.GetStrfmtUUID("DeleteBranchIdentification", "identification_id"),

		Version: c.Defaults.GetInt64("DeleteBranchIdentification", "version"),

		timeout: cr.DefaultTimeout,

		transport: c.transport,
		formats:   c.formats,
	}
}

type DeleteBranchIdentificationRequest struct {

	/*BranchID      Branch Id      */

	BranchID strfmt.UUID

	/*IdentificationID      Branch Identification Id      */

	IdentificationID strfmt.UUID

	/*Version      Version      */

	Version int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client

	transport runtime.ClientTransport
	formats   strfmt.Registry
}

func (o *DeleteBranchIdentificationRequest) FromJson(j string) (*DeleteBranchIdentificationRequest, error) {

	return o, nil
}

func (o *DeleteBranchIdentificationRequest) WithBranchID(branchID strfmt.UUID) *DeleteBranchIdentificationRequest {

	o.BranchID = branchID

	return o
}

func (o *DeleteBranchIdentificationRequest) WithIdentificationID(identificationID strfmt.UUID) *DeleteBranchIdentificationRequest {

	o.IdentificationID = identificationID

	return o
}

func (o *DeleteBranchIdentificationRequest) WithVersion(version int64) *DeleteBranchIdentificationRequest {

	o.Version = version

	return o
}

// ////////////////
// WithContext adds the context to the delete branch identification Request
func (o *DeleteBranchIdentificationRequest) WithContext(ctx context.Context) *DeleteBranchIdentificationRequest {
	o.Context = ctx
	return o
}

// WithHTTPClient adds the HTTPClient to the delete branch identification Request
func (o *DeleteBranchIdentificationRequest) WithHTTPClient(client *http.Client) *DeleteBranchIdentificationRequest {
	o.HTTPClient = client
	return o
}

// WriteToRequest writes these Request to a swagger request
func (o *DeleteBranchIdentificationRequest) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param branch_id
	if err := r.SetPathParam("branch_id", o.BranchID.String()); err != nil {
		return err
	}

	// path param identification_id
	if err := r.SetPathParam("identification_id", o.IdentificationID.String()); err != nil {
		return err
	}

	// query param version
	qrVersion := o.Version
	qVersion := swag.FormatInt64(qrVersion)
	if qVersion != "" {
		if err := r.SetQueryParam("version", qVersion); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
