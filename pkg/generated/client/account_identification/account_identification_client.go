// Code generated by go-swagger; DO NOT EDIT.

// :Form3: Testing!

package account_identification

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/form3tech-oss/go-form3/v6/pkg/client"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new account identification API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry, defaults client.Defaults) *Client {
	return &Client{transport: transport, formats: formats, Defaults: defaults}
}

/*
Client for account identification API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
	Defaults  client.Defaults
}

// range of operations

/*
create account identification API
*/
func (a *CreateAccountIdentificationRequest) Do() (*CreateAccountIdentificationCreated, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CreateAccountIdentification",
		Method:             "POST",
		PathPattern:        "/organisation/accounts/{account_id}/identifications",
		ProducesMediaTypes: []string{"application/vnd.api+json", "application/json"},
		ConsumesMediaTypes: []string{"application/vnd.api+json", "application/json"},
		Schemes:            []string{"https"},
		Params:             a,
		Reader:             &CreateAccountIdentificationReader{formats: a.formats},
		//AuthInfo: authInfo,
		Context: a.Context,
		Client:  a.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateAccountIdentificationCreated), nil

}

func (a *CreateAccountIdentificationRequest) MustDo() *CreateAccountIdentificationCreated {
	r0, err := a.Do()
	if err != nil {
		panic(err)
	}
	return r0
}

/*
delete account identification API
*/
func (a *DeleteAccountIdentificationRequest) Do() (*DeleteAccountIdentificationNoContent, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteAccountIdentification",
		Method:             "DELETE",
		PathPattern:        "/organisation/accounts/{account_id}/identifications/{identification_id}",
		ProducesMediaTypes: []string{"application/vnd.api+json", "application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             a,
		Reader:             &DeleteAccountIdentificationReader{formats: a.formats},
		//AuthInfo: authInfo,
		Context: a.Context,
		Client:  a.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteAccountIdentificationNoContent), nil

}

func (a *DeleteAccountIdentificationRequest) MustDo() *DeleteAccountIdentificationNoContent {
	r0, err := a.Do()
	if err != nil {
		panic(err)
	}
	return r0
}

/*
get account identification API
*/
func (a *GetAccountIdentificationRequest) Do() (*GetAccountIdentificationOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAccountIdentification",
		Method:             "GET",
		PathPattern:        "/organisation/accounts/{account_id}/identifications/{identification_id}",
		ProducesMediaTypes: []string{"application/vnd.api+json", "application/json"},
		ConsumesMediaTypes: []string{"application/vnd.api+json", "application/json"},
		Schemes:            []string{"https"},
		Params:             a,
		Reader:             &GetAccountIdentificationReader{formats: a.formats},
		//AuthInfo: authInfo,
		Context: a.Context,
		Client:  a.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAccountIdentificationOK), nil

}

func (a *GetAccountIdentificationRequest) MustDo() *GetAccountIdentificationOK {
	r0, err := a.Do()
	if err != nil {
		panic(err)
	}
	return r0
}

/*
list account identifications by account API
*/
func (a *ListAccountIdentificationsByAccountRequest) Do() (*ListAccountIdentificationsByAccountOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ListAccountIdentificationsByAccount",
		Method:             "GET",
		PathPattern:        "/organisation/accounts/{account_id}/identifications",
		ProducesMediaTypes: []string{"application/vnd.api+json", "application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             a,
		Reader:             &ListAccountIdentificationsByAccountReader{formats: a.formats},
		//AuthInfo: authInfo,
		Context: a.Context,
		Client:  a.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListAccountIdentificationsByAccountOK), nil

}

func (a *ListAccountIdentificationsByAccountRequest) MustDo() *ListAccountIdentificationsByAccountOK {
	r0, err := a.Do()
	if err != nil {
		panic(err)
	}
	return r0
}

/*
patch account identification API
*/
func (a *PatchAccountIdentificationRequest) Do() (*PatchAccountIdentificationOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PatchAccountIdentification",
		Method:             "PATCH",
		PathPattern:        "/organisation/accounts/{account_id}/identifications/{identification_id}",
		ProducesMediaTypes: []string{"application/vnd.api+json", "application/json"},
		ConsumesMediaTypes: []string{"application/vnd.api+json", "application/json"},
		Schemes:            []string{"https"},
		Params:             a,
		Reader:             &PatchAccountIdentificationReader{formats: a.formats},
		//AuthInfo: authInfo,
		Context: a.Context,
		Client:  a.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PatchAccountIdentificationOK), nil

}

func (a *PatchAccountIdentificationRequest) MustDo() *PatchAccountIdentificationOK {
	r0, err := a.Do()
	if err != nil {
		panic(err)
	}
	return r0
}

/////////

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
