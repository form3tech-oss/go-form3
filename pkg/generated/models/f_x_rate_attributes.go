// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"log"

	"github.com/form3tech-oss/go-form3/pkg/client"
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// FXRateAttributes f x rate attributes
// swagger:model FXRateAttributes
type FXRateAttributes struct {

	// processing date
	// Required: true
	// Format: date
	ProcessingDate FXProcessingDate `json:"processing_date"`

	// rate
	// Required: true
	Rate *FXAttributesRate `json:"rate"`

	// source
	// Required: true
	Source *FXSource `json:"source"`

	// target
	// Required: true
	Target *FXTarget `json:"target"`

	// type
	// Required: true
	Type FXType `json:"type"`

	// warning
	Warning *FXWarning `json:"warning,omitempty"`
}

func FXRateAttributesWithDefaults(defaults client.Defaults) *FXRateAttributes {
	return &FXRateAttributes{

		// TODO ProcessingDate: FXProcessingDate,

		Rate: FXAttributesRateWithDefaults(defaults),

		Source: FXSourceWithDefaults(defaults),

		Target: FXTargetWithDefaults(defaults),

		// TODO Type: FXType,

		// TODO Warning: FXWarning,

	}
}

func (m *FXRateAttributes) WithProcessingDate(processingDate FXProcessingDate) *FXRateAttributes {

	m.ProcessingDate = processingDate

	return m
}

func (m *FXRateAttributes) WithRate(rate FXAttributesRate) *FXRateAttributes {

	m.Rate = &rate

	return m
}

func (m *FXRateAttributes) WithoutRate() *FXRateAttributes {
	m.Rate = nil
	return m
}

func (m *FXRateAttributes) WithSource(source FXSource) *FXRateAttributes {

	m.Source = &source

	return m
}

func (m *FXRateAttributes) WithoutSource() *FXRateAttributes {
	m.Source = nil
	return m
}

func (m *FXRateAttributes) WithTarget(target FXTarget) *FXRateAttributes {

	m.Target = &target

	return m
}

func (m *FXRateAttributes) WithoutTarget() *FXRateAttributes {
	m.Target = nil
	return m
}

func (m *FXRateAttributes) WithType(typeVar FXType) *FXRateAttributes {

	m.Type = typeVar

	return m
}

func (m *FXRateAttributes) WithWarning(warning FXWarning) *FXRateAttributes {

	m.Warning = &warning

	return m
}

func (m *FXRateAttributes) WithoutWarning() *FXRateAttributes {
	m.Warning = nil
	return m
}

// Validate validates this f x rate attributes
func (m *FXRateAttributes) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProcessingDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSource(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTarget(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWarning(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FXRateAttributes) validateProcessingDate(formats strfmt.Registry) error {

	if err := m.ProcessingDate.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("processing_date")
		}
		return err
	}

	return nil
}

func (m *FXRateAttributes) validateRate(formats strfmt.Registry) error {

	if err := validate.Required("rate", "body", m.Rate); err != nil {
		return err
	}

	if m.Rate != nil {
		if err := m.Rate.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rate")
			}
			return err
		}
	}

	return nil
}

func (m *FXRateAttributes) validateSource(formats strfmt.Registry) error {

	if err := validate.Required("source", "body", m.Source); err != nil {
		return err
	}

	if m.Source != nil {
		if err := m.Source.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("source")
			}
			return err
		}
	}

	return nil
}

func (m *FXRateAttributes) validateTarget(formats strfmt.Registry) error {

	if err := validate.Required("target", "body", m.Target); err != nil {
		return err
	}

	if m.Target != nil {
		if err := m.Target.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("target")
			}
			return err
		}
	}

	return nil
}

func (m *FXRateAttributes) validateType(formats strfmt.Registry) error {

	if err := m.Type.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("type")
		}
		return err
	}

	return nil
}

func (m *FXRateAttributes) validateWarning(formats strfmt.Registry) error {

	if swag.IsZero(m.Warning) { // not required
		return nil
	}

	if m.Warning != nil {
		if err := m.Warning.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("warning")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FXRateAttributes) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FXRateAttributes) UnmarshalBinary(b []byte) error {
	var res FXRateAttributes
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
func (m *FXRateAttributes) Json() string {
	json, err := json.MarshalIndent(m, "  ", "  ")
	if err != nil {
		log.Fatal(err)
	}
	return string(json)
}
