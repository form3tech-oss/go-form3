// Code generated by go-swagger; DO NOT EDIT.

package branches

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// Client.DeleteBranch creates a new DeleteBranchRequest object
// with the default values initialized.
func (c *Client) DeleteBranch() *DeleteBranchRequest {
	var ()
	return &DeleteBranchRequest{

		ID: c.Defaults.GetStrfmtUUID("DeleteBranch", "id"),

		Version: c.Defaults.GetInt64("DeleteBranch", "version"),

		timeout: cr.DefaultTimeout,

		transport: c.transport,
		formats:   c.formats,
	}
}

type DeleteBranchRequest struct {

	/*ID      Branch Id      */

	ID strfmt.UUID

	/*Version      Version      */

	Version int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client

	transport runtime.ClientTransport
	formats   strfmt.Registry
}

func (o *DeleteBranchRequest) FromJson(j string) (*DeleteBranchRequest, error) {

	return o, nil
}

func (o *DeleteBranchRequest) WithID(id strfmt.UUID) *DeleteBranchRequest {

	o.ID = id

	return o
}

func (o *DeleteBranchRequest) WithVersion(version int64) *DeleteBranchRequest {

	o.Version = version

	return o
}

// ////////////////
// WithContext adds the context to the delete branch Request
func (o *DeleteBranchRequest) WithContext(ctx context.Context) *DeleteBranchRequest {
	o.Context = ctx
	return o
}

// WithHTTPClient adds the HTTPClient to the delete branch Request
func (o *DeleteBranchRequest) WithHTTPClient(client *http.Client) *DeleteBranchRequest {
	o.HTTPClient = client
	return o
}

// WriteToRequest writes these Request to a swagger request
func (o *DeleteBranchRequest) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param id
	if err := r.SetPathParam("id", o.ID.String()); err != nil {
		return err
	}

	// query param version
	qrVersion := o.Version
	qVersion := swag.FormatInt64(qrVersion)
	if qVersion != "" {
		if err := r.SetQueryParam("version", qVersion); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
