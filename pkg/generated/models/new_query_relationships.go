// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"log"

	"github.com/form3tech-oss/go-form3/v4/pkg/client"
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// NewQueryRelationships new query relationships
// swagger:model NewQueryRelationships
type NewQueryRelationships struct {

	// payment
	Payment *RelationshipsPayment `json:"payment,omitempty"`

	// payment admission
	PaymentAdmission *RelationshipsPaymentAdmission `json:"payment_admission,omitempty"`

	// payment submission
	PaymentSubmission *RelationshipsPaymentSubmission `json:"payment_submission,omitempty"`

	// query
	Query *RelationshipsQuery `json:"query,omitempty"`

	// recall
	Recall *RelationshipsPaymentRecall `json:"recall,omitempty"`

	// recall submission
	RecallSubmission *RelationshipsPaymentRecallSubmission `json:"recall_submission,omitempty"`
}

func NewQueryRelationshipsWithDefaults(defaults client.Defaults) *NewQueryRelationships {
	return &NewQueryRelationships{

		Payment: RelationshipsPaymentWithDefaults(defaults),

		PaymentAdmission: RelationshipsPaymentAdmissionWithDefaults(defaults),

		PaymentSubmission: RelationshipsPaymentSubmissionWithDefaults(defaults),

		Query: RelationshipsQueryWithDefaults(defaults),

		Recall: RelationshipsPaymentRecallWithDefaults(defaults),

		RecallSubmission: RelationshipsPaymentRecallSubmissionWithDefaults(defaults),
	}
}

func (m *NewQueryRelationships) WithPayment(payment RelationshipsPayment) *NewQueryRelationships {

	m.Payment = &payment

	return m
}

func (m *NewQueryRelationships) WithoutPayment() *NewQueryRelationships {
	m.Payment = nil
	return m
}

func (m *NewQueryRelationships) WithPaymentAdmission(paymentAdmission RelationshipsPaymentAdmission) *NewQueryRelationships {

	m.PaymentAdmission = &paymentAdmission

	return m
}

func (m *NewQueryRelationships) WithoutPaymentAdmission() *NewQueryRelationships {
	m.PaymentAdmission = nil
	return m
}

func (m *NewQueryRelationships) WithPaymentSubmission(paymentSubmission RelationshipsPaymentSubmission) *NewQueryRelationships {

	m.PaymentSubmission = &paymentSubmission

	return m
}

func (m *NewQueryRelationships) WithoutPaymentSubmission() *NewQueryRelationships {
	m.PaymentSubmission = nil
	return m
}

func (m *NewQueryRelationships) WithQuery(query RelationshipsQuery) *NewQueryRelationships {

	m.Query = &query

	return m
}

func (m *NewQueryRelationships) WithoutQuery() *NewQueryRelationships {
	m.Query = nil
	return m
}

func (m *NewQueryRelationships) WithRecall(recall RelationshipsPaymentRecall) *NewQueryRelationships {

	m.Recall = &recall

	return m
}

func (m *NewQueryRelationships) WithoutRecall() *NewQueryRelationships {
	m.Recall = nil
	return m
}

func (m *NewQueryRelationships) WithRecallSubmission(recallSubmission RelationshipsPaymentRecallSubmission) *NewQueryRelationships {

	m.RecallSubmission = &recallSubmission

	return m
}

func (m *NewQueryRelationships) WithoutRecallSubmission() *NewQueryRelationships {
	m.RecallSubmission = nil
	return m
}

// Validate validates this new query relationships
func (m *NewQueryRelationships) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePayment(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePaymentAdmission(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePaymentSubmission(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQuery(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRecall(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRecallSubmission(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NewQueryRelationships) validatePayment(formats strfmt.Registry) error {

	if swag.IsZero(m.Payment) { // not required
		return nil
	}

	if m.Payment != nil {
		if err := m.Payment.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("payment")
			}
			return err
		}
	}

	return nil
}

func (m *NewQueryRelationships) validatePaymentAdmission(formats strfmt.Registry) error {

	if swag.IsZero(m.PaymentAdmission) { // not required
		return nil
	}

	if m.PaymentAdmission != nil {
		if err := m.PaymentAdmission.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("payment_admission")
			}
			return err
		}
	}

	return nil
}

func (m *NewQueryRelationships) validatePaymentSubmission(formats strfmt.Registry) error {

	if swag.IsZero(m.PaymentSubmission) { // not required
		return nil
	}

	if m.PaymentSubmission != nil {
		if err := m.PaymentSubmission.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("payment_submission")
			}
			return err
		}
	}

	return nil
}

func (m *NewQueryRelationships) validateQuery(formats strfmt.Registry) error {

	if swag.IsZero(m.Query) { // not required
		return nil
	}

	if m.Query != nil {
		if err := m.Query.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("query")
			}
			return err
		}
	}

	return nil
}

func (m *NewQueryRelationships) validateRecall(formats strfmt.Registry) error {

	if swag.IsZero(m.Recall) { // not required
		return nil
	}

	if m.Recall != nil {
		if err := m.Recall.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("recall")
			}
			return err
		}
	}

	return nil
}

func (m *NewQueryRelationships) validateRecallSubmission(formats strfmt.Registry) error {

	if swag.IsZero(m.RecallSubmission) { // not required
		return nil
	}

	if m.RecallSubmission != nil {
		if err := m.RecallSubmission.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("recall_submission")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *NewQueryRelationships) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NewQueryRelationships) UnmarshalBinary(b []byte) error {
	var res NewQueryRelationships
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
func (m *NewQueryRelationships) Json() string {
	json, err := json.MarshalIndent(m, "  ", "  ")
	if err != nil {
		log.Fatal(err)
	}
	return string(json)
}
