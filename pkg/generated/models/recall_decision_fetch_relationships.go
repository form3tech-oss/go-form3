// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"log"

	"github.com/form3tech-oss/go-form3/v7/pkg/client"
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// RecallDecisionFetchRelationships recall decision fetch relationships
// swagger:model RecallDecisionFetchRelationships
type RecallDecisionFetchRelationships struct {

	// ID of the recall decision admission resource related to the recall decision
	DecisionAdmission *RelationshipLinks `json:"decision_admission,omitempty"`

	// ID of the recall decision submission resource related to the recall decision
	DecisionSubmission *RelationshipLinks `json:"decision_submission,omitempty"`

	// ID of the payment resource related to the recall decision
	Payment *RelationshipLinks `json:"payment,omitempty"`

	// ID of the recall resource related to the recall decision
	Recall *RelationshipLinks `json:"recall,omitempty"`
}

func RecallDecisionFetchRelationshipsWithDefaults(defaults client.Defaults) *RecallDecisionFetchRelationships {
	return &RecallDecisionFetchRelationships{

		DecisionAdmission: RelationshipLinksWithDefaults(defaults),

		DecisionSubmission: RelationshipLinksWithDefaults(defaults),

		Payment: RelationshipLinksWithDefaults(defaults),

		Recall: RelationshipLinksWithDefaults(defaults),
	}
}

func (m *RecallDecisionFetchRelationships) WithDecisionAdmission(decisionAdmission RelationshipLinks) *RecallDecisionFetchRelationships {

	m.DecisionAdmission = &decisionAdmission

	return m
}

func (m *RecallDecisionFetchRelationships) WithoutDecisionAdmission() *RecallDecisionFetchRelationships {
	m.DecisionAdmission = nil
	return m
}

func (m *RecallDecisionFetchRelationships) WithDecisionSubmission(decisionSubmission RelationshipLinks) *RecallDecisionFetchRelationships {

	m.DecisionSubmission = &decisionSubmission

	return m
}

func (m *RecallDecisionFetchRelationships) WithoutDecisionSubmission() *RecallDecisionFetchRelationships {
	m.DecisionSubmission = nil
	return m
}

func (m *RecallDecisionFetchRelationships) WithPayment(payment RelationshipLinks) *RecallDecisionFetchRelationships {

	m.Payment = &payment

	return m
}

func (m *RecallDecisionFetchRelationships) WithoutPayment() *RecallDecisionFetchRelationships {
	m.Payment = nil
	return m
}

func (m *RecallDecisionFetchRelationships) WithRecall(recall RelationshipLinks) *RecallDecisionFetchRelationships {

	m.Recall = &recall

	return m
}

func (m *RecallDecisionFetchRelationships) WithoutRecall() *RecallDecisionFetchRelationships {
	m.Recall = nil
	return m
}

// Validate validates this recall decision fetch relationships
func (m *RecallDecisionFetchRelationships) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDecisionAdmission(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDecisionSubmission(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePayment(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRecall(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RecallDecisionFetchRelationships) validateDecisionAdmission(formats strfmt.Registry) error {

	if swag.IsZero(m.DecisionAdmission) { // not required
		return nil
	}

	if m.DecisionAdmission != nil {
		if err := m.DecisionAdmission.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("decision_admission")
			}
			return err
		}
	}

	return nil
}

func (m *RecallDecisionFetchRelationships) validateDecisionSubmission(formats strfmt.Registry) error {

	if swag.IsZero(m.DecisionSubmission) { // not required
		return nil
	}

	if m.DecisionSubmission != nil {
		if err := m.DecisionSubmission.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("decision_submission")
			}
			return err
		}
	}

	return nil
}

func (m *RecallDecisionFetchRelationships) validatePayment(formats strfmt.Registry) error {

	if swag.IsZero(m.Payment) { // not required
		return nil
	}

	if m.Payment != nil {
		if err := m.Payment.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("payment")
			}
			return err
		}
	}

	return nil
}

func (m *RecallDecisionFetchRelationships) validateRecall(formats strfmt.Registry) error {

	if swag.IsZero(m.Recall) { // not required
		return nil
	}

	if m.Recall != nil {
		if err := m.Recall.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("recall")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RecallDecisionFetchRelationships) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RecallDecisionFetchRelationships) UnmarshalBinary(b []byte) error {
	var res RecallDecisionFetchRelationships
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
func (m *RecallDecisionFetchRelationships) Json() string {
	json, err := json.MarshalIndent(m, "  ", "  ")
	if err != nil {
		log.Fatal(err)
	}
	return string(json)
}
