// Code generated by go-swagger; DO NOT EDIT.

package direct_debits

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"github.com/form3tech-oss/go-form3/v6/pkg/generated/models"
)

// Client.PostDirectdebitsIDDecisionsDecisionIDSubmissions creates a new PostDirectdebitsIDDecisionsDecisionIDSubmissionsRequest object
// with the default values initialized.
func (c *Client) PostDirectdebitsIDDecisionsDecisionIDSubmissions() *PostDirectdebitsIDDecisionsDecisionIDSubmissionsRequest {
	var ()
	return &PostDirectdebitsIDDecisionsDecisionIDSubmissionsRequest{

		DirectDebitDecisionSubmissionCreation: models.DirectDebitDecisionSubmissionCreationWithDefaults(c.Defaults),

		DecisionID: c.Defaults.GetStrfmtUUID("PostDirectdebitsIDDecisionsDecisionIDSubmissions", "decisionId"),

		ID: c.Defaults.GetStrfmtUUID("PostDirectdebitsIDDecisionsDecisionIDSubmissions", "id"),

		timeout: cr.DefaultTimeout,

		transport: c.transport,
		formats:   c.formats,
	}
}

type PostDirectdebitsIDDecisionsDecisionIDSubmissionsRequest struct {

	/*DirectDebitDecisionSubmissionCreationRequest*/

	*models.DirectDebitDecisionSubmissionCreation

	/*DecisionID      Direct Debit decision id      */

	DecisionID strfmt.UUID

	/*ID      Direct Debit Id      */

	ID strfmt.UUID

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client

	transport runtime.ClientTransport
	formats   strfmt.Registry
}

func (o *PostDirectdebitsIDDecisionsDecisionIDSubmissionsRequest) FromJson(j string) (*PostDirectdebitsIDDecisionsDecisionIDSubmissionsRequest, error) {

	var m models.DirectDebitDecisionSubmissionCreation
	if err := json.Unmarshal([]byte(j), &m); err != nil {
		return nil, fmt.Errorf("could not unmarshal JSON: %w", err)
	}

	o.DirectDebitDecisionSubmissionCreation = &m

	return o, nil
}

func (o *PostDirectdebitsIDDecisionsDecisionIDSubmissionsRequest) WithDirectDebitDecisionSubmissionCreationRequest(directDebitDecisionSubmissionCreationRequest models.DirectDebitDecisionSubmissionCreation) *PostDirectdebitsIDDecisionsDecisionIDSubmissionsRequest {

	o.DirectDebitDecisionSubmissionCreation = &directDebitDecisionSubmissionCreationRequest

	return o
}

func (o *PostDirectdebitsIDDecisionsDecisionIDSubmissionsRequest) WithoutDirectDebitDecisionSubmissionCreationRequest() *PostDirectdebitsIDDecisionsDecisionIDSubmissionsRequest {

	o.DirectDebitDecisionSubmissionCreation = &models.DirectDebitDecisionSubmissionCreation{}

	return o
}

func (o *PostDirectdebitsIDDecisionsDecisionIDSubmissionsRequest) WithDecisionID(decisionID strfmt.UUID) *PostDirectdebitsIDDecisionsDecisionIDSubmissionsRequest {

	o.DecisionID = decisionID

	return o
}

func (o *PostDirectdebitsIDDecisionsDecisionIDSubmissionsRequest) WithID(id strfmt.UUID) *PostDirectdebitsIDDecisionsDecisionIDSubmissionsRequest {

	o.ID = id

	return o
}

// ////////////////
// WithContext adds the context to the post directdebits ID decisions decision ID submissions Request
func (o *PostDirectdebitsIDDecisionsDecisionIDSubmissionsRequest) WithContext(ctx context.Context) *PostDirectdebitsIDDecisionsDecisionIDSubmissionsRequest {
	o.Context = ctx
	return o
}

// WithHTTPClient adds the HTTPClient to the post directdebits ID decisions decision ID submissions Request
func (o *PostDirectdebitsIDDecisionsDecisionIDSubmissionsRequest) WithHTTPClient(client *http.Client) *PostDirectdebitsIDDecisionsDecisionIDSubmissionsRequest {
	o.HTTPClient = client
	return o
}

// WriteToRequest writes these Request to a swagger request
func (o *PostDirectdebitsIDDecisionsDecisionIDSubmissionsRequest) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// ISBODYPARAM
	if o.DirectDebitDecisionSubmissionCreation != nil {
		if err := r.SetBodyParam(o.DirectDebitDecisionSubmissionCreation); err != nil {
			return err
		}
	}

	// path param decisionId
	if err := r.SetPathParam("decisionId", o.DecisionID.String()); err != nil {
		return err
	}

	// path param id
	if err := r.SetPathParam("id", o.ID.String()); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
