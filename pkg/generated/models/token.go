// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"log"

	"github.com/form3tech-oss/go-form3/v4/pkg/client"
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Token token
// swagger:model Token
type Token struct {

	// The access token to be used for all future API calls until `expires_in`
	AccessToken string `json:"access_token,omitempty"`

	// The lifetime of this token in seconds
	ExpiresIn int32 `json:"expires_in,omitempty"`

	// The type of the token. Is always set to `Bearer`.
	// Enum: [Bearer]
	TokenType string `json:"token_type,omitempty"`
}

func TokenWithDefaults(defaults client.Defaults) *Token {
	return &Token{

		AccessToken: defaults.GetString("Token", "access_token"),

		ExpiresIn: defaults.GetInt32("Token", "expires_in"),

		TokenType: defaults.GetString("Token", "token_type"),
	}
}

func (m *Token) WithAccessToken(accessToken string) *Token {

	m.AccessToken = accessToken

	return m
}

func (m *Token) WithExpiresIn(expiresIn int32) *Token {

	m.ExpiresIn = expiresIn

	return m
}

func (m *Token) WithTokenType(tokenType string) *Token {

	m.TokenType = tokenType

	return m
}

// Validate validates this token
func (m *Token) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateTokenType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var tokenTypeTokenTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Bearer"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		tokenTypeTokenTypePropEnum = append(tokenTypeTokenTypePropEnum, v)
	}
}

const (

	// TokenTokenTypeBearer captures enum value "Bearer"
	TokenTokenTypeBearer string = "Bearer"
)

// prop value enum
func (m *Token) validateTokenTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, tokenTypeTokenTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Token) validateTokenType(formats strfmt.Registry) error {

	if swag.IsZero(m.TokenType) { // not required
		return nil
	}

	// value enum
	if err := m.validateTokenTypeEnum("token_type", "body", m.TokenType); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Token) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Token) UnmarshalBinary(b []byte) error {
	var res Token
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
func (m *Token) Json() string {
	json, err := json.MarshalIndent(m, "  ", "  ")
	if err != nil {
		log.Fatal(err)
	}
	return string(json)
}
