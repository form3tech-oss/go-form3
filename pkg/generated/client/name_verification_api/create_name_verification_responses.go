// Code generated by go-swagger; DO NOT EDIT.

package name_verification_api

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/form3tech-oss/go-form3/v7/pkg/generated/models"
)

// CreateNameVerificationReader is a Reader for the CreateNameVerification structure.
type CreateNameVerificationReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateNameVerificationReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 201:
		result := NewCreateNameVerificationCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewCreateNameVerificationBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewCreateNameVerificationForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 409:
		result := NewCreateNameVerificationConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewCreateNameVerificationInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewCreateNameVerificationCreated creates a CreateNameVerificationCreated with default headers values
func NewCreateNameVerificationCreated() *CreateNameVerificationCreated {
	return &CreateNameVerificationCreated{}
}

/*
CreateNameVerificationCreated handles this case with default header values.

created
*/
type CreateNameVerificationCreated struct {

	//Payload

	// isStream: false
	*models.NameVerificationCreationResponse
}

// IsSuccess returns true when this create name verification created response has a 2xx status code
func (o *CreateNameVerificationCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this create name verification created response has a 3xx status code
func (o *CreateNameVerificationCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create name verification created response has a 4xx status code
func (o *CreateNameVerificationCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this create name verification created response has a 5xx status code
func (o *CreateNameVerificationCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this create name verification created response a status code equal to that given
func (o *CreateNameVerificationCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the create name verification created response
func (o *CreateNameVerificationCreated) Code() int {
	return 201
}

func (o *CreateNameVerificationCreated) Error() string {
	return fmt.Sprintf("[POST /organisation/nameverifications][%d] createNameVerificationCreated", 201)
}

func (o *CreateNameVerificationCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.NameVerificationCreationResponse = new(models.NameVerificationCreationResponse)

	// response payload

	if err := consumer.Consume(response.Body(), o.NameVerificationCreationResponse); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateNameVerificationBadRequest creates a CreateNameVerificationBadRequest with default headers values
func NewCreateNameVerificationBadRequest() *CreateNameVerificationBadRequest {
	return &CreateNameVerificationBadRequest{}
}

/*
CreateNameVerificationBadRequest handles this case with default header values.

Bad Request
*/
type CreateNameVerificationBadRequest struct {

	//Payload

	// isStream: false
	*models.APIError
}

// IsSuccess returns true when this create name verification bad request response has a 2xx status code
func (o *CreateNameVerificationBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create name verification bad request response has a 3xx status code
func (o *CreateNameVerificationBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create name verification bad request response has a 4xx status code
func (o *CreateNameVerificationBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this create name verification bad request response has a 5xx status code
func (o *CreateNameVerificationBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this create name verification bad request response a status code equal to that given
func (o *CreateNameVerificationBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the create name verification bad request response
func (o *CreateNameVerificationBadRequest) Code() int {
	return 400
}

func (o *CreateNameVerificationBadRequest) Error() string {
	return fmt.Sprintf("[POST /organisation/nameverifications][%d] createNameVerificationBadRequest", 400)
}

func (o *CreateNameVerificationBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.APIError = new(models.APIError)

	// response payload

	if err := consumer.Consume(response.Body(), o.APIError); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateNameVerificationForbidden creates a CreateNameVerificationForbidden with default headers values
func NewCreateNameVerificationForbidden() *CreateNameVerificationForbidden {
	return &CreateNameVerificationForbidden{}
}

/*
CreateNameVerificationForbidden handles this case with default header values.

Forbidden
*/
type CreateNameVerificationForbidden struct {

	//Payload

	// isStream: false
	*models.APIError
}

// IsSuccess returns true when this create name verification forbidden response has a 2xx status code
func (o *CreateNameVerificationForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create name verification forbidden response has a 3xx status code
func (o *CreateNameVerificationForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create name verification forbidden response has a 4xx status code
func (o *CreateNameVerificationForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this create name verification forbidden response has a 5xx status code
func (o *CreateNameVerificationForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this create name verification forbidden response a status code equal to that given
func (o *CreateNameVerificationForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the create name verification forbidden response
func (o *CreateNameVerificationForbidden) Code() int {
	return 403
}

func (o *CreateNameVerificationForbidden) Error() string {
	return fmt.Sprintf("[POST /organisation/nameverifications][%d] createNameVerificationForbidden", 403)
}

func (o *CreateNameVerificationForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.APIError = new(models.APIError)

	// response payload

	if err := consumer.Consume(response.Body(), o.APIError); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateNameVerificationConflict creates a CreateNameVerificationConflict with default headers values
func NewCreateNameVerificationConflict() *CreateNameVerificationConflict {
	return &CreateNameVerificationConflict{}
}

/*
CreateNameVerificationConflict handles this case with default header values.

Conflict
*/
type CreateNameVerificationConflict struct {

	//Payload

	// isStream: false
	*models.APIError
}

// IsSuccess returns true when this create name verification conflict response has a 2xx status code
func (o *CreateNameVerificationConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create name verification conflict response has a 3xx status code
func (o *CreateNameVerificationConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create name verification conflict response has a 4xx status code
func (o *CreateNameVerificationConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this create name verification conflict response has a 5xx status code
func (o *CreateNameVerificationConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this create name verification conflict response a status code equal to that given
func (o *CreateNameVerificationConflict) IsCode(code int) bool {
	return code == 409
}

// Code gets the status code for the create name verification conflict response
func (o *CreateNameVerificationConflict) Code() int {
	return 409
}

func (o *CreateNameVerificationConflict) Error() string {
	return fmt.Sprintf("[POST /organisation/nameverifications][%d] createNameVerificationConflict", 409)
}

func (o *CreateNameVerificationConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.APIError = new(models.APIError)

	// response payload

	if err := consumer.Consume(response.Body(), o.APIError); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateNameVerificationInternalServerError creates a CreateNameVerificationInternalServerError with default headers values
func NewCreateNameVerificationInternalServerError() *CreateNameVerificationInternalServerError {
	return &CreateNameVerificationInternalServerError{}
}

/*
CreateNameVerificationInternalServerError handles this case with default header values.

Internal Server Error
*/
type CreateNameVerificationInternalServerError struct {

	//Payload

	// isStream: false
	*models.APIError
}

// IsSuccess returns true when this create name verification internal server error response has a 2xx status code
func (o *CreateNameVerificationInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create name verification internal server error response has a 3xx status code
func (o *CreateNameVerificationInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create name verification internal server error response has a 4xx status code
func (o *CreateNameVerificationInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this create name verification internal server error response has a 5xx status code
func (o *CreateNameVerificationInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this create name verification internal server error response a status code equal to that given
func (o *CreateNameVerificationInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the create name verification internal server error response
func (o *CreateNameVerificationInternalServerError) Code() int {
	return 500
}

func (o *CreateNameVerificationInternalServerError) Error() string {
	return fmt.Sprintf("[POST /organisation/nameverifications][%d] createNameVerificationInternalServerError", 500)
}

func (o *CreateNameVerificationInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.APIError = new(models.APIError)

	// response payload

	if err := consumer.Consume(response.Body(), o.APIError); err != nil && err != io.EOF {
		return err
	}

	return nil
}
