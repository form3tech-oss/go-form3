// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"log"

	"github.com/form3tech-oss/go-form3/v7/pkg/client"
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TransactionFileSubmissionConflictError transaction file submission conflict error
// swagger:model TransactionFileSubmissionConflictError
type TransactionFileSubmissionConflictError struct {

	// actual resource
	ActualResource *TransactionFileSubmission `json:"actual_resource,omitempty"`

	// error code
	// Format: uuid
	ErrorCode strfmt.UUID `json:"error_code,omitempty"`

	// error message
	ErrorMessage string `json:"error_message,omitempty"`
}

func TransactionFileSubmissionConflictErrorWithDefaults(defaults client.Defaults) *TransactionFileSubmissionConflictError {
	return &TransactionFileSubmissionConflictError{

		ActualResource: TransactionFileSubmissionWithDefaults(defaults),

		ErrorCode: defaults.GetStrfmtUUID("TransactionFileSubmissionConflictError", "error_code"),

		ErrorMessage: defaults.GetString("TransactionFileSubmissionConflictError", "error_message"),
	}
}

func (m *TransactionFileSubmissionConflictError) WithActualResource(actualResource TransactionFileSubmission) *TransactionFileSubmissionConflictError {

	m.ActualResource = &actualResource

	return m
}

func (m *TransactionFileSubmissionConflictError) WithoutActualResource() *TransactionFileSubmissionConflictError {
	m.ActualResource = nil
	return m
}

func (m *TransactionFileSubmissionConflictError) WithErrorCode(errorCode strfmt.UUID) *TransactionFileSubmissionConflictError {

	m.ErrorCode = errorCode

	return m
}

func (m *TransactionFileSubmissionConflictError) WithErrorMessage(errorMessage string) *TransactionFileSubmissionConflictError {

	m.ErrorMessage = errorMessage

	return m
}

// Validate validates this transaction file submission conflict error
func (m *TransactionFileSubmissionConflictError) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateActualResource(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateErrorCode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TransactionFileSubmissionConflictError) validateActualResource(formats strfmt.Registry) error {

	if swag.IsZero(m.ActualResource) { // not required
		return nil
	}

	if m.ActualResource != nil {
		if err := m.ActualResource.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("actual_resource")
			}
			return err
		}
	}

	return nil
}

func (m *TransactionFileSubmissionConflictError) validateErrorCode(formats strfmt.Registry) error {

	if swag.IsZero(m.ErrorCode) { // not required
		return nil
	}

	if err := validate.FormatOf("error_code", "body", "uuid", m.ErrorCode.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TransactionFileSubmissionConflictError) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TransactionFileSubmissionConflictError) UnmarshalBinary(b []byte) error {
	var res TransactionFileSubmissionConflictError
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
func (m *TransactionFileSubmissionConflictError) Json() string {
	json, err := json.MarshalIndent(m, "  ", "  ")
	if err != nil {
		log.Fatal(err)
	}
	return string(json)
}
