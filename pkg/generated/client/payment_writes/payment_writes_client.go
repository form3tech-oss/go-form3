// Code generated by go-swagger; DO NOT EDIT.

// :Form3: Testing!

package payment_writes

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/form3tech-oss/go-form3/v6/pkg/client"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new payment writes API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry, defaults client.Defaults) *Client {
	return &Client{transport: transport, formats: formats, Defaults: defaults}
}

/*
Client for payment writes API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
	Defaults  client.Defaults
}

// range of operations

/*
create payment API
*/
func (a *CreatePaymentRequest) Do() (*CreatePaymentCreated, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CreatePayment",
		Method:             "POST",
		PathPattern:        "/transaction/payments",
		ProducesMediaTypes: []string{"application/vnd.api+json", "application/json"},
		ConsumesMediaTypes: []string{"application/vnd.api+json", "application/json"},
		Schemes:            []string{"https"},
		Params:             a,
		Reader:             &CreatePaymentReader{formats: a.formats},
		//AuthInfo: authInfo,
		Context: a.Context,
		Client:  a.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreatePaymentCreated), nil

}

func (a *CreatePaymentRequest) MustDo() *CreatePaymentCreated {
	r0, err := a.Do()
	if err != nil {
		panic(err)
	}
	return r0
}

/*
create payment advice API
*/
func (a *CreatePaymentAdviceRequest) Do() (*CreatePaymentAdviceCreated, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CreatePaymentAdvice",
		Method:             "POST",
		PathPattern:        "/transaction/payments/{id}/advices",
		ProducesMediaTypes: []string{"application/vnd.api+json", "application/json"},
		ConsumesMediaTypes: []string{"application/vnd.api+json", "application/json"},
		Schemes:            []string{"https"},
		Params:             a,
		Reader:             &CreatePaymentAdviceReader{formats: a.formats},
		//AuthInfo: authInfo,
		Context: a.Context,
		Client:  a.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreatePaymentAdviceCreated), nil

}

func (a *CreatePaymentAdviceRequest) MustDo() *CreatePaymentAdviceCreated {
	r0, err := a.Do()
	if err != nil {
		panic(err)
	}
	return r0
}

/*
create payment advice submission API
*/
func (a *CreatePaymentAdviceSubmissionRequest) Do() (*CreatePaymentAdviceSubmissionCreated, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CreatePaymentAdviceSubmission",
		Method:             "POST",
		PathPattern:        "/transaction/payments/{id}/advices/{adviceId}/submissions",
		ProducesMediaTypes: []string{"application/vnd.api+json", "application/json"},
		ConsumesMediaTypes: []string{"application/vnd.api+json", "application/json"},
		Schemes:            []string{"https"},
		Params:             a,
		Reader:             &CreatePaymentAdviceSubmissionReader{formats: a.formats},
		//AuthInfo: authInfo,
		Context: a.Context,
		Client:  a.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreatePaymentAdviceSubmissionCreated), nil

}

func (a *CreatePaymentAdviceSubmissionRequest) MustDo() *CreatePaymentAdviceSubmissionCreated {
	r0, err := a.Do()
	if err != nil {
		panic(err)
	}
	return r0
}

/*
create payment recall API
*/
func (a *CreatePaymentRecallRequest) Do() (*CreatePaymentRecallCreated, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CreatePaymentRecall",
		Method:             "POST",
		PathPattern:        "/transaction/payments/{id}/recalls",
		ProducesMediaTypes: []string{"application/vnd.api+json", "application/json"},
		ConsumesMediaTypes: []string{"application/vnd.api+json", "application/json"},
		Schemes:            []string{"https"},
		Params:             a,
		Reader:             &CreatePaymentRecallReader{formats: a.formats},
		//AuthInfo: authInfo,
		Context: a.Context,
		Client:  a.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreatePaymentRecallCreated), nil

}

func (a *CreatePaymentRecallRequest) MustDo() *CreatePaymentRecallCreated {
	r0, err := a.Do()
	if err != nil {
		panic(err)
	}
	return r0
}

/*
create payment recall decision API
*/
func (a *CreatePaymentRecallDecisionRequest) Do() (*CreatePaymentRecallDecisionCreated, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CreatePaymentRecallDecision",
		Method:             "POST",
		PathPattern:        "/transaction/payments/{id}/recalls/{recallId}/decisions",
		ProducesMediaTypes: []string{"application/vnd.api+json", "application/json"},
		ConsumesMediaTypes: []string{"application/vnd.api+json", "application/json"},
		Schemes:            []string{"https"},
		Params:             a,
		Reader:             &CreatePaymentRecallDecisionReader{formats: a.formats},
		//AuthInfo: authInfo,
		Context: a.Context,
		Client:  a.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreatePaymentRecallDecisionCreated), nil

}

func (a *CreatePaymentRecallDecisionRequest) MustDo() *CreatePaymentRecallDecisionCreated {
	r0, err := a.Do()
	if err != nil {
		panic(err)
	}
	return r0
}

/*
create payment recall decision submission API
*/
func (a *CreatePaymentRecallDecisionSubmissionRequest) Do() (*CreatePaymentRecallDecisionSubmissionCreated, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CreatePaymentRecallDecisionSubmission",
		Method:             "POST",
		PathPattern:        "/transaction/payments/{id}/recalls/{recallId}/decisions/{decisionId}/submissions",
		ProducesMediaTypes: []string{"application/vnd.api+json", "application/json"},
		ConsumesMediaTypes: []string{"application/vnd.api+json", "application/json"},
		Schemes:            []string{"https"},
		Params:             a,
		Reader:             &CreatePaymentRecallDecisionSubmissionReader{formats: a.formats},
		//AuthInfo: authInfo,
		Context: a.Context,
		Client:  a.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreatePaymentRecallDecisionSubmissionCreated), nil

}

func (a *CreatePaymentRecallDecisionSubmissionRequest) MustDo() *CreatePaymentRecallDecisionSubmissionCreated {
	r0, err := a.Do()
	if err != nil {
		panic(err)
	}
	return r0
}

/*
create payment recall submission API
*/
func (a *CreatePaymentRecallSubmissionRequest) Do() (*CreatePaymentRecallSubmissionCreated, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CreatePaymentRecallSubmission",
		Method:             "POST",
		PathPattern:        "/transaction/payments/{id}/recalls/{recallId}/submissions",
		ProducesMediaTypes: []string{"application/vnd.api+json", "application/json"},
		ConsumesMediaTypes: []string{"application/vnd.api+json", "application/json"},
		Schemes:            []string{"https"},
		Params:             a,
		Reader:             &CreatePaymentRecallSubmissionReader{formats: a.formats},
		//AuthInfo: authInfo,
		Context: a.Context,
		Client:  a.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreatePaymentRecallSubmissionCreated), nil

}

func (a *CreatePaymentRecallSubmissionRequest) MustDo() *CreatePaymentRecallSubmissionCreated {
	r0, err := a.Do()
	if err != nil {
		panic(err)
	}
	return r0
}

/*
create payment return API
*/
func (a *CreatePaymentReturnRequest) Do() (*CreatePaymentReturnCreated, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CreatePaymentReturn",
		Method:             "POST",
		PathPattern:        "/transaction/payments/{id}/returns",
		ProducesMediaTypes: []string{"application/vnd.api+json", "application/json"},
		ConsumesMediaTypes: []string{"application/vnd.api+json", "application/json"},
		Schemes:            []string{"https"},
		Params:             a,
		Reader:             &CreatePaymentReturnReader{formats: a.formats},
		//AuthInfo: authInfo,
		Context: a.Context,
		Client:  a.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreatePaymentReturnCreated), nil

}

func (a *CreatePaymentReturnRequest) MustDo() *CreatePaymentReturnCreated {
	r0, err := a.Do()
	if err != nil {
		panic(err)
	}
	return r0
}

/*
create payment return reversal API
*/
func (a *CreatePaymentReturnReversalRequest) Do() (*CreatePaymentReturnReversalCreated, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CreatePaymentReturnReversal",
		Method:             "POST",
		PathPattern:        "/transaction/payments/{id}/returns/{returnId}/reversals",
		ProducesMediaTypes: []string{"application/vnd.api+json", "application/json"},
		ConsumesMediaTypes: []string{"application/vnd.api+json", "application/json"},
		Schemes:            []string{"https"},
		Params:             a,
		Reader:             &CreatePaymentReturnReversalReader{formats: a.formats},
		//AuthInfo: authInfo,
		Context: a.Context,
		Client:  a.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreatePaymentReturnReversalCreated), nil

}

func (a *CreatePaymentReturnReversalRequest) MustDo() *CreatePaymentReturnReversalCreated {
	r0, err := a.Do()
	if err != nil {
		panic(err)
	}
	return r0
}

/*
create payment return submission API
*/
func (a *CreatePaymentReturnSubmissionRequest) Do() (*CreatePaymentReturnSubmissionCreated, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CreatePaymentReturnSubmission",
		Method:             "POST",
		PathPattern:        "/transaction/payments/{id}/returns/{returnId}/submissions",
		ProducesMediaTypes: []string{"application/vnd.api+json", "application/json"},
		ConsumesMediaTypes: []string{"application/vnd.api+json", "application/json"},
		Schemes:            []string{"https"},
		Params:             a,
		Reader:             &CreatePaymentReturnSubmissionReader{formats: a.formats},
		//AuthInfo: authInfo,
		Context: a.Context,
		Client:  a.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreatePaymentReturnSubmissionCreated), nil

}

func (a *CreatePaymentReturnSubmissionRequest) MustDo() *CreatePaymentReturnSubmissionCreated {
	r0, err := a.Do()
	if err != nil {
		panic(err)
	}
	return r0
}

/*
create payment reversal API
*/
func (a *CreatePaymentReversalRequest) Do() (*CreatePaymentReversalCreated, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CreatePaymentReversal",
		Method:             "POST",
		PathPattern:        "/transaction/payments/{id}/reversals",
		ProducesMediaTypes: []string{"application/vnd.api+json", "application/json"},
		ConsumesMediaTypes: []string{"application/vnd.api+json", "application/json"},
		Schemes:            []string{"https"},
		Params:             a,
		Reader:             &CreatePaymentReversalReader{formats: a.formats},
		//AuthInfo: authInfo,
		Context: a.Context,
		Client:  a.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreatePaymentReversalCreated), nil

}

func (a *CreatePaymentReversalRequest) MustDo() *CreatePaymentReversalCreated {
	r0, err := a.Do()
	if err != nil {
		panic(err)
	}
	return r0
}

/*
create payment reversal submission API
*/
func (a *CreatePaymentReversalSubmissionRequest) Do() (*CreatePaymentReversalSubmissionCreated, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CreatePaymentReversalSubmission",
		Method:             "POST",
		PathPattern:        "/transaction/payments/{id}/reversals/{reversalId}/submissions",
		ProducesMediaTypes: []string{"application/vnd.api+json", "application/json"},
		ConsumesMediaTypes: []string{"application/vnc.api+json", "application/json"},
		Schemes:            []string{"https"},
		Params:             a,
		Reader:             &CreatePaymentReversalSubmissionReader{formats: a.formats},
		//AuthInfo: authInfo,
		Context: a.Context,
		Client:  a.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreatePaymentReversalSubmissionCreated), nil

}

func (a *CreatePaymentReversalSubmissionRequest) MustDo() *CreatePaymentReversalSubmissionCreated {
	r0, err := a.Do()
	if err != nil {
		panic(err)
	}
	return r0
}

/*
create payment submission API
*/
func (a *CreatePaymentSubmissionRequest) Do() (*CreatePaymentSubmissionCreated, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CreatePaymentSubmission",
		Method:             "POST",
		PathPattern:        "/transaction/payments/{id}/submissions",
		ProducesMediaTypes: []string{"application/vnd.api+json", "application/json"},
		ConsumesMediaTypes: []string{"application/vnd.api+json", "application/json"},
		Schemes:            []string{"https"},
		Params:             a,
		Reader:             &CreatePaymentSubmissionReader{formats: a.formats},
		//AuthInfo: authInfo,
		Context: a.Context,
		Client:  a.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreatePaymentSubmissionCreated), nil

}

func (a *CreatePaymentSubmissionRequest) MustDo() *CreatePaymentSubmissionCreated {
	r0, err := a.Do()
	if err != nil {
		panic(err)
	}
	return r0
}

/*
patch payment admission task API
*/
func (a *PatchPaymentAdmissionTaskRequest) Do() (*PatchPaymentAdmissionTaskOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PatchPaymentAdmissionTask",
		Method:             "PATCH",
		PathPattern:        "/transaction/payments/{id}/admissions/{admissionId}/tasks/{taskId}",
		ProducesMediaTypes: []string{"application/vnd.api+json", "application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             a,
		Reader:             &PatchPaymentAdmissionTaskReader{formats: a.formats},
		//AuthInfo: authInfo,
		Context: a.Context,
		Client:  a.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PatchPaymentAdmissionTaskOK), nil

}

func (a *PatchPaymentAdmissionTaskRequest) MustDo() *PatchPaymentAdmissionTaskOK {
	r0, err := a.Do()
	if err != nil {
		panic(err)
	}
	return r0
}

/*
patch reversal admission task API
*/
func (a *PatchReversalAdmissionTaskRequest) Do() (*PatchReversalAdmissionTaskOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PatchReversalAdmissionTask",
		Method:             "PATCH",
		PathPattern:        "/transaction/payments/{id}/reversals/{reversalId}/admissions/{admissionId}/tasks/{taskId}",
		ProducesMediaTypes: []string{"application/vnd.api+json", "application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             a,
		Reader:             &PatchReversalAdmissionTaskReader{formats: a.formats},
		//AuthInfo: authInfo,
		Context: a.Context,
		Client:  a.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PatchReversalAdmissionTaskOK), nil

}

func (a *PatchReversalAdmissionTaskRequest) MustDo() *PatchReversalAdmissionTaskOK {
	r0, err := a.Do()
	if err != nil {
		panic(err)
	}
	return r0
}

/////////

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
