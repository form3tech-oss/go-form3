// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"log"
	"strconv"

	"github.com/form3tech-oss/go-form3/v6/pkg/client"
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// NameVerificationAdmissionRelationships name verification admission relationships
// swagger:model NameVerificationAdmissionRelationships
type NameVerificationAdmissionRelationships struct {

	// name verification
	NameVerification *NameVerificationAdmissionRelationshipsNameVerification `json:"name_verification,omitempty"`
}

func NameVerificationAdmissionRelationshipsWithDefaults(defaults client.Defaults) *NameVerificationAdmissionRelationships {
	return &NameVerificationAdmissionRelationships{

		NameVerification: NameVerificationAdmissionRelationshipsNameVerificationWithDefaults(defaults),
	}
}

func (m *NameVerificationAdmissionRelationships) WithNameVerification(nameVerification NameVerificationAdmissionRelationshipsNameVerification) *NameVerificationAdmissionRelationships {

	m.NameVerification = &nameVerification

	return m
}

func (m *NameVerificationAdmissionRelationships) WithoutNameVerification() *NameVerificationAdmissionRelationships {
	m.NameVerification = nil
	return m
}

// Validate validates this name verification admission relationships
func (m *NameVerificationAdmissionRelationships) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateNameVerification(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NameVerificationAdmissionRelationships) validateNameVerification(formats strfmt.Registry) error {

	if swag.IsZero(m.NameVerification) { // not required
		return nil
	}

	if m.NameVerification != nil {
		if err := m.NameVerification.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("name_verification")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *NameVerificationAdmissionRelationships) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NameVerificationAdmissionRelationships) UnmarshalBinary(b []byte) error {
	var res NameVerificationAdmissionRelationships
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
func (m *NameVerificationAdmissionRelationships) Json() string {
	json, err := json.MarshalIndent(m, "  ", "  ")
	if err != nil {
		log.Fatal(err)
	}
	return string(json)
}

// NameVerificationAdmissionRelationshipsNameVerification name verification admission relationships name verification
// swagger:model NameVerificationAdmissionRelationshipsNameVerification
type NameVerificationAdmissionRelationshipsNameVerification struct {

	// data
	Data []*NameVerification `json:"data"`
}

func NameVerificationAdmissionRelationshipsNameVerificationWithDefaults(defaults client.Defaults) *NameVerificationAdmissionRelationshipsNameVerification {
	return &NameVerificationAdmissionRelationshipsNameVerification{

		Data: make([]*NameVerification, 0),
	}
}

func (m *NameVerificationAdmissionRelationshipsNameVerification) WithData(data []*NameVerification) *NameVerificationAdmissionRelationshipsNameVerification {

	m.Data = data

	return m
}

// Validate validates this name verification admission relationships name verification
func (m *NameVerificationAdmissionRelationshipsNameVerification) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NameVerificationAdmissionRelationshipsNameVerification) validateData(formats strfmt.Registry) error {

	if swag.IsZero(m.Data) { // not required
		return nil
	}

	for i := 0; i < len(m.Data); i++ {
		if swag.IsZero(m.Data[i]) { // not required
			continue
		}

		if m.Data[i] != nil {
			if err := m.Data[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("name_verification" + "." + "data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *NameVerificationAdmissionRelationshipsNameVerification) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NameVerificationAdmissionRelationshipsNameVerification) UnmarshalBinary(b []byte) error {
	var res NameVerificationAdmissionRelationshipsNameVerification
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
func (m *NameVerificationAdmissionRelationshipsNameVerification) Json() string {
	json, err := json.MarshalIndent(m, "  ", "  ")
	if err != nil {
		log.Fatal(err)
	}
	return string(json)
}
