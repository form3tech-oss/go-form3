// Code generated by go-swagger; DO NOT EDIT.

package query_api

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/form3tech-oss/go-form3/v7/pkg/generated/models"
)

// GetQueryReader is a Reader for the GetQuery structure.
type GetQueryReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetQueryReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetQueryOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewGetQueryBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewGetQueryForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetQueryOK creates a GetQueryOK with default headers values
func NewGetQueryOK() *GetQueryOK {
	return &GetQueryOK{}
}

/*
GetQueryOK handles this case with default header values.

query response
*/
type GetQueryOK struct {

	//Payload

	// isStream: false
	*models.QueryFetchResponse
}

// IsSuccess returns true when this get query o k response has a 2xx status code
func (o *GetQueryOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get query o k response has a 3xx status code
func (o *GetQueryOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get query o k response has a 4xx status code
func (o *GetQueryOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get query o k response has a 5xx status code
func (o *GetQueryOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get query o k response a status code equal to that given
func (o *GetQueryOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get query o k response
func (o *GetQueryOK) Code() int {
	return 200
}

func (o *GetQueryOK) Error() string {
	return fmt.Sprintf("[GET /transaction/queries/{query_id}][%d] getQueryOK", 200)
}

func (o *GetQueryOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.QueryFetchResponse = new(models.QueryFetchResponse)

	// response payload

	if err := consumer.Consume(response.Body(), o.QueryFetchResponse); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetQueryBadRequest creates a GetQueryBadRequest with default headers values
func NewGetQueryBadRequest() *GetQueryBadRequest {
	return &GetQueryBadRequest{}
}

/*
GetQueryBadRequest handles this case with default header values.

bad request
*/
type GetQueryBadRequest struct {

	//Payload

	// isStream: false
	*models.APIError
}

// IsSuccess returns true when this get query bad request response has a 2xx status code
func (o *GetQueryBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get query bad request response has a 3xx status code
func (o *GetQueryBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get query bad request response has a 4xx status code
func (o *GetQueryBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get query bad request response has a 5xx status code
func (o *GetQueryBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get query bad request response a status code equal to that given
func (o *GetQueryBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get query bad request response
func (o *GetQueryBadRequest) Code() int {
	return 400
}

func (o *GetQueryBadRequest) Error() string {
	return fmt.Sprintf("[GET /transaction/queries/{query_id}][%d] getQueryBadRequest", 400)
}

func (o *GetQueryBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.APIError = new(models.APIError)

	// response payload

	if err := consumer.Consume(response.Body(), o.APIError); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetQueryForbidden creates a GetQueryForbidden with default headers values
func NewGetQueryForbidden() *GetQueryForbidden {
	return &GetQueryForbidden{}
}

/*
GetQueryForbidden handles this case with default header values.

forbidden
*/
type GetQueryForbidden struct {

	//Payload

	// isStream: false
	*models.APIError
}

// IsSuccess returns true when this get query forbidden response has a 2xx status code
func (o *GetQueryForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get query forbidden response has a 3xx status code
func (o *GetQueryForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get query forbidden response has a 4xx status code
func (o *GetQueryForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get query forbidden response has a 5xx status code
func (o *GetQueryForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get query forbidden response a status code equal to that given
func (o *GetQueryForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get query forbidden response
func (o *GetQueryForbidden) Code() int {
	return 403
}

func (o *GetQueryForbidden) Error() string {
	return fmt.Sprintf("[GET /transaction/queries/{query_id}][%d] getQueryForbidden", 403)
}

func (o *GetQueryForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.APIError = new(models.APIError)

	// response payload

	if err := consumer.Consume(response.Body(), o.APIError); err != nil && err != io.EOF {
		return err
	}

	return nil
}
