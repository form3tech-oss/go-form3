// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"log"

	"github.com/form3tech-oss/go-form3/v4/pkg/client"
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ReportAttributes report attributes
// swagger:model ReportAttributes
type ReportAttributes struct {

	// formats
	// Read Only: true
	Formats []string `json:"formats"`

	// generation time
	// Format: date-time
	GenerationTime strfmt.DateTime `json:"generation_time,omitempty"`

	// processing date
	// Format: date
	ProcessingDate *strfmt.Date `json:"processing_date,omitempty"`

	// report source
	ReportSource string `json:"report_source,omitempty"`

	// Type of report.
	ReportType string `json:"report_type,omitempty"`

	// report type description
	ReportTypeDescription string `json:"report_type_description,omitempty"`
}

func ReportAttributesWithDefaults(defaults client.Defaults) *ReportAttributes {
	return &ReportAttributes{

		Formats: make([]string, 0),

		GenerationTime: defaults.GetStrfmtDateTime("ReportAttributes", "generation_time"),

		ProcessingDate: defaults.GetStrfmtDatePtr("ReportAttributes", "processing_date"),

		ReportSource: defaults.GetString("ReportAttributes", "report_source"),

		ReportType: defaults.GetString("ReportAttributes", "report_type"),

		ReportTypeDescription: defaults.GetString("ReportAttributes", "report_type_description"),
	}
}

func (m *ReportAttributes) WithFormats(formats []string) *ReportAttributes {

	m.Formats = formats

	return m
}

func (m *ReportAttributes) WithGenerationTime(generationTime strfmt.DateTime) *ReportAttributes {

	m.GenerationTime = generationTime

	return m
}

func (m *ReportAttributes) WithProcessingDate(processingDate strfmt.Date) *ReportAttributes {

	m.ProcessingDate = &processingDate

	return m
}

func (m *ReportAttributes) WithoutProcessingDate() *ReportAttributes {
	m.ProcessingDate = nil
	return m
}

func (m *ReportAttributes) WithReportSource(reportSource string) *ReportAttributes {

	m.ReportSource = reportSource

	return m
}

func (m *ReportAttributes) WithReportType(reportType string) *ReportAttributes {

	m.ReportType = reportType

	return m
}

func (m *ReportAttributes) WithReportTypeDescription(reportTypeDescription string) *ReportAttributes {

	m.ReportTypeDescription = reportTypeDescription

	return m
}

// Validate validates this report attributes
func (m *ReportAttributes) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateGenerationTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProcessingDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ReportAttributes) validateGenerationTime(formats strfmt.Registry) error {

	if swag.IsZero(m.GenerationTime) { // not required
		return nil
	}

	if err := validate.FormatOf("generation_time", "body", "date-time", m.GenerationTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ReportAttributes) validateProcessingDate(formats strfmt.Registry) error {

	if swag.IsZero(m.ProcessingDate) { // not required
		return nil
	}

	if err := validate.FormatOf("processing_date", "body", "date", m.ProcessingDate.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ReportAttributes) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ReportAttributes) UnmarshalBinary(b []byte) error {
	var res ReportAttributes
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
func (m *ReportAttributes) Json() string {
	json, err := json.MarshalIndent(m, "  ", "  ")
	if err != nil {
		log.Fatal(err)
	}
	return string(json)
}
