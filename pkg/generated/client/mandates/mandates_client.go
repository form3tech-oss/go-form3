// Code generated by go-swagger; DO NOT EDIT.

// :Form3: Testing!

package mandates

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/form3tech-oss/go-form3/v2/pkg/client"
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new mandates API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry, defaults client.Defaults) *Client {
	return &Client{transport: transport, formats: formats, Defaults: defaults}
}

/*
Client for mandates API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
	Defaults  client.Defaults
}

// range of operations

/*
create mandate API
*/
func (a *CreateMandateRequest) Do() (*CreateMandateCreated, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CreateMandate",
		Method:             "POST",
		PathPattern:        "/transaction/mandates",
		ProducesMediaTypes: []string{"application/json", "application/vnd.api+json"},
		ConsumesMediaTypes: []string{"application/json", "application/vnd.api+json"},
		Schemes:            []string{"https"},
		Params:             a,
		Reader:             &CreateMandateReader{formats: a.formats},
		//AuthInfo: authInfo,
		Context: a.Context,
		Client:  a.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateMandateCreated), nil

}

func (a *CreateMandateRequest) MustDo() *CreateMandateCreated {
	r0, err := a.Do()
	if err != nil {
		panic(err)
	}
	return r0
}

/*
create mandate return API
*/
func (a *CreateMandateReturnRequest) Do() (*CreateMandateReturnCreated, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CreateMandateReturn",
		Method:             "POST",
		PathPattern:        "/transaction/mandates/{id}/returns",
		ProducesMediaTypes: []string{"application/json", "application/vnd.api+json"},
		ConsumesMediaTypes: []string{"application/json", "application/vnd.api+json"},
		Schemes:            []string{"https"},
		Params:             a,
		Reader:             &CreateMandateReturnReader{formats: a.formats},
		//AuthInfo: authInfo,
		Context: a.Context,
		Client:  a.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateMandateReturnCreated), nil

}

func (a *CreateMandateReturnRequest) MustDo() *CreateMandateReturnCreated {
	r0, err := a.Do()
	if err != nil {
		panic(err)
	}
	return r0
}

/*
create mandate return submission API
*/
func (a *CreateMandateReturnSubmissionRequest) Do() (*CreateMandateReturnSubmissionCreated, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CreateMandateReturnSubmission",
		Method:             "POST",
		PathPattern:        "/transaction/mandates/{id}/returns/{returnId}/submissions",
		ProducesMediaTypes: []string{"application/json", "application/vnd.api+json"},
		ConsumesMediaTypes: []string{"application/json", "application/vnd.api+json"},
		Schemes:            []string{"https"},
		Params:             a,
		Reader:             &CreateMandateReturnSubmissionReader{formats: a.formats},
		//AuthInfo: authInfo,
		Context: a.Context,
		Client:  a.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateMandateReturnSubmissionCreated), nil

}

func (a *CreateMandateReturnSubmissionRequest) MustDo() *CreateMandateReturnSubmissionCreated {
	r0, err := a.Do()
	if err != nil {
		panic(err)
	}
	return r0
}

/*
create mandate submission API
*/
func (a *CreateMandateSubmissionRequest) Do() (*CreateMandateSubmissionCreated, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CreateMandateSubmission",
		Method:             "POST",
		PathPattern:        "/transaction/mandates/{id}/submissions",
		ProducesMediaTypes: []string{"application/json", "application/vnd.api+json"},
		ConsumesMediaTypes: []string{"application/json", "application/vnd.api+json"},
		Schemes:            []string{"https"},
		Params:             a,
		Reader:             &CreateMandateSubmissionReader{formats: a.formats},
		//AuthInfo: authInfo,
		Context: a.Context,
		Client:  a.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateMandateSubmissionCreated), nil

}

func (a *CreateMandateSubmissionRequest) MustDo() *CreateMandateSubmissionCreated {
	r0, err := a.Do()
	if err != nil {
		panic(err)
	}
	return r0
}

/*
get mandate API
*/
func (a *GetMandateRequest) Do() (*GetMandateOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetMandate",
		Method:             "GET",
		PathPattern:        "/transaction/mandates/{id}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.api+json"},
		ConsumesMediaTypes: []string{"application/json", "application/vnd.api+json"},
		Schemes:            []string{"https"},
		Params:             a,
		Reader:             &GetMandateReader{formats: a.formats},
		//AuthInfo: authInfo,
		Context: a.Context,
		Client:  a.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMandateOK), nil

}

func (a *GetMandateRequest) MustDo() *GetMandateOK {
	r0, err := a.Do()
	if err != nil {
		panic(err)
	}
	return r0
}

/*
get mandate admission API
*/
func (a *GetMandateAdmissionRequest) Do() (*GetMandateAdmissionOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetMandateAdmission",
		Method:             "GET",
		PathPattern:        "/transaction/mandates/{id}/admissions/{admissionId}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.api+json"},
		ConsumesMediaTypes: []string{"application/json", "application/vnd.api+json"},
		Schemes:            []string{"https"},
		Params:             a,
		Reader:             &GetMandateAdmissionReader{formats: a.formats},
		//AuthInfo: authInfo,
		Context: a.Context,
		Client:  a.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMandateAdmissionOK), nil

}

func (a *GetMandateAdmissionRequest) MustDo() *GetMandateAdmissionOK {
	r0, err := a.Do()
	if err != nil {
		panic(err)
	}
	return r0
}

/*
get mandate return API
*/
func (a *GetMandateReturnRequest) Do() (*GetMandateReturnOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetMandateReturn",
		Method:             "GET",
		PathPattern:        "/transaction/mandates/{id}/returns/{returnId}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.api+json"},
		ConsumesMediaTypes: []string{"application/json", "application/vnd.api+json"},
		Schemes:            []string{"https"},
		Params:             a,
		Reader:             &GetMandateReturnReader{formats: a.formats},
		//AuthInfo: authInfo,
		Context: a.Context,
		Client:  a.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMandateReturnOK), nil

}

func (a *GetMandateReturnRequest) MustDo() *GetMandateReturnOK {
	r0, err := a.Do()
	if err != nil {
		panic(err)
	}
	return r0
}

/*
get mandate return submission API
*/
func (a *GetMandateReturnSubmissionRequest) Do() (*GetMandateReturnSubmissionOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetMandateReturnSubmission",
		Method:             "GET",
		PathPattern:        "/transaction/mandates/{id}/returns/{returnId}/submissions/{submissionId}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.api+json"},
		ConsumesMediaTypes: []string{"application/json", "application/vnd.api+json"},
		Schemes:            []string{"https"},
		Params:             a,
		Reader:             &GetMandateReturnSubmissionReader{formats: a.formats},
		//AuthInfo: authInfo,
		Context: a.Context,
		Client:  a.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMandateReturnSubmissionOK), nil

}

func (a *GetMandateReturnSubmissionRequest) MustDo() *GetMandateReturnSubmissionOK {
	r0, err := a.Do()
	if err != nil {
		panic(err)
	}
	return r0
}

/*
get mandate submission API
*/
func (a *GetMandateSubmissionRequest) Do() (*GetMandateSubmissionOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetMandateSubmission",
		Method:             "GET",
		PathPattern:        "/transaction/mandates/{id}/submissions/{submissionId}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.api+json"},
		ConsumesMediaTypes: []string{"application/json", "application/vnd.api+json"},
		Schemes:            []string{"https"},
		Params:             a,
		Reader:             &GetMandateSubmissionReader{formats: a.formats},
		//AuthInfo: authInfo,
		Context: a.Context,
		Client:  a.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMandateSubmissionOK), nil

}

func (a *GetMandateSubmissionRequest) MustDo() *GetMandateSubmissionOK {
	r0, err := a.Do()
	if err != nil {
		panic(err)
	}
	return r0
}

/*
list mandates API
*/
func (a *ListMandatesRequest) Do() (*ListMandatesOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ListMandates",
		Method:             "GET",
		PathPattern:        "/transaction/mandates",
		ProducesMediaTypes: []string{"application/json", "application/vnd.api+json"},
		ConsumesMediaTypes: []string{"application/json", "application/vnd.api+json"},
		Schemes:            []string{"https"},
		Params:             a,
		Reader:             &ListMandatesReader{formats: a.formats},
		//AuthInfo: authInfo,
		Context: a.Context,
		Client:  a.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListMandatesOK), nil

}

func (a *ListMandatesRequest) MustDo() *ListMandatesOK {
	r0, err := a.Do()
	if err != nil {
		panic(err)
	}
	return r0
}

/*
modify mandate API
*/
func (a *ModifyMandateRequest) Do() (*ModifyMandateOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ModifyMandate",
		Method:             "PATCH",
		PathPattern:        "/transaction/mandates/{id}",
		ProducesMediaTypes: []string{"application/json", "application/vnd.api+json"},
		ConsumesMediaTypes: []string{"application/json", "application/vnd.api+json"},
		Schemes:            []string{"https"},
		Params:             a,
		Reader:             &ModifyMandateReader{formats: a.formats},
		//AuthInfo: authInfo,
		Context: a.Context,
		Client:  a.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ModifyMandateOK), nil

}

func (a *ModifyMandateRequest) MustDo() *ModifyMandateOK {
	r0, err := a.Do()
	if err != nil {
		panic(err)
	}
	return r0
}

/////////

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
