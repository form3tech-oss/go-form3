// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"log"
	"strconv"

	"github.com/form3tech-oss/go-form3/v6/pkg/client"
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// RecallDecisionAttributes recall decision attributes
// swagger:model RecallDecisionAttributes
type RecallDecisionAttributes struct {

	// Block to represent a Financial Institution/agent in the payment chain
	Agents []*Agent `json:"agents,omitempty"`

	// answer
	Answer RecallDecisionAnswer `json:"answer,omitempty"`

	// charges amount
	ChargesAmount *CurrencyAndAmount `json:"charges_amount,omitempty"`

	// Optional free text reason in addition to `reason_code`
	Reason string `json:"reason,omitempty"`

	// Reason for a rejected decision. Required when answer is rejected, ignored otherwise. Has to be a valid [rejected recall decision reason code](http://api-docs.form3.tech/api.html#enumerations-rejected-recall-decision-reason-codes)
	ReasonCode string `json:"reason_code,omitempty"`

	// recall amount
	RecallAmount *CurrencyAndAmount `json:"recall_amount,omitempty"`

	// Block to represent a list of references
	References []*Reference `json:"references,omitempty"`

	// resolution related information
	ResolutionRelatedInformation *ResolutionRelatedInformation `json:"resolution_related_information,omitempty"`

	// Unique identification, as assigned by the first instructing agent, to unambiguously identify the transaction that is passed on, unchanged, throughout the entire interbank chain.
	SchemeTransactionID string `json:"scheme_transaction_id,omitempty"`

	// Scheme-specific unique ID
	UniqueSchemeID string `json:"unique_scheme_id,omitempty"`
}

func RecallDecisionAttributesWithDefaults(defaults client.Defaults) *RecallDecisionAttributes {
	return &RecallDecisionAttributes{

		Agents: make([]*Agent, 0),

		// TODO Answer: RecallDecisionAnswer,

		ChargesAmount: CurrencyAndAmountWithDefaults(defaults),

		Reason: defaults.GetString("RecallDecisionAttributes", "reason"),

		ReasonCode: defaults.GetString("RecallDecisionAttributes", "reason_code"),

		RecallAmount: CurrencyAndAmountWithDefaults(defaults),

		References: make([]*Reference, 0),

		ResolutionRelatedInformation: ResolutionRelatedInformationWithDefaults(defaults),

		SchemeTransactionID: defaults.GetString("RecallDecisionAttributes", "scheme_transaction_id"),

		UniqueSchemeID: defaults.GetString("RecallDecisionAttributes", "unique_scheme_id"),
	}
}

func (m *RecallDecisionAttributes) WithAgents(agents []*Agent) *RecallDecisionAttributes {

	m.Agents = agents

	return m
}

func (m *RecallDecisionAttributes) WithAnswer(answer RecallDecisionAnswer) *RecallDecisionAttributes {

	m.Answer = answer

	return m
}

func (m *RecallDecisionAttributes) WithChargesAmount(chargesAmount CurrencyAndAmount) *RecallDecisionAttributes {

	m.ChargesAmount = &chargesAmount

	return m
}

func (m *RecallDecisionAttributes) WithoutChargesAmount() *RecallDecisionAttributes {
	m.ChargesAmount = nil
	return m
}

func (m *RecallDecisionAttributes) WithReason(reason string) *RecallDecisionAttributes {

	m.Reason = reason

	return m
}

func (m *RecallDecisionAttributes) WithReasonCode(reasonCode string) *RecallDecisionAttributes {

	m.ReasonCode = reasonCode

	return m
}

func (m *RecallDecisionAttributes) WithRecallAmount(recallAmount CurrencyAndAmount) *RecallDecisionAttributes {

	m.RecallAmount = &recallAmount

	return m
}

func (m *RecallDecisionAttributes) WithoutRecallAmount() *RecallDecisionAttributes {
	m.RecallAmount = nil
	return m
}

func (m *RecallDecisionAttributes) WithReferences(references []*Reference) *RecallDecisionAttributes {

	m.References = references

	return m
}

func (m *RecallDecisionAttributes) WithResolutionRelatedInformation(resolutionRelatedInformation ResolutionRelatedInformation) *RecallDecisionAttributes {

	m.ResolutionRelatedInformation = &resolutionRelatedInformation

	return m
}

func (m *RecallDecisionAttributes) WithoutResolutionRelatedInformation() *RecallDecisionAttributes {
	m.ResolutionRelatedInformation = nil
	return m
}

func (m *RecallDecisionAttributes) WithSchemeTransactionID(schemeTransactionID string) *RecallDecisionAttributes {

	m.SchemeTransactionID = schemeTransactionID

	return m
}

func (m *RecallDecisionAttributes) WithUniqueSchemeID(uniqueSchemeID string) *RecallDecisionAttributes {

	m.UniqueSchemeID = uniqueSchemeID

	return m
}

// Validate validates this recall decision attributes
func (m *RecallDecisionAttributes) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAgents(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAnswer(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateChargesAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRecallAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReferences(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResolutionRelatedInformation(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RecallDecisionAttributes) validateAgents(formats strfmt.Registry) error {

	if swag.IsZero(m.Agents) { // not required
		return nil
	}

	for i := 0; i < len(m.Agents); i++ {
		if swag.IsZero(m.Agents[i]) { // not required
			continue
		}

		if m.Agents[i] != nil {
			if err := m.Agents[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("agents" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RecallDecisionAttributes) validateAnswer(formats strfmt.Registry) error {

	if swag.IsZero(m.Answer) { // not required
		return nil
	}

	if err := m.Answer.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("answer")
		}
		return err
	}

	return nil
}

func (m *RecallDecisionAttributes) validateChargesAmount(formats strfmt.Registry) error {

	if swag.IsZero(m.ChargesAmount) { // not required
		return nil
	}

	if m.ChargesAmount != nil {
		if err := m.ChargesAmount.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("charges_amount")
			}
			return err
		}
	}

	return nil
}

func (m *RecallDecisionAttributes) validateRecallAmount(formats strfmt.Registry) error {

	if swag.IsZero(m.RecallAmount) { // not required
		return nil
	}

	if m.RecallAmount != nil {
		if err := m.RecallAmount.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("recall_amount")
			}
			return err
		}
	}

	return nil
}

func (m *RecallDecisionAttributes) validateReferences(formats strfmt.Registry) error {

	if swag.IsZero(m.References) { // not required
		return nil
	}

	for i := 0; i < len(m.References); i++ {
		if swag.IsZero(m.References[i]) { // not required
			continue
		}

		if m.References[i] != nil {
			if err := m.References[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("references" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RecallDecisionAttributes) validateResolutionRelatedInformation(formats strfmt.Registry) error {

	if swag.IsZero(m.ResolutionRelatedInformation) { // not required
		return nil
	}

	if m.ResolutionRelatedInformation != nil {
		if err := m.ResolutionRelatedInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("resolution_related_information")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RecallDecisionAttributes) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RecallDecisionAttributes) UnmarshalBinary(b []byte) error {
	var res RecallDecisionAttributes
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
func (m *RecallDecisionAttributes) Json() string {
	json, err := json.MarshalIndent(m, "  ", "  ")
	if err != nil {
		log.Fatal(err)
	}
	return string(json)
}
