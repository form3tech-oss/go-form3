// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"log"

	"github.com/form3tech-oss/go-form3/pkg/client"
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NewFXDealAttributes new f x deal attributes
// swagger:model NewFXDealAttributes
type NewFXDealAttributes struct {

	// processing date
	// Format: date
	ProcessingDate FXProcessingDate `json:"processing_date,omitempty"`

	// source
	// Required: true
	Source *FXSource `json:"source"`

	// target
	// Required: true
	Target *FXTarget `json:"target"`

	// type
	// Required: true
	Type FXType `json:"type"`
}

func NewFXDealAttributesWithDefaults(defaults client.Defaults) *NewFXDealAttributes {
	return &NewFXDealAttributes{

		// TODO ProcessingDate: FXProcessingDate,

		Source: FXSourceWithDefaults(defaults),

		Target: FXTargetWithDefaults(defaults),

		// TODO Type: FXType,

	}
}

func (m *NewFXDealAttributes) WithProcessingDate(processingDate FXProcessingDate) *NewFXDealAttributes {

	m.ProcessingDate = processingDate

	return m
}

func (m *NewFXDealAttributes) WithSource(source FXSource) *NewFXDealAttributes {

	m.Source = &source

	return m
}

func (m *NewFXDealAttributes) WithoutSource() *NewFXDealAttributes {
	m.Source = nil
	return m
}

func (m *NewFXDealAttributes) WithTarget(target FXTarget) *NewFXDealAttributes {

	m.Target = &target

	return m
}

func (m *NewFXDealAttributes) WithoutTarget() *NewFXDealAttributes {
	m.Target = nil
	return m
}

func (m *NewFXDealAttributes) WithType(typeVar FXType) *NewFXDealAttributes {

	m.Type = typeVar

	return m
}

// Validate validates this new f x deal attributes
func (m *NewFXDealAttributes) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProcessingDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSource(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTarget(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NewFXDealAttributes) validateProcessingDate(formats strfmt.Registry) error {

	if swag.IsZero(m.ProcessingDate) { // not required
		return nil
	}

	if err := m.ProcessingDate.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("processing_date")
		}
		return err
	}

	return nil
}

func (m *NewFXDealAttributes) validateSource(formats strfmt.Registry) error {

	if err := validate.Required("source", "body", m.Source); err != nil {
		return err
	}

	if m.Source != nil {
		if err := m.Source.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("source")
			}
			return err
		}
	}

	return nil
}

func (m *NewFXDealAttributes) validateTarget(formats strfmt.Registry) error {

	if err := validate.Required("target", "body", m.Target); err != nil {
		return err
	}

	if m.Target != nil {
		if err := m.Target.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("target")
			}
			return err
		}
	}

	return nil
}

func (m *NewFXDealAttributes) validateType(formats strfmt.Registry) error {

	if err := m.Type.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("type")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *NewFXDealAttributes) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NewFXDealAttributes) UnmarshalBinary(b []byte) error {
	var res NewFXDealAttributes
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
func (m *NewFXDealAttributes) Json() string {
	json, err := json.MarshalIndent(m, "  ", "  ")
	if err != nil {
		log.Fatal(err)
	}
	return string(json)
}
