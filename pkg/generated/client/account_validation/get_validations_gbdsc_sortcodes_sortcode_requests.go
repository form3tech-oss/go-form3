// Code generated by go-swagger; DO NOT EDIT.

package account_validation

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// Client.GetValidationsGbdscSortcodesSortcode creates a new GetValidationsGbdscSortcodesSortcodeRequest object
// with the default values initialized.
func (c *Client) GetValidationsGbdscSortcodesSortcode() *GetValidationsGbdscSortcodesSortcodeRequest {
	var ()
	return &GetValidationsGbdscSortcodesSortcodeRequest{

		Sortcode: c.Defaults.GetString("GetValidationsGbdscSortcodesSortcode", "sortcode"),

		timeout: cr.DefaultTimeout,

		transport: c.transport,
		formats:   c.formats,
	}
}

type GetValidationsGbdscSortcodesSortcodeRequest struct {

	/*Sortcode      Sort code      */

	Sortcode string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client

	transport runtime.ClientTransport
	formats   strfmt.Registry
}

func (o *GetValidationsGbdscSortcodesSortcodeRequest) FromJson(j string) (*GetValidationsGbdscSortcodesSortcodeRequest, error) {

	return o, nil
}

func (o *GetValidationsGbdscSortcodesSortcodeRequest) WithSortcode(sortcode string) *GetValidationsGbdscSortcodesSortcodeRequest {

	o.Sortcode = sortcode

	return o
}

// ////////////////
// WithContext adds the context to the get validations gbdsc sortcodes sortcode Request
func (o *GetValidationsGbdscSortcodesSortcodeRequest) WithContext(ctx context.Context) *GetValidationsGbdscSortcodesSortcodeRequest {
	o.Context = ctx
	return o
}

// WithHTTPClient adds the HTTPClient to the get validations gbdsc sortcodes sortcode Request
func (o *GetValidationsGbdscSortcodesSortcodeRequest) WithHTTPClient(client *http.Client) *GetValidationsGbdscSortcodesSortcodeRequest {
	o.HTTPClient = client
	return o
}

// WriteToRequest writes these Request to a swagger request
func (o *GetValidationsGbdscSortcodesSortcodeRequest) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param sortcode
	if err := r.SetPathParam("sortcode", o.Sortcode); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
