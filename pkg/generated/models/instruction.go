// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"log"

	"github.com/form3tech-oss/go-form3/v7/pkg/client"
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Instruction instruction
// swagger:model Instruction
type Instruction struct {

	// code
	// Max Length: 4
	Code string `json:"code,omitempty"`

	// information
	// Max Length: 140
	Information string `json:"information,omitempty"`
}

func InstructionWithDefaults(defaults client.Defaults) *Instruction {
	return &Instruction{

		Code: defaults.GetString("Instruction", "code"),

		Information: defaults.GetString("Instruction", "information"),
	}
}

func (m *Instruction) WithCode(code string) *Instruction {

	m.Code = code

	return m
}

func (m *Instruction) WithInformation(information string) *Instruction {

	m.Information = information

	return m
}

// Validate validates this instruction
func (m *Instruction) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInformation(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Instruction) validateCode(formats strfmt.Registry) error {

	if swag.IsZero(m.Code) { // not required
		return nil
	}

	if err := validate.MaxLength("code", "body", m.Code, 4); err != nil {
		return err
	}

	return nil
}

func (m *Instruction) validateInformation(formats strfmt.Registry) error {

	if swag.IsZero(m.Information) { // not required
		return nil
	}

	if err := validate.MaxLength("information", "body", m.Information, 140); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Instruction) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Instruction) UnmarshalBinary(b []byte) error {
	var res Instruction
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
func (m *Instruction) Json() string {
	json, err := json.MarshalIndent(m, "  ", "  ")
	if err != nil {
		log.Fatal(err)
	}
	return string(json)
}
