// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"log"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// StatusReason Used to determine appropriate scheme or internal payment reject code. Account status field must be set to closed to use this functionality.
// swagger:model StatusReason
type StatusReason string

const (

	// StatusReasonClosed captures enum value "closed"
	StatusReasonClosed StatusReason = "closed"

	// StatusReasonStopped captures enum value "stopped"
	StatusReasonStopped StatusReason = "stopped"

	// StatusReasonCurrency captures enum value "currency"
	StatusReasonCurrency StatusReason = "currency"

	// StatusReasonTransferred captures enum value "transferred"
	StatusReasonTransferred StatusReason = "transferred"

	// StatusReasonDeceased captures enum value "deceased"
	StatusReasonDeceased StatusReason = "deceased"

	// StatusReasonBusinessReasons captures enum value "business_reasons"
	StatusReasonBusinessReasons StatusReason = "business_reasons"

	// StatusReasonBeneficiarySensitivities captures enum value "beneficiary_sensitivities"
	StatusReasonBeneficiarySensitivities StatusReason = "beneficiary_sensitivities"

	// StatusReasonTermsAndConditions captures enum value "terms_and_conditions"
	StatusReasonTermsAndConditions StatusReason = "terms_and_conditions"

	// StatusReasonNone captures enum value "none"
	StatusReasonNone StatusReason = "none"
)

// for schema
var statusReasonEnum []interface{}

func init() {
	var res []StatusReason
	if err := json.Unmarshal([]byte(`["closed","stopped","currency","transferred","deceased","business_reasons","beneficiary_sensitivities","terms_and_conditions","none"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		statusReasonEnum = append(statusReasonEnum, v)
	}
}

func (m StatusReason) validateStatusReasonEnum(path, location string, value StatusReason) error {
	if err := validate.Enum(path, location, value, statusReasonEnum); err != nil {
		return err
	}
	return nil
}

// Validate validates this status reason
func (m StatusReason) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateStatusReasonEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StatusReason) Json() string {
	json, err := json.MarshalIndent(m, "  ", "  ")
	if err != nil {
		log.Fatal(err)
	}
	return string(json)
}
