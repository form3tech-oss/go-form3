// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"log"
	"strconv"

	"github.com/form3tech-oss/go-form3/v6/pkg/client"
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// BeneficiaryDebtorAccountHoldingEntity beneficiary debtor account holding entity
// swagger:model BeneficiaryDebtorAccountHoldingEntity
type BeneficiaryDebtorAccountHoldingEntity struct {

	// Financial institution address
	BankAddress []string `json:"bank_address,omitempty"`

	// Financial institution identification
	BankID string `json:"bank_id,omitempty"`

	// bank id code
	BankIDCode BankIDCode `json:"bank_id_code,omitempty"`

	// Array for additional ID(s) for agent
	BankIds []*AccountWithBankID `json:"bank_ids,omitempty"`

	// Financial institution name
	BankName string `json:"bank_name,omitempty"`

	// Identifier of the financial institution which services the account
	BankPartyID string `json:"bank_party_id,omitempty"`
}

func BeneficiaryDebtorAccountHoldingEntityWithDefaults(defaults client.Defaults) *BeneficiaryDebtorAccountHoldingEntity {
	return &BeneficiaryDebtorAccountHoldingEntity{

		BankAddress: make([]string, 0),

		BankID: defaults.GetString("BeneficiaryDebtorAccountHoldingEntity", "bank_id"),

		// TODO BankIDCode: BankIDCode,

		BankIds: make([]*AccountWithBankID, 0),

		BankName: defaults.GetString("BeneficiaryDebtorAccountHoldingEntity", "bank_name"),

		BankPartyID: defaults.GetString("BeneficiaryDebtorAccountHoldingEntity", "bank_party_id"),
	}
}

func (m *BeneficiaryDebtorAccountHoldingEntity) WithBankAddress(bankAddress []string) *BeneficiaryDebtorAccountHoldingEntity {

	m.BankAddress = bankAddress

	return m
}

func (m *BeneficiaryDebtorAccountHoldingEntity) WithBankID(bankID string) *BeneficiaryDebtorAccountHoldingEntity {

	m.BankID = bankID

	return m
}

func (m *BeneficiaryDebtorAccountHoldingEntity) WithBankIDCode(bankIDCode BankIDCode) *BeneficiaryDebtorAccountHoldingEntity {

	m.BankIDCode = bankIDCode

	return m
}

func (m *BeneficiaryDebtorAccountHoldingEntity) WithBankIds(bankIds []*AccountWithBankID) *BeneficiaryDebtorAccountHoldingEntity {

	m.BankIds = bankIds

	return m
}

func (m *BeneficiaryDebtorAccountHoldingEntity) WithBankName(bankName string) *BeneficiaryDebtorAccountHoldingEntity {

	m.BankName = bankName

	return m
}

func (m *BeneficiaryDebtorAccountHoldingEntity) WithBankPartyID(bankPartyID string) *BeneficiaryDebtorAccountHoldingEntity {

	m.BankPartyID = bankPartyID

	return m
}

// Validate validates this beneficiary debtor account holding entity
func (m *BeneficiaryDebtorAccountHoldingEntity) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBankIDCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBankIds(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BeneficiaryDebtorAccountHoldingEntity) validateBankIDCode(formats strfmt.Registry) error {

	if swag.IsZero(m.BankIDCode) { // not required
		return nil
	}

	if err := m.BankIDCode.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("bank_id_code")
		}
		return err
	}

	return nil
}

func (m *BeneficiaryDebtorAccountHoldingEntity) validateBankIds(formats strfmt.Registry) error {

	if swag.IsZero(m.BankIds) { // not required
		return nil
	}

	for i := 0; i < len(m.BankIds); i++ {
		if swag.IsZero(m.BankIds[i]) { // not required
			continue
		}

		if m.BankIds[i] != nil {
			if err := m.BankIds[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("bank_ids" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *BeneficiaryDebtorAccountHoldingEntity) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BeneficiaryDebtorAccountHoldingEntity) UnmarshalBinary(b []byte) error {
	var res BeneficiaryDebtorAccountHoldingEntity
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
func (m *BeneficiaryDebtorAccountHoldingEntity) Json() string {
	json, err := json.MarshalIndent(m, "  ", "  ")
	if err != nil {
		log.Fatal(err)
	}
	return string(json)
}
