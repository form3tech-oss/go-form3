// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"log"

	"github.com/form3tech-oss/go-form3/v4/pkg/client"
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ReportLink report link
// swagger:model ReportLink
type ReportLink struct {

	// href
	// Required: true
	// Format: uri
	Href *strfmt.URI `json:"href"`

	// meta
	Meta *ReportLinkMeta `json:"meta,omitempty"`
}

func ReportLinkWithDefaults(defaults client.Defaults) *ReportLink {
	return &ReportLink{

		Href: defaults.GetStrfmtURIPtr("ReportLink", "href"),

		Meta: ReportLinkMetaWithDefaults(defaults),
	}
}

func (m *ReportLink) WithHref(href strfmt.URI) *ReportLink {

	m.Href = &href

	return m
}

func (m *ReportLink) WithoutHref() *ReportLink {
	m.Href = nil
	return m
}

func (m *ReportLink) WithMeta(meta ReportLinkMeta) *ReportLink {

	m.Meta = &meta

	return m
}

func (m *ReportLink) WithoutMeta() *ReportLink {
	m.Meta = nil
	return m
}

// Validate validates this report link
func (m *ReportLink) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHref(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMeta(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ReportLink) validateHref(formats strfmt.Registry) error {

	if err := validate.Required("href", "body", m.Href); err != nil {
		return err
	}

	if err := validate.FormatOf("href", "body", "uri", m.Href.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ReportLink) validateMeta(formats strfmt.Registry) error {

	if swag.IsZero(m.Meta) { // not required
		return nil
	}

	if m.Meta != nil {
		if err := m.Meta.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("meta")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ReportLink) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ReportLink) UnmarshalBinary(b []byte) error {
	var res ReportLink
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
func (m *ReportLink) Json() string {
	json, err := json.MarshalIndent(m, "  ", "  ")
	if err != nil {
		log.Fatal(err)
	}
	return string(json)
}

// ReportLinkMeta report link meta
// swagger:model ReportLinkMeta
type ReportLinkMeta struct {

	// content type
	ContentType string `json:"content-type,omitempty"`
}

func ReportLinkMetaWithDefaults(defaults client.Defaults) *ReportLinkMeta {
	return &ReportLinkMeta{

		ContentType: defaults.GetString("ReportLinkMeta", "content-type"),
	}
}

func (m *ReportLinkMeta) WithContentType(contentType string) *ReportLinkMeta {

	m.ContentType = contentType

	return m
}

// Validate validates this report link meta
func (m *ReportLinkMeta) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ReportLinkMeta) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ReportLinkMeta) UnmarshalBinary(b []byte) error {
	var res ReportLinkMeta
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
func (m *ReportLinkMeta) Json() string {
	json, err := json.MarshalIndent(m, "  ", "  ")
	if err != nil {
		log.Fatal(err)
	}
	return string(json)
}
