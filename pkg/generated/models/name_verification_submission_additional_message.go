// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"log"

	"github.com/form3tech-oss/go-form3/v7/pkg/client"
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NameVerificationSubmissionAdditionalMessage name verification submission additional message
// swagger:model NameVerificationSubmissionAdditionalMessage
type NameVerificationSubmissionAdditionalMessage struct {

	// message code
	// Max Length: 20
	MessageCode string `json:"message_code,omitempty"`

	// message text
	// Max Length: 500
	MessageText string `json:"message_text,omitempty"`

	// message type
	// Max Length: 70
	MessageType string `json:"message_type,omitempty"`
}

func NameVerificationSubmissionAdditionalMessageWithDefaults(defaults client.Defaults) *NameVerificationSubmissionAdditionalMessage {
	return &NameVerificationSubmissionAdditionalMessage{

		MessageCode: defaults.GetString("NameVerificationSubmissionAdditionalMessage", "message_code"),

		MessageText: defaults.GetString("NameVerificationSubmissionAdditionalMessage", "message_text"),

		MessageType: defaults.GetString("NameVerificationSubmissionAdditionalMessage", "message_type"),
	}
}

func (m *NameVerificationSubmissionAdditionalMessage) WithMessageCode(messageCode string) *NameVerificationSubmissionAdditionalMessage {

	m.MessageCode = messageCode

	return m
}

func (m *NameVerificationSubmissionAdditionalMessage) WithMessageText(messageText string) *NameVerificationSubmissionAdditionalMessage {

	m.MessageText = messageText

	return m
}

func (m *NameVerificationSubmissionAdditionalMessage) WithMessageType(messageType string) *NameVerificationSubmissionAdditionalMessage {

	m.MessageType = messageType

	return m
}

// Validate validates this name verification submission additional message
func (m *NameVerificationSubmissionAdditionalMessage) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMessageCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMessageText(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMessageType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NameVerificationSubmissionAdditionalMessage) validateMessageCode(formats strfmt.Registry) error {

	if swag.IsZero(m.MessageCode) { // not required
		return nil
	}

	if err := validate.MaxLength("message_code", "body", m.MessageCode, 20); err != nil {
		return err
	}

	return nil
}

func (m *NameVerificationSubmissionAdditionalMessage) validateMessageText(formats strfmt.Registry) error {

	if swag.IsZero(m.MessageText) { // not required
		return nil
	}

	if err := validate.MaxLength("message_text", "body", m.MessageText, 500); err != nil {
		return err
	}

	return nil
}

func (m *NameVerificationSubmissionAdditionalMessage) validateMessageType(formats strfmt.Registry) error {

	if swag.IsZero(m.MessageType) { // not required
		return nil
	}

	if err := validate.MaxLength("message_type", "body", m.MessageType, 70); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *NameVerificationSubmissionAdditionalMessage) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NameVerificationSubmissionAdditionalMessage) UnmarshalBinary(b []byte) error {
	var res NameVerificationSubmissionAdditionalMessage
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
func (m *NameVerificationSubmissionAdditionalMessage) Json() string {
	json, err := json.MarshalIndent(m, "  ", "  ")
	if err != nil {
		log.Fatal(err)
	}
	return string(json)
}
