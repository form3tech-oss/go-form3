// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"log"

	"github.com/form3tech-oss/go-form3/v6/pkg/client"
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NewReportRequestReportUser new report request report user
// swagger:model NewReportRequestReportUser
type NewReportRequestReportUser struct {

	// Identifies a user or organization
	// Required: true
	UserID string `json:"user_id"`

	// Type of identifier for the user or organization
	// Required: true
	UserIDCode *ReportRequestUserIDCode `json:"user_id_code"`
}

func NewReportRequestReportUserWithDefaults(defaults client.Defaults) *NewReportRequestReportUser {
	return &NewReportRequestReportUser{

		UserID: defaults.GetString("NewReportRequestReportUser", "user_id"),

		// TODO UserIDCode: ReportRequestUserIDCode,

	}
}

func (m *NewReportRequestReportUser) WithUserID(userID string) *NewReportRequestReportUser {

	m.UserID = userID

	return m
}

func (m *NewReportRequestReportUser) WithUserIDCode(userIDCode ReportRequestUserIDCode) *NewReportRequestReportUser {

	m.UserIDCode = &userIDCode

	return m
}

func (m *NewReportRequestReportUser) WithoutUserIDCode() *NewReportRequestReportUser {
	m.UserIDCode = nil
	return m
}

// Validate validates this new report request report user
func (m *NewReportRequestReportUser) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateUserID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserIDCode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NewReportRequestReportUser) validateUserID(formats strfmt.Registry) error {

	if err := validate.RequiredString("user_id", "body", string(m.UserID)); err != nil {
		return err
	}

	return nil
}

func (m *NewReportRequestReportUser) validateUserIDCode(formats strfmt.Registry) error {

	if err := validate.Required("user_id_code", "body", m.UserIDCode); err != nil {
		return err
	}

	if m.UserIDCode != nil {
		if err := m.UserIDCode.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("user_id_code")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *NewReportRequestReportUser) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NewReportRequestReportUser) UnmarshalBinary(b []byte) error {
	var res NewReportRequestReportUser
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
func (m *NewReportRequestReportUser) Json() string {
	json, err := json.MarshalIndent(m, "  ", "  ")
	if err != nil {
		log.Fatal(err)
	}
	return string(json)
}
