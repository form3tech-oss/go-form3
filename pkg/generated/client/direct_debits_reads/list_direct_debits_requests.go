// Code generated by go-swagger; DO NOT EDIT.

package direct_debits_reads

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// Client.ListDirectDebits creates a new ListDirectDebitsRequest object
// with the default values initialized.
func (c *Client) ListDirectDebits() *ListDirectDebitsRequest {
	var ()
	return &ListDirectDebitsRequest{

		FilterAdmissionAdmissionDateFrom: c.Defaults.GetStrfmtDateTimePtr("ListDirectDebits", "filter[admission.admission_date_from]"),

		FilterAdmissionAdmissionDateTo: c.Defaults.GetStrfmtDateTimePtr("ListDirectDebits", "filter[admission.admission_date_to]"),

		FilterAdmissionSchemeStatusCode: c.Defaults.GetStringPtr("ListDirectDebits", "filter[admission.scheme_status_code]"),

		FilterAdmissionStatus: c.Defaults.GetStringPtr("ListDirectDebits", "filter[admission.status]"),

		FilterAmount: c.Defaults.GetStringPtr("ListDirectDebits", "filter[amount]"),

		FilterBeneficiaryPartyAccountNumber: c.Defaults.GetStringPtr("ListDirectDebits", "filter[beneficiary_party.account_number]"),

		FilterBeneficiaryPartyBankID: c.Defaults.GetStringPtr("ListDirectDebits", "filter[beneficiary_party.bank_id]"),

		FilterClearingID: c.Defaults.GetStringPtr("ListDirectDebits", "filter[clearing_id]"),

		FilterCreatedDateFrom: c.Defaults.GetStrfmtDateTimePtr("ListDirectDebits", "filter[created_date_from]"),

		FilterCreatedDateTo: c.Defaults.GetStrfmtDateTimePtr("ListDirectDebits", "filter[created_date_to]"),

		FilterCurrency: c.Defaults.GetStringPtr("ListDirectDebits", "filter[currency]"),

		FilterDebtorPartyAccountNumber: c.Defaults.GetStringPtr("ListDirectDebits", "filter[debtor_party.account_number]"),

		FilterDebtorPartyBankID: c.Defaults.GetStringPtr("ListDirectDebits", "filter[debtor_party.bank_id]"),

		FilterModifiedDateFrom: c.Defaults.GetStrfmtDateTimePtr("ListDirectDebits", "filter[modified_date_from]"),

		FilterModifiedDateTo: c.Defaults.GetStrfmtDateTimePtr("ListDirectDebits", "filter[modified_date_to]"),

		FilterNotRelationships: make([]string, 0),

		FilterOrganisationID: make([]strfmt.UUID, 0),

		FilterPaymentScheme: c.Defaults.GetStringPtr("ListDirectDebits", "filter[payment_scheme]"),

		FilterPaymentType: c.Defaults.GetStringPtr("ListDirectDebits", "filter[payment_type]"),

		FilterProcessingDateFrom: c.Defaults.GetStrfmtDatePtr("ListDirectDebits", "filter[processing_date_from]"),

		FilterProcessingDateTo: c.Defaults.GetStrfmtDatePtr("ListDirectDebits", "filter[processing_date_to]"),

		FilterReference: c.Defaults.GetStringPtr("ListDirectDebits", "filter[reference]"),

		FilterRelationships: make([]string, 0),

		FilterReturnSubmissionSubmissionDateFrom: c.Defaults.GetStrfmtDateTimePtr("ListDirectDebits", "filter[return_submission.submission_date_from]"),

		FilterReturnSubmissionSubmissionDateTo: c.Defaults.GetStrfmtDateTimePtr("ListDirectDebits", "filter[return_submission.submission_date_to]"),

		FilterSubmissionSchemeStatusCode: c.Defaults.GetStringPtr("ListDirectDebits", "filter[submission.scheme_status_code]"),

		FilterSubmissionStatus: c.Defaults.GetStringPtr("ListDirectDebits", "filter[submission.status]"),

		FilterSubmissionSubmissionDateFrom: c.Defaults.GetStrfmtDateTimePtr("ListDirectDebits", "filter[submission.submission_date_from]"),

		FilterSubmissionSubmissionDateTo: c.Defaults.GetStrfmtDateTimePtr("ListDirectDebits", "filter[submission.submission_date_to]"),

		FilterUniqueSchemeID: c.Defaults.GetStringPtr("ListDirectDebits", "filter[unique_scheme_id]"),

		PageAfter: c.Defaults.GetStringPtr("ListDirectDebits", "page[after]"),

		PageBefore: c.Defaults.GetStringPtr("ListDirectDebits", "page[before]"),

		PageNumber: c.Defaults.GetStringPtr("ListDirectDebits", "page[number]"),

		PageSize: c.Defaults.GetInt64Ptr("ListDirectDebits", "page[size]"),

		timeout: cr.DefaultTimeout,

		transport: c.transport,
		formats:   c.formats,
	}
}

type ListDirectDebitsRequest struct {

	/*FilterAdmissionAdmissionDateFrom*/

	FilterAdmissionAdmissionDateFrom *strfmt.DateTime

	/*FilterAdmissionAdmissionDateTo*/

	FilterAdmissionAdmissionDateTo *strfmt.DateTime

	/*FilterAdmissionSchemeStatusCode      Filter by admission scheme status code      */

	FilterAdmissionSchemeStatusCode *string

	/*FilterAdmissionStatus      Filter by admission status      */

	FilterAdmissionStatus *string

	/*FilterAmount      Filter by amount      */

	FilterAmount *string

	/*FilterBeneficiaryPartyAccountNumber*/

	FilterBeneficiaryPartyAccountNumber *string

	/*FilterBeneficiaryPartyBankID*/

	FilterBeneficiaryPartyBankID *string

	/*FilterClearingID*/

	FilterClearingID *string

	/*FilterCreatedDateFrom*/

	FilterCreatedDateFrom *strfmt.DateTime

	/*FilterCreatedDateTo*/

	FilterCreatedDateTo *strfmt.DateTime

	/*FilterCurrency*/

	FilterCurrency *string

	/*FilterDebtorPartyAccountNumber*/

	FilterDebtorPartyAccountNumber *string

	/*FilterDebtorPartyBankID*/

	FilterDebtorPartyBankID *string

	/*FilterModifiedDateFrom*/

	FilterModifiedDateFrom *strfmt.DateTime

	/*FilterModifiedDateTo*/

	FilterModifiedDateTo *strfmt.DateTime

	/*FilterNotRelationships      Filter for direct debits containing none of the requested relationships      */

	FilterNotRelationships []string

	/*FilterOrganisationID      Filter by organisation id      */

	FilterOrganisationID []strfmt.UUID

	/*FilterPaymentScheme*/

	FilterPaymentScheme *string

	/*FilterPaymentType*/

	FilterPaymentType *string

	/*FilterProcessingDateFrom*/

	FilterProcessingDateFrom *strfmt.Date

	/*FilterProcessingDateTo*/

	FilterProcessingDateTo *strfmt.Date

	/*FilterReference      Filter by reference      */

	FilterReference *string

	/*FilterRelationships      Filter for direct debits containing all of the requested relationships      */

	FilterRelationships []string

	/*FilterReturnSubmissionSubmissionDateFrom*/

	FilterReturnSubmissionSubmissionDateFrom *strfmt.DateTime

	/*FilterReturnSubmissionSubmissionDateTo*/

	FilterReturnSubmissionSubmissionDateTo *strfmt.DateTime

	/*FilterSubmissionSchemeStatusCode      Filter by submission scheme status code      */

	FilterSubmissionSchemeStatusCode *string

	/*FilterSubmissionStatus      Filter by submission status      */

	FilterSubmissionStatus *string

	/*FilterSubmissionSubmissionDateFrom*/

	FilterSubmissionSubmissionDateFrom *strfmt.DateTime

	/*FilterSubmissionSubmissionDateTo*/

	FilterSubmissionSubmissionDateTo *strfmt.DateTime

	/*FilterUniqueSchemeID      Filter by unique scheme id      */

	FilterUniqueSchemeID *string

	/*PageAfter      Cursor for next page (this is a base64-encoded UUID continuation token returned from the application and should not be manually generated, unless requesting the first page, where the value should be set to "start").      */

	PageAfter *string

	/*PageBefore      Cursor for previous page (this is a base64-encoded UUID continuation token returned from the application and should not be manually generated, unless requesting the last page, where the value should be set to "end").      */

	PageBefore *string

	/*PageNumber      Which page to select. page[number] * page[size] is restricted to less than 10,000.      */

	PageNumber *string

	/*PageSize      Number of items to select      */

	PageSize *int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client

	transport runtime.ClientTransport
	formats   strfmt.Registry
}

func (o *ListDirectDebitsRequest) FromJson(j string) (*ListDirectDebitsRequest, error) {

	return o, nil
}

func (o *ListDirectDebitsRequest) WithFilterAdmissionAdmissionDateFrom(filterAdmissionAdmissionDateFrom strfmt.DateTime) *ListDirectDebitsRequest {

	o.FilterAdmissionAdmissionDateFrom = &filterAdmissionAdmissionDateFrom

	return o
}

func (o *ListDirectDebitsRequest) WithoutFilterAdmissionAdmissionDateFrom() *ListDirectDebitsRequest {

	o.FilterAdmissionAdmissionDateFrom = nil

	return o
}

func (o *ListDirectDebitsRequest) WithFilterAdmissionAdmissionDateTo(filterAdmissionAdmissionDateTo strfmt.DateTime) *ListDirectDebitsRequest {

	o.FilterAdmissionAdmissionDateTo = &filterAdmissionAdmissionDateTo

	return o
}

func (o *ListDirectDebitsRequest) WithoutFilterAdmissionAdmissionDateTo() *ListDirectDebitsRequest {

	o.FilterAdmissionAdmissionDateTo = nil

	return o
}

func (o *ListDirectDebitsRequest) WithFilterAdmissionSchemeStatusCode(filterAdmissionSchemeStatusCode string) *ListDirectDebitsRequest {

	o.FilterAdmissionSchemeStatusCode = &filterAdmissionSchemeStatusCode

	return o
}

func (o *ListDirectDebitsRequest) WithoutFilterAdmissionSchemeStatusCode() *ListDirectDebitsRequest {

	o.FilterAdmissionSchemeStatusCode = nil

	return o
}

func (o *ListDirectDebitsRequest) WithFilterAdmissionStatus(filterAdmissionStatus string) *ListDirectDebitsRequest {

	o.FilterAdmissionStatus = &filterAdmissionStatus

	return o
}

func (o *ListDirectDebitsRequest) WithoutFilterAdmissionStatus() *ListDirectDebitsRequest {

	o.FilterAdmissionStatus = nil

	return o
}

func (o *ListDirectDebitsRequest) WithFilterAmount(filterAmount string) *ListDirectDebitsRequest {

	o.FilterAmount = &filterAmount

	return o
}

func (o *ListDirectDebitsRequest) WithoutFilterAmount() *ListDirectDebitsRequest {

	o.FilterAmount = nil

	return o
}

func (o *ListDirectDebitsRequest) WithFilterBeneficiaryPartyAccountNumber(filterBeneficiaryPartyAccountNumber string) *ListDirectDebitsRequest {

	o.FilterBeneficiaryPartyAccountNumber = &filterBeneficiaryPartyAccountNumber

	return o
}

func (o *ListDirectDebitsRequest) WithoutFilterBeneficiaryPartyAccountNumber() *ListDirectDebitsRequest {

	o.FilterBeneficiaryPartyAccountNumber = nil

	return o
}

func (o *ListDirectDebitsRequest) WithFilterBeneficiaryPartyBankID(filterBeneficiaryPartyBankID string) *ListDirectDebitsRequest {

	o.FilterBeneficiaryPartyBankID = &filterBeneficiaryPartyBankID

	return o
}

func (o *ListDirectDebitsRequest) WithoutFilterBeneficiaryPartyBankID() *ListDirectDebitsRequest {

	o.FilterBeneficiaryPartyBankID = nil

	return o
}

func (o *ListDirectDebitsRequest) WithFilterClearingID(filterClearingID string) *ListDirectDebitsRequest {

	o.FilterClearingID = &filterClearingID

	return o
}

func (o *ListDirectDebitsRequest) WithoutFilterClearingID() *ListDirectDebitsRequest {

	o.FilterClearingID = nil

	return o
}

func (o *ListDirectDebitsRequest) WithFilterCreatedDateFrom(filterCreatedDateFrom strfmt.DateTime) *ListDirectDebitsRequest {

	o.FilterCreatedDateFrom = &filterCreatedDateFrom

	return o
}

func (o *ListDirectDebitsRequest) WithoutFilterCreatedDateFrom() *ListDirectDebitsRequest {

	o.FilterCreatedDateFrom = nil

	return o
}

func (o *ListDirectDebitsRequest) WithFilterCreatedDateTo(filterCreatedDateTo strfmt.DateTime) *ListDirectDebitsRequest {

	o.FilterCreatedDateTo = &filterCreatedDateTo

	return o
}

func (o *ListDirectDebitsRequest) WithoutFilterCreatedDateTo() *ListDirectDebitsRequest {

	o.FilterCreatedDateTo = nil

	return o
}

func (o *ListDirectDebitsRequest) WithFilterCurrency(filterCurrency string) *ListDirectDebitsRequest {

	o.FilterCurrency = &filterCurrency

	return o
}

func (o *ListDirectDebitsRequest) WithoutFilterCurrency() *ListDirectDebitsRequest {

	o.FilterCurrency = nil

	return o
}

func (o *ListDirectDebitsRequest) WithFilterDebtorPartyAccountNumber(filterDebtorPartyAccountNumber string) *ListDirectDebitsRequest {

	o.FilterDebtorPartyAccountNumber = &filterDebtorPartyAccountNumber

	return o
}

func (o *ListDirectDebitsRequest) WithoutFilterDebtorPartyAccountNumber() *ListDirectDebitsRequest {

	o.FilterDebtorPartyAccountNumber = nil

	return o
}

func (o *ListDirectDebitsRequest) WithFilterDebtorPartyBankID(filterDebtorPartyBankID string) *ListDirectDebitsRequest {

	o.FilterDebtorPartyBankID = &filterDebtorPartyBankID

	return o
}

func (o *ListDirectDebitsRequest) WithoutFilterDebtorPartyBankID() *ListDirectDebitsRequest {

	o.FilterDebtorPartyBankID = nil

	return o
}

func (o *ListDirectDebitsRequest) WithFilterModifiedDateFrom(filterModifiedDateFrom strfmt.DateTime) *ListDirectDebitsRequest {

	o.FilterModifiedDateFrom = &filterModifiedDateFrom

	return o
}

func (o *ListDirectDebitsRequest) WithoutFilterModifiedDateFrom() *ListDirectDebitsRequest {

	o.FilterModifiedDateFrom = nil

	return o
}

func (o *ListDirectDebitsRequest) WithFilterModifiedDateTo(filterModifiedDateTo strfmt.DateTime) *ListDirectDebitsRequest {

	o.FilterModifiedDateTo = &filterModifiedDateTo

	return o
}

func (o *ListDirectDebitsRequest) WithoutFilterModifiedDateTo() *ListDirectDebitsRequest {

	o.FilterModifiedDateTo = nil

	return o
}

func (o *ListDirectDebitsRequest) WithFilterNotRelationships(filterNotRelationships []string) *ListDirectDebitsRequest {

	o.FilterNotRelationships = filterNotRelationships

	return o
}

func (o *ListDirectDebitsRequest) WithoutFilterNotRelationships() *ListDirectDebitsRequest {

	o.FilterNotRelationships = nil

	return o
}

func (o *ListDirectDebitsRequest) WithFilterOrganisationID(filterOrganisationID []strfmt.UUID) *ListDirectDebitsRequest {

	o.FilterOrganisationID = filterOrganisationID

	return o
}

func (o *ListDirectDebitsRequest) WithoutFilterOrganisationID() *ListDirectDebitsRequest {

	o.FilterOrganisationID = nil

	return o
}

func (o *ListDirectDebitsRequest) WithFilterPaymentScheme(filterPaymentScheme string) *ListDirectDebitsRequest {

	o.FilterPaymentScheme = &filterPaymentScheme

	return o
}

func (o *ListDirectDebitsRequest) WithoutFilterPaymentScheme() *ListDirectDebitsRequest {

	o.FilterPaymentScheme = nil

	return o
}

func (o *ListDirectDebitsRequest) WithFilterPaymentType(filterPaymentType string) *ListDirectDebitsRequest {

	o.FilterPaymentType = &filterPaymentType

	return o
}

func (o *ListDirectDebitsRequest) WithoutFilterPaymentType() *ListDirectDebitsRequest {

	o.FilterPaymentType = nil

	return o
}

func (o *ListDirectDebitsRequest) WithFilterProcessingDateFrom(filterProcessingDateFrom strfmt.Date) *ListDirectDebitsRequest {

	o.FilterProcessingDateFrom = &filterProcessingDateFrom

	return o
}

func (o *ListDirectDebitsRequest) WithoutFilterProcessingDateFrom() *ListDirectDebitsRequest {

	o.FilterProcessingDateFrom = nil

	return o
}

func (o *ListDirectDebitsRequest) WithFilterProcessingDateTo(filterProcessingDateTo strfmt.Date) *ListDirectDebitsRequest {

	o.FilterProcessingDateTo = &filterProcessingDateTo

	return o
}

func (o *ListDirectDebitsRequest) WithoutFilterProcessingDateTo() *ListDirectDebitsRequest {

	o.FilterProcessingDateTo = nil

	return o
}

func (o *ListDirectDebitsRequest) WithFilterReference(filterReference string) *ListDirectDebitsRequest {

	o.FilterReference = &filterReference

	return o
}

func (o *ListDirectDebitsRequest) WithoutFilterReference() *ListDirectDebitsRequest {

	o.FilterReference = nil

	return o
}

func (o *ListDirectDebitsRequest) WithFilterRelationships(filterRelationships []string) *ListDirectDebitsRequest {

	o.FilterRelationships = filterRelationships

	return o
}

func (o *ListDirectDebitsRequest) WithoutFilterRelationships() *ListDirectDebitsRequest {

	o.FilterRelationships = nil

	return o
}

func (o *ListDirectDebitsRequest) WithFilterReturnSubmissionSubmissionDateFrom(filterReturnSubmissionSubmissionDateFrom strfmt.DateTime) *ListDirectDebitsRequest {

	o.FilterReturnSubmissionSubmissionDateFrom = &filterReturnSubmissionSubmissionDateFrom

	return o
}

func (o *ListDirectDebitsRequest) WithoutFilterReturnSubmissionSubmissionDateFrom() *ListDirectDebitsRequest {

	o.FilterReturnSubmissionSubmissionDateFrom = nil

	return o
}

func (o *ListDirectDebitsRequest) WithFilterReturnSubmissionSubmissionDateTo(filterReturnSubmissionSubmissionDateTo strfmt.DateTime) *ListDirectDebitsRequest {

	o.FilterReturnSubmissionSubmissionDateTo = &filterReturnSubmissionSubmissionDateTo

	return o
}

func (o *ListDirectDebitsRequest) WithoutFilterReturnSubmissionSubmissionDateTo() *ListDirectDebitsRequest {

	o.FilterReturnSubmissionSubmissionDateTo = nil

	return o
}

func (o *ListDirectDebitsRequest) WithFilterSubmissionSchemeStatusCode(filterSubmissionSchemeStatusCode string) *ListDirectDebitsRequest {

	o.FilterSubmissionSchemeStatusCode = &filterSubmissionSchemeStatusCode

	return o
}

func (o *ListDirectDebitsRequest) WithoutFilterSubmissionSchemeStatusCode() *ListDirectDebitsRequest {

	o.FilterSubmissionSchemeStatusCode = nil

	return o
}

func (o *ListDirectDebitsRequest) WithFilterSubmissionStatus(filterSubmissionStatus string) *ListDirectDebitsRequest {

	o.FilterSubmissionStatus = &filterSubmissionStatus

	return o
}

func (o *ListDirectDebitsRequest) WithoutFilterSubmissionStatus() *ListDirectDebitsRequest {

	o.FilterSubmissionStatus = nil

	return o
}

func (o *ListDirectDebitsRequest) WithFilterSubmissionSubmissionDateFrom(filterSubmissionSubmissionDateFrom strfmt.DateTime) *ListDirectDebitsRequest {

	o.FilterSubmissionSubmissionDateFrom = &filterSubmissionSubmissionDateFrom

	return o
}

func (o *ListDirectDebitsRequest) WithoutFilterSubmissionSubmissionDateFrom() *ListDirectDebitsRequest {

	o.FilterSubmissionSubmissionDateFrom = nil

	return o
}

func (o *ListDirectDebitsRequest) WithFilterSubmissionSubmissionDateTo(filterSubmissionSubmissionDateTo strfmt.DateTime) *ListDirectDebitsRequest {

	o.FilterSubmissionSubmissionDateTo = &filterSubmissionSubmissionDateTo

	return o
}

func (o *ListDirectDebitsRequest) WithoutFilterSubmissionSubmissionDateTo() *ListDirectDebitsRequest {

	o.FilterSubmissionSubmissionDateTo = nil

	return o
}

func (o *ListDirectDebitsRequest) WithFilterUniqueSchemeID(filterUniqueSchemeID string) *ListDirectDebitsRequest {

	o.FilterUniqueSchemeID = &filterUniqueSchemeID

	return o
}

func (o *ListDirectDebitsRequest) WithoutFilterUniqueSchemeID() *ListDirectDebitsRequest {

	o.FilterUniqueSchemeID = nil

	return o
}

func (o *ListDirectDebitsRequest) WithPageAfter(pageAfter string) *ListDirectDebitsRequest {

	o.PageAfter = &pageAfter

	return o
}

func (o *ListDirectDebitsRequest) WithoutPageAfter() *ListDirectDebitsRequest {

	o.PageAfter = nil

	return o
}

func (o *ListDirectDebitsRequest) WithPageBefore(pageBefore string) *ListDirectDebitsRequest {

	o.PageBefore = &pageBefore

	return o
}

func (o *ListDirectDebitsRequest) WithoutPageBefore() *ListDirectDebitsRequest {

	o.PageBefore = nil

	return o
}

func (o *ListDirectDebitsRequest) WithPageNumber(pageNumber string) *ListDirectDebitsRequest {

	o.PageNumber = &pageNumber

	return o
}

func (o *ListDirectDebitsRequest) WithoutPageNumber() *ListDirectDebitsRequest {

	o.PageNumber = nil

	return o
}

func (o *ListDirectDebitsRequest) WithPageSize(pageSize int64) *ListDirectDebitsRequest {

	o.PageSize = &pageSize

	return o
}

func (o *ListDirectDebitsRequest) WithoutPageSize() *ListDirectDebitsRequest {

	o.PageSize = nil

	return o
}

// ////////////////
// WithContext adds the context to the list direct debits Request
func (o *ListDirectDebitsRequest) WithContext(ctx context.Context) *ListDirectDebitsRequest {
	o.Context = ctx
	return o
}

// WithHTTPClient adds the HTTPClient to the list direct debits Request
func (o *ListDirectDebitsRequest) WithHTTPClient(client *http.Client) *ListDirectDebitsRequest {
	o.HTTPClient = client
	return o
}

// WriteToRequest writes these Request to a swagger request
func (o *ListDirectDebitsRequest) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.FilterAdmissionAdmissionDateFrom != nil {

		// query param filter[admission.admission_date_from]
		var qrFilterAdmissionAdmissionDateFrom strfmt.DateTime
		if o.FilterAdmissionAdmissionDateFrom != nil {
			qrFilterAdmissionAdmissionDateFrom = *o.FilterAdmissionAdmissionDateFrom
		}
		qFilterAdmissionAdmissionDateFrom := qrFilterAdmissionAdmissionDateFrom.String()
		if qFilterAdmissionAdmissionDateFrom != "" {
			if err := r.SetQueryParam("filter[admission.admission_date_from]", qFilterAdmissionAdmissionDateFrom); err != nil {
				return err
			}
		}

	}

	if o.FilterAdmissionAdmissionDateTo != nil {

		// query param filter[admission.admission_date_to]
		var qrFilterAdmissionAdmissionDateTo strfmt.DateTime
		if o.FilterAdmissionAdmissionDateTo != nil {
			qrFilterAdmissionAdmissionDateTo = *o.FilterAdmissionAdmissionDateTo
		}
		qFilterAdmissionAdmissionDateTo := qrFilterAdmissionAdmissionDateTo.String()
		if qFilterAdmissionAdmissionDateTo != "" {
			if err := r.SetQueryParam("filter[admission.admission_date_to]", qFilterAdmissionAdmissionDateTo); err != nil {
				return err
			}
		}

	}

	if o.FilterAdmissionSchemeStatusCode != nil {

		// query param filter[admission.scheme_status_code]
		var qrFilterAdmissionSchemeStatusCode string
		if o.FilterAdmissionSchemeStatusCode != nil {
			qrFilterAdmissionSchemeStatusCode = *o.FilterAdmissionSchemeStatusCode
		}
		qFilterAdmissionSchemeStatusCode := qrFilterAdmissionSchemeStatusCode
		if qFilterAdmissionSchemeStatusCode != "" {
			if err := r.SetQueryParam("filter[admission.scheme_status_code]", qFilterAdmissionSchemeStatusCode); err != nil {
				return err
			}
		}

	}

	if o.FilterAdmissionStatus != nil {

		// query param filter[admission.status]
		var qrFilterAdmissionStatus string
		if o.FilterAdmissionStatus != nil {
			qrFilterAdmissionStatus = *o.FilterAdmissionStatus
		}
		qFilterAdmissionStatus := qrFilterAdmissionStatus
		if qFilterAdmissionStatus != "" {
			if err := r.SetQueryParam("filter[admission.status]", qFilterAdmissionStatus); err != nil {
				return err
			}
		}

	}

	if o.FilterAmount != nil {

		// query param filter[amount]
		var qrFilterAmount string
		if o.FilterAmount != nil {
			qrFilterAmount = *o.FilterAmount
		}
		qFilterAmount := qrFilterAmount
		if qFilterAmount != "" {
			if err := r.SetQueryParam("filter[amount]", qFilterAmount); err != nil {
				return err
			}
		}

	}

	if o.FilterBeneficiaryPartyAccountNumber != nil {

		// query param filter[beneficiary_party.account_number]
		var qrFilterBeneficiaryPartyAccountNumber string
		if o.FilterBeneficiaryPartyAccountNumber != nil {
			qrFilterBeneficiaryPartyAccountNumber = *o.FilterBeneficiaryPartyAccountNumber
		}
		qFilterBeneficiaryPartyAccountNumber := qrFilterBeneficiaryPartyAccountNumber
		if qFilterBeneficiaryPartyAccountNumber != "" {
			if err := r.SetQueryParam("filter[beneficiary_party.account_number]", qFilterBeneficiaryPartyAccountNumber); err != nil {
				return err
			}
		}

	}

	if o.FilterBeneficiaryPartyBankID != nil {

		// query param filter[beneficiary_party.bank_id]
		var qrFilterBeneficiaryPartyBankID string
		if o.FilterBeneficiaryPartyBankID != nil {
			qrFilterBeneficiaryPartyBankID = *o.FilterBeneficiaryPartyBankID
		}
		qFilterBeneficiaryPartyBankID := qrFilterBeneficiaryPartyBankID
		if qFilterBeneficiaryPartyBankID != "" {
			if err := r.SetQueryParam("filter[beneficiary_party.bank_id]", qFilterBeneficiaryPartyBankID); err != nil {
				return err
			}
		}

	}

	if o.FilterClearingID != nil {

		// query param filter[clearing_id]
		var qrFilterClearingID string
		if o.FilterClearingID != nil {
			qrFilterClearingID = *o.FilterClearingID
		}
		qFilterClearingID := qrFilterClearingID
		if qFilterClearingID != "" {
			if err := r.SetQueryParam("filter[clearing_id]", qFilterClearingID); err != nil {
				return err
			}
		}

	}

	if o.FilterCreatedDateFrom != nil {

		// query param filter[created_date_from]
		var qrFilterCreatedDateFrom strfmt.DateTime
		if o.FilterCreatedDateFrom != nil {
			qrFilterCreatedDateFrom = *o.FilterCreatedDateFrom
		}
		qFilterCreatedDateFrom := qrFilterCreatedDateFrom.String()
		if qFilterCreatedDateFrom != "" {
			if err := r.SetQueryParam("filter[created_date_from]", qFilterCreatedDateFrom); err != nil {
				return err
			}
		}

	}

	if o.FilterCreatedDateTo != nil {

		// query param filter[created_date_to]
		var qrFilterCreatedDateTo strfmt.DateTime
		if o.FilterCreatedDateTo != nil {
			qrFilterCreatedDateTo = *o.FilterCreatedDateTo
		}
		qFilterCreatedDateTo := qrFilterCreatedDateTo.String()
		if qFilterCreatedDateTo != "" {
			if err := r.SetQueryParam("filter[created_date_to]", qFilterCreatedDateTo); err != nil {
				return err
			}
		}

	}

	if o.FilterCurrency != nil {

		// query param filter[currency]
		var qrFilterCurrency string
		if o.FilterCurrency != nil {
			qrFilterCurrency = *o.FilterCurrency
		}
		qFilterCurrency := qrFilterCurrency
		if qFilterCurrency != "" {
			if err := r.SetQueryParam("filter[currency]", qFilterCurrency); err != nil {
				return err
			}
		}

	}

	if o.FilterDebtorPartyAccountNumber != nil {

		// query param filter[debtor_party.account_number]
		var qrFilterDebtorPartyAccountNumber string
		if o.FilterDebtorPartyAccountNumber != nil {
			qrFilterDebtorPartyAccountNumber = *o.FilterDebtorPartyAccountNumber
		}
		qFilterDebtorPartyAccountNumber := qrFilterDebtorPartyAccountNumber
		if qFilterDebtorPartyAccountNumber != "" {
			if err := r.SetQueryParam("filter[debtor_party.account_number]", qFilterDebtorPartyAccountNumber); err != nil {
				return err
			}
		}

	}

	if o.FilterDebtorPartyBankID != nil {

		// query param filter[debtor_party.bank_id]
		var qrFilterDebtorPartyBankID string
		if o.FilterDebtorPartyBankID != nil {
			qrFilterDebtorPartyBankID = *o.FilterDebtorPartyBankID
		}
		qFilterDebtorPartyBankID := qrFilterDebtorPartyBankID
		if qFilterDebtorPartyBankID != "" {
			if err := r.SetQueryParam("filter[debtor_party.bank_id]", qFilterDebtorPartyBankID); err != nil {
				return err
			}
		}

	}

	if o.FilterModifiedDateFrom != nil {

		// query param filter[modified_date_from]
		var qrFilterModifiedDateFrom strfmt.DateTime
		if o.FilterModifiedDateFrom != nil {
			qrFilterModifiedDateFrom = *o.FilterModifiedDateFrom
		}
		qFilterModifiedDateFrom := qrFilterModifiedDateFrom.String()
		if qFilterModifiedDateFrom != "" {
			if err := r.SetQueryParam("filter[modified_date_from]", qFilterModifiedDateFrom); err != nil {
				return err
			}
		}

	}

	if o.FilterModifiedDateTo != nil {

		// query param filter[modified_date_to]
		var qrFilterModifiedDateTo strfmt.DateTime
		if o.FilterModifiedDateTo != nil {
			qrFilterModifiedDateTo = *o.FilterModifiedDateTo
		}
		qFilterModifiedDateTo := qrFilterModifiedDateTo.String()
		if qFilterModifiedDateTo != "" {
			if err := r.SetQueryParam("filter[modified_date_to]", qFilterModifiedDateTo); err != nil {
				return err
			}
		}

	}

	valuesFilterNotRelationships := o.FilterNotRelationships

	joinedFilterNotRelationships := swag.JoinByFormat(valuesFilterNotRelationships, "")
	// query array param filter[not_relationships]
	if err := r.SetQueryParam("filter[not_relationships]", joinedFilterNotRelationships...); err != nil {
		return err
	}

	var valuesFilterOrganisationID []string
	for _, v := range o.FilterOrganisationID {
		valuesFilterOrganisationID = append(valuesFilterOrganisationID, v.String())
	}

	joinedFilterOrganisationID := swag.JoinByFormat(valuesFilterOrganisationID, "")
	// query array param filter[organisation_id]
	if err := r.SetQueryParam("filter[organisation_id]", joinedFilterOrganisationID...); err != nil {
		return err
	}

	if o.FilterPaymentScheme != nil {

		// query param filter[payment_scheme]
		var qrFilterPaymentScheme string
		if o.FilterPaymentScheme != nil {
			qrFilterPaymentScheme = *o.FilterPaymentScheme
		}
		qFilterPaymentScheme := qrFilterPaymentScheme
		if qFilterPaymentScheme != "" {
			if err := r.SetQueryParam("filter[payment_scheme]", qFilterPaymentScheme); err != nil {
				return err
			}
		}

	}

	if o.FilterPaymentType != nil {

		// query param filter[payment_type]
		var qrFilterPaymentType string
		if o.FilterPaymentType != nil {
			qrFilterPaymentType = *o.FilterPaymentType
		}
		qFilterPaymentType := qrFilterPaymentType
		if qFilterPaymentType != "" {
			if err := r.SetQueryParam("filter[payment_type]", qFilterPaymentType); err != nil {
				return err
			}
		}

	}

	if o.FilterProcessingDateFrom != nil {

		// query param filter[processing_date_from]
		var qrFilterProcessingDateFrom strfmt.Date
		if o.FilterProcessingDateFrom != nil {
			qrFilterProcessingDateFrom = *o.FilterProcessingDateFrom
		}
		qFilterProcessingDateFrom := qrFilterProcessingDateFrom.String()
		if qFilterProcessingDateFrom != "" {
			if err := r.SetQueryParam("filter[processing_date_from]", qFilterProcessingDateFrom); err != nil {
				return err
			}
		}

	}

	if o.FilterProcessingDateTo != nil {

		// query param filter[processing_date_to]
		var qrFilterProcessingDateTo strfmt.Date
		if o.FilterProcessingDateTo != nil {
			qrFilterProcessingDateTo = *o.FilterProcessingDateTo
		}
		qFilterProcessingDateTo := qrFilterProcessingDateTo.String()
		if qFilterProcessingDateTo != "" {
			if err := r.SetQueryParam("filter[processing_date_to]", qFilterProcessingDateTo); err != nil {
				return err
			}
		}

	}

	if o.FilterReference != nil {

		// query param filter[reference]
		var qrFilterReference string
		if o.FilterReference != nil {
			qrFilterReference = *o.FilterReference
		}
		qFilterReference := qrFilterReference
		if qFilterReference != "" {
			if err := r.SetQueryParam("filter[reference]", qFilterReference); err != nil {
				return err
			}
		}

	}

	valuesFilterRelationships := o.FilterRelationships

	joinedFilterRelationships := swag.JoinByFormat(valuesFilterRelationships, "")
	// query array param filter[relationships]
	if err := r.SetQueryParam("filter[relationships]", joinedFilterRelationships...); err != nil {
		return err
	}

	if o.FilterReturnSubmissionSubmissionDateFrom != nil {

		// query param filter[return_submission.submission_date_from]
		var qrFilterReturnSubmissionSubmissionDateFrom strfmt.DateTime
		if o.FilterReturnSubmissionSubmissionDateFrom != nil {
			qrFilterReturnSubmissionSubmissionDateFrom = *o.FilterReturnSubmissionSubmissionDateFrom
		}
		qFilterReturnSubmissionSubmissionDateFrom := qrFilterReturnSubmissionSubmissionDateFrom.String()
		if qFilterReturnSubmissionSubmissionDateFrom != "" {
			if err := r.SetQueryParam("filter[return_submission.submission_date_from]", qFilterReturnSubmissionSubmissionDateFrom); err != nil {
				return err
			}
		}

	}

	if o.FilterReturnSubmissionSubmissionDateTo != nil {

		// query param filter[return_submission.submission_date_to]
		var qrFilterReturnSubmissionSubmissionDateTo strfmt.DateTime
		if o.FilterReturnSubmissionSubmissionDateTo != nil {
			qrFilterReturnSubmissionSubmissionDateTo = *o.FilterReturnSubmissionSubmissionDateTo
		}
		qFilterReturnSubmissionSubmissionDateTo := qrFilterReturnSubmissionSubmissionDateTo.String()
		if qFilterReturnSubmissionSubmissionDateTo != "" {
			if err := r.SetQueryParam("filter[return_submission.submission_date_to]", qFilterReturnSubmissionSubmissionDateTo); err != nil {
				return err
			}
		}

	}

	if o.FilterSubmissionSchemeStatusCode != nil {

		// query param filter[submission.scheme_status_code]
		var qrFilterSubmissionSchemeStatusCode string
		if o.FilterSubmissionSchemeStatusCode != nil {
			qrFilterSubmissionSchemeStatusCode = *o.FilterSubmissionSchemeStatusCode
		}
		qFilterSubmissionSchemeStatusCode := qrFilterSubmissionSchemeStatusCode
		if qFilterSubmissionSchemeStatusCode != "" {
			if err := r.SetQueryParam("filter[submission.scheme_status_code]", qFilterSubmissionSchemeStatusCode); err != nil {
				return err
			}
		}

	}

	if o.FilterSubmissionStatus != nil {

		// query param filter[submission.status]
		var qrFilterSubmissionStatus string
		if o.FilterSubmissionStatus != nil {
			qrFilterSubmissionStatus = *o.FilterSubmissionStatus
		}
		qFilterSubmissionStatus := qrFilterSubmissionStatus
		if qFilterSubmissionStatus != "" {
			if err := r.SetQueryParam("filter[submission.status]", qFilterSubmissionStatus); err != nil {
				return err
			}
		}

	}

	if o.FilterSubmissionSubmissionDateFrom != nil {

		// query param filter[submission.submission_date_from]
		var qrFilterSubmissionSubmissionDateFrom strfmt.DateTime
		if o.FilterSubmissionSubmissionDateFrom != nil {
			qrFilterSubmissionSubmissionDateFrom = *o.FilterSubmissionSubmissionDateFrom
		}
		qFilterSubmissionSubmissionDateFrom := qrFilterSubmissionSubmissionDateFrom.String()
		if qFilterSubmissionSubmissionDateFrom != "" {
			if err := r.SetQueryParam("filter[submission.submission_date_from]", qFilterSubmissionSubmissionDateFrom); err != nil {
				return err
			}
		}

	}

	if o.FilterSubmissionSubmissionDateTo != nil {

		// query param filter[submission.submission_date_to]
		var qrFilterSubmissionSubmissionDateTo strfmt.DateTime
		if o.FilterSubmissionSubmissionDateTo != nil {
			qrFilterSubmissionSubmissionDateTo = *o.FilterSubmissionSubmissionDateTo
		}
		qFilterSubmissionSubmissionDateTo := qrFilterSubmissionSubmissionDateTo.String()
		if qFilterSubmissionSubmissionDateTo != "" {
			if err := r.SetQueryParam("filter[submission.submission_date_to]", qFilterSubmissionSubmissionDateTo); err != nil {
				return err
			}
		}

	}

	if o.FilterUniqueSchemeID != nil {

		// query param filter[unique_scheme_id]
		var qrFilterUniqueSchemeID string
		if o.FilterUniqueSchemeID != nil {
			qrFilterUniqueSchemeID = *o.FilterUniqueSchemeID
		}
		qFilterUniqueSchemeID := qrFilterUniqueSchemeID
		if qFilterUniqueSchemeID != "" {
			if err := r.SetQueryParam("filter[unique_scheme_id]", qFilterUniqueSchemeID); err != nil {
				return err
			}
		}

	}

	if o.PageAfter != nil {

		// query param page[after]
		var qrPageAfter string
		if o.PageAfter != nil {
			qrPageAfter = *o.PageAfter
		}
		qPageAfter := qrPageAfter
		if qPageAfter != "" {
			if err := r.SetQueryParam("page[after]", qPageAfter); err != nil {
				return err
			}
		}

	}

	if o.PageBefore != nil {

		// query param page[before]
		var qrPageBefore string
		if o.PageBefore != nil {
			qrPageBefore = *o.PageBefore
		}
		qPageBefore := qrPageBefore
		if qPageBefore != "" {
			if err := r.SetQueryParam("page[before]", qPageBefore); err != nil {
				return err
			}
		}

	}

	if o.PageNumber != nil {

		// query param page[number]
		var qrPageNumber string
		if o.PageNumber != nil {
			qrPageNumber = *o.PageNumber
		}
		qPageNumber := qrPageNumber
		if qPageNumber != "" {
			if err := r.SetQueryParam("page[number]", qPageNumber); err != nil {
				return err
			}
		}

	}

	if o.PageSize != nil {

		// query param page[size]
		var qrPageSize int64
		if o.PageSize != nil {
			qrPageSize = *o.PageSize
		}
		qPageSize := swag.FormatInt64(qrPageSize)
		if qPageSize != "" {
			if err := r.SetQueryParam("page[size]", qPageSize); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
