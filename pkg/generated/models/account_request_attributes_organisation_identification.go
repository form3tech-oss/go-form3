// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"log"
	"strconv"

	"github.com/form3tech-oss/go-form3/v2/pkg/client"
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AccountRequestAttributesOrganisationIdentification account request attributes organisation identification
// swagger:model AccountRequestAttributesOrganisationIdentification
type AccountRequestAttributesOrganisationIdentification struct {

	// actors
	Actors []*AccountRequestAttributesOrganisationIdentificationActor `json:"actors"`

	// The street name and house number of the postal address of the account holding organisation.
	Address []string `json:"address"`

	// The city where address of the account holding organisation is located.
	// Max Length: 35
	// Min Length: 1
	City string `json:"city,omitempty"`

	// The country where address of the account holding organisation is located. Must be ISO 3166-1 code.
	// Pattern: ^[A-Z]{2}$
	Country string `json:"country,omitempty"`

	// The registration number used to identify the account holding organisation.
	// Max Length: 140
	// Min Length: 1
	Identification string `json:"identification,omitempty"`

	// Issuer of identification.
	IdentificationIssuer string `json:"identification_issuer,omitempty"`

	// Scheme used for identification.
	// Max Length: 35
	// Min Length: 1
	IdentificationScheme string `json:"identification_scheme,omitempty"`

	// The code specifying the type of identification.
	// Max Length: 35
	// Min Length: 1
	IdentificationSchemeCode string `json:"identification_scheme_code,omitempty"`

	// Issuer of 'identification'.
	RegistrationNumber string `json:"registration_number,omitempty"`

	// ISO 3166-1 code used to identify the domicile of the account
	// Pattern: ^[A-Z]{2}$
	TaxResidency string `json:"tax_residency,omitempty"`
}

func AccountRequestAttributesOrganisationIdentificationWithDefaults(defaults client.Defaults) *AccountRequestAttributesOrganisationIdentification {
	return &AccountRequestAttributesOrganisationIdentification{

		Actors: make([]*AccountRequestAttributesOrganisationIdentificationActor, 0),

		Address: make([]string, 0),

		City: defaults.GetString("AccountRequestAttributesOrganisationIdentification", "city"),

		Country: defaults.GetString("AccountRequestAttributesOrganisationIdentification", "country"),

		Identification: defaults.GetString("AccountRequestAttributesOrganisationIdentification", "identification"),

		IdentificationIssuer: defaults.GetString("AccountRequestAttributesOrganisationIdentification", "identification_issuer"),

		IdentificationScheme: defaults.GetString("AccountRequestAttributesOrganisationIdentification", "identification_scheme"),

		IdentificationSchemeCode: defaults.GetString("AccountRequestAttributesOrganisationIdentification", "identification_scheme_code"),

		RegistrationNumber: defaults.GetString("AccountRequestAttributesOrganisationIdentification", "registration_number"),

		TaxResidency: defaults.GetString("AccountRequestAttributesOrganisationIdentification", "tax_residency"),
	}
}

func (m *AccountRequestAttributesOrganisationIdentification) WithActors(actors []*AccountRequestAttributesOrganisationIdentificationActor) *AccountRequestAttributesOrganisationIdentification {

	m.Actors = actors

	return m
}

func (m *AccountRequestAttributesOrganisationIdentification) WithAddress(address []string) *AccountRequestAttributesOrganisationIdentification {

	m.Address = address

	return m
}

func (m *AccountRequestAttributesOrganisationIdentification) WithCity(city string) *AccountRequestAttributesOrganisationIdentification {

	m.City = city

	return m
}

func (m *AccountRequestAttributesOrganisationIdentification) WithCountry(country string) *AccountRequestAttributesOrganisationIdentification {

	m.Country = country

	return m
}

func (m *AccountRequestAttributesOrganisationIdentification) WithIdentification(identification string) *AccountRequestAttributesOrganisationIdentification {

	m.Identification = identification

	return m
}

func (m *AccountRequestAttributesOrganisationIdentification) WithIdentificationIssuer(identificationIssuer string) *AccountRequestAttributesOrganisationIdentification {

	m.IdentificationIssuer = identificationIssuer

	return m
}

func (m *AccountRequestAttributesOrganisationIdentification) WithIdentificationScheme(identificationScheme string) *AccountRequestAttributesOrganisationIdentification {

	m.IdentificationScheme = identificationScheme

	return m
}

func (m *AccountRequestAttributesOrganisationIdentification) WithIdentificationSchemeCode(identificationSchemeCode string) *AccountRequestAttributesOrganisationIdentification {

	m.IdentificationSchemeCode = identificationSchemeCode

	return m
}

func (m *AccountRequestAttributesOrganisationIdentification) WithRegistrationNumber(registrationNumber string) *AccountRequestAttributesOrganisationIdentification {

	m.RegistrationNumber = registrationNumber

	return m
}

func (m *AccountRequestAttributesOrganisationIdentification) WithTaxResidency(taxResidency string) *AccountRequestAttributesOrganisationIdentification {

	m.TaxResidency = taxResidency

	return m
}

// Validate validates this account request attributes organisation identification
func (m *AccountRequestAttributesOrganisationIdentification) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateActors(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCountry(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIdentification(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIdentificationScheme(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIdentificationSchemeCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTaxResidency(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AccountRequestAttributesOrganisationIdentification) validateActors(formats strfmt.Registry) error {

	if swag.IsZero(m.Actors) { // not required
		return nil
	}

	for i := 0; i < len(m.Actors); i++ {
		if swag.IsZero(m.Actors[i]) { // not required
			continue
		}

		if m.Actors[i] != nil {
			if err := m.Actors[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("actors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AccountRequestAttributesOrganisationIdentification) validateAddress(formats strfmt.Registry) error {

	if swag.IsZero(m.Address) { // not required
		return nil
	}

	for i := 0; i < len(m.Address); i++ {

		if err := validate.MinLength("address"+"."+strconv.Itoa(i), "body", string(m.Address[i]), 1); err != nil {
			return err
		}

		if err := validate.MaxLength("address"+"."+strconv.Itoa(i), "body", string(m.Address[i]), 140); err != nil {
			return err
		}

	}

	return nil
}

func (m *AccountRequestAttributesOrganisationIdentification) validateCity(formats strfmt.Registry) error {

	if swag.IsZero(m.City) { // not required
		return nil
	}

	if err := validate.MinLength("city", "body", string(m.City), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("city", "body", string(m.City), 35); err != nil {
		return err
	}

	return nil
}

func (m *AccountRequestAttributesOrganisationIdentification) validateCountry(formats strfmt.Registry) error {

	if swag.IsZero(m.Country) { // not required
		return nil
	}

	if err := validate.Pattern("country", "body", string(m.Country), `^[A-Z]{2}$`); err != nil {
		return err
	}

	return nil
}

func (m *AccountRequestAttributesOrganisationIdentification) validateIdentification(formats strfmt.Registry) error {

	if swag.IsZero(m.Identification) { // not required
		return nil
	}

	if err := validate.MinLength("identification", "body", string(m.Identification), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("identification", "body", string(m.Identification), 140); err != nil {
		return err
	}

	return nil
}

func (m *AccountRequestAttributesOrganisationIdentification) validateIdentificationScheme(formats strfmt.Registry) error {

	if swag.IsZero(m.IdentificationScheme) { // not required
		return nil
	}

	if err := validate.MinLength("identification_scheme", "body", string(m.IdentificationScheme), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("identification_scheme", "body", string(m.IdentificationScheme), 35); err != nil {
		return err
	}

	return nil
}

func (m *AccountRequestAttributesOrganisationIdentification) validateIdentificationSchemeCode(formats strfmt.Registry) error {

	if swag.IsZero(m.IdentificationSchemeCode) { // not required
		return nil
	}

	if err := validate.MinLength("identification_scheme_code", "body", string(m.IdentificationSchemeCode), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("identification_scheme_code", "body", string(m.IdentificationSchemeCode), 35); err != nil {
		return err
	}

	return nil
}

func (m *AccountRequestAttributesOrganisationIdentification) validateTaxResidency(formats strfmt.Registry) error {

	if swag.IsZero(m.TaxResidency) { // not required
		return nil
	}

	if err := validate.Pattern("tax_residency", "body", string(m.TaxResidency), `^[A-Z]{2}$`); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AccountRequestAttributesOrganisationIdentification) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AccountRequestAttributesOrganisationIdentification) UnmarshalBinary(b []byte) error {
	var res AccountRequestAttributesOrganisationIdentification
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
func (m *AccountRequestAttributesOrganisationIdentification) Json() string {
	json, err := json.MarshalIndent(m, "  ", "  ")
	if err != nil {
		log.Fatal(err)
	}
	return string(json)
}
