// Code generated by go-swagger; DO NOT EDIT.

// :Form3: Testing!

package branch_identification

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/form3tech-oss/go-form3/v7/pkg/client"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new branch identification API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry, defaults client.Defaults) *Client {
	return &Client{transport: transport, formats: formats, Defaults: defaults}
}

/*
Client for branch identification API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
	Defaults  client.Defaults
}

// range of operations

/*
create branch identification API
*/
func (a *CreateBranchIdentificationRequest) Do() (*CreateBranchIdentificationCreated, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CreateBranchIdentification",
		Method:             "POST",
		PathPattern:        "/organisation/branches/{branch_id}/identifications",
		ProducesMediaTypes: []string{"application/vnd.api+json", "application/json"},
		ConsumesMediaTypes: []string{"application/vnd.api+json", "application/json"},
		Schemes:            []string{"https"},
		Params:             a,
		Reader:             &CreateBranchIdentificationReader{formats: a.formats},
		//AuthInfo: authInfo,
		Context: a.Context,
		Client:  a.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateBranchIdentificationCreated), nil

}

func (a *CreateBranchIdentificationRequest) MustDo() *CreateBranchIdentificationCreated {
	r0, err := a.Do()
	if err != nil {
		panic(err)
	}
	return r0
}

/*
delete branch identification API
*/
func (a *DeleteBranchIdentificationRequest) Do() (*DeleteBranchIdentificationNoContent, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteBranchIdentification",
		Method:             "DELETE",
		PathPattern:        "/organisation/branches/{branch_id}/identifications/{identification_id}",
		ProducesMediaTypes: []string{"application/vnd.api+json", "application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             a,
		Reader:             &DeleteBranchIdentificationReader{formats: a.formats},
		//AuthInfo: authInfo,
		Context: a.Context,
		Client:  a.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteBranchIdentificationNoContent), nil

}

func (a *DeleteBranchIdentificationRequest) MustDo() *DeleteBranchIdentificationNoContent {
	r0, err := a.Do()
	if err != nil {
		panic(err)
	}
	return r0
}

/*
get branch identification API
*/
func (a *GetBranchIdentificationRequest) Do() (*GetBranchIdentificationOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetBranchIdentification",
		Method:             "GET",
		PathPattern:        "/organisation/branches/{branch_id}/identifications/{identification_id}",
		ProducesMediaTypes: []string{"application/vnd.api+json", "application/json"},
		ConsumesMediaTypes: []string{"application/vnd.api+json", "application/json"},
		Schemes:            []string{"https"},
		Params:             a,
		Reader:             &GetBranchIdentificationReader{formats: a.formats},
		//AuthInfo: authInfo,
		Context: a.Context,
		Client:  a.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetBranchIdentificationOK), nil

}

func (a *GetBranchIdentificationRequest) MustDo() *GetBranchIdentificationOK {
	r0, err := a.Do()
	if err != nil {
		panic(err)
	}
	return r0
}

/*
list branch identifications by branch API
*/
func (a *ListBranchIdentificationsByBranchRequest) Do() (*ListBranchIdentificationsByBranchOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ListBranchIdentificationsByBranch",
		Method:             "GET",
		PathPattern:        "/organisation/branches/{branch_id}/identifications",
		ProducesMediaTypes: []string{"application/vnd.api+json", "application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             a,
		Reader:             &ListBranchIdentificationsByBranchReader{formats: a.formats},
		//AuthInfo: authInfo,
		Context: a.Context,
		Client:  a.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListBranchIdentificationsByBranchOK), nil

}

func (a *ListBranchIdentificationsByBranchRequest) MustDo() *ListBranchIdentificationsByBranchOK {
	r0, err := a.Do()
	if err != nil {
		panic(err)
	}
	return r0
}

/*
patch branch identification API
*/
func (a *PatchBranchIdentificationRequest) Do() (*PatchBranchIdentificationOK, error) {

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PatchBranchIdentification",
		Method:             "PATCH",
		PathPattern:        "/organisation/branches/{branch_id}/identifications/{identification_id}",
		ProducesMediaTypes: []string{"application/vnd.api+json", "application/json"},
		ConsumesMediaTypes: []string{"application/vnd.api+json", "application/json"},
		Schemes:            []string{"https"},
		Params:             a,
		Reader:             &PatchBranchIdentificationReader{formats: a.formats},
		//AuthInfo: authInfo,
		Context: a.Context,
		Client:  a.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PatchBranchIdentificationOK), nil

}

func (a *PatchBranchIdentificationRequest) MustDo() *PatchBranchIdentificationOK {
	r0, err := a.Do()
	if err != nil {
		panic(err)
	}
	return r0
}

/////////

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
