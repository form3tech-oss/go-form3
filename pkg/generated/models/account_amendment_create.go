// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"log"
	"strconv"

	"github.com/form3tech-oss/go-form3/v2/pkg/client"
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AccountAmendmentCreate account amendment create
// swagger:model AccountAmendmentCreate
type AccountAmendmentCreate struct {

	// attributes
	// Required: true
	Attributes *AccountAmendmentAttributes `json:"attributes"`

	// Account Amendment ID
	// Required: true
	// Format: uuid
	ID strfmt.UUID `json:"id"`

	// Unique ID of the organisation this resource is created by
	// Required: true
	// Format: uuid
	OrganisationID strfmt.UUID `json:"organisation_id"`

	// relationships
	Relationships *AccountAmendmentCreateRelationships `json:"relationships,omitempty"`

	// type
	// Required: true
	// Enum: [account_amendments]
	Type string `json:"type"`
}

func AccountAmendmentCreateWithDefaults(defaults client.Defaults) *AccountAmendmentCreate {
	return &AccountAmendmentCreate{

		Attributes: AccountAmendmentAttributesWithDefaults(defaults),

		ID: defaults.GetStrfmtUUID("AccountAmendmentCreate", "id"),

		OrganisationID: defaults.GetStrfmtUUID("AccountAmendmentCreate", "organisation_id"),

		Relationships: AccountAmendmentCreateRelationshipsWithDefaults(defaults),

		Type: defaults.GetString("AccountAmendmentCreate", "type"),
	}
}

func (m *AccountAmendmentCreate) WithAttributes(attributes AccountAmendmentAttributes) *AccountAmendmentCreate {

	m.Attributes = &attributes

	return m
}

func (m *AccountAmendmentCreate) WithoutAttributes() *AccountAmendmentCreate {
	m.Attributes = nil
	return m
}

func (m *AccountAmendmentCreate) WithID(id strfmt.UUID) *AccountAmendmentCreate {

	m.ID = id

	return m
}

func (m *AccountAmendmentCreate) WithOrganisationID(organisationID strfmt.UUID) *AccountAmendmentCreate {

	m.OrganisationID = organisationID

	return m
}

func (m *AccountAmendmentCreate) WithRelationships(relationships AccountAmendmentCreateRelationships) *AccountAmendmentCreate {

	m.Relationships = &relationships

	return m
}

func (m *AccountAmendmentCreate) WithoutRelationships() *AccountAmendmentCreate {
	m.Relationships = nil
	return m
}

func (m *AccountAmendmentCreate) WithType(typeVar string) *AccountAmendmentCreate {

	m.Type = typeVar

	return m
}

// Validate validates this account amendment create
func (m *AccountAmendmentCreate) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAttributes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrganisationID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRelationships(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AccountAmendmentCreate) validateAttributes(formats strfmt.Registry) error {

	if err := validate.Required("attributes", "body", m.Attributes); err != nil {
		return err
	}

	if m.Attributes != nil {
		if err := m.Attributes.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("attributes")
			}
			return err
		}
	}

	return nil
}

func (m *AccountAmendmentCreate) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", strfmt.UUID(m.ID)); err != nil {
		return err
	}

	if err := validate.FormatOf("id", "body", "uuid", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *AccountAmendmentCreate) validateOrganisationID(formats strfmt.Registry) error {

	if err := validate.Required("organisation_id", "body", strfmt.UUID(m.OrganisationID)); err != nil {
		return err
	}

	if err := validate.FormatOf("organisation_id", "body", "uuid", m.OrganisationID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *AccountAmendmentCreate) validateRelationships(formats strfmt.Registry) error {

	if swag.IsZero(m.Relationships) { // not required
		return nil
	}

	if m.Relationships != nil {
		if err := m.Relationships.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("relationships")
			}
			return err
		}
	}

	return nil
}

var accountAmendmentCreateTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["account_amendments"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		accountAmendmentCreateTypeTypePropEnum = append(accountAmendmentCreateTypeTypePropEnum, v)
	}
}

const (

	// AccountAmendmentCreateTypeAccountAmendments captures enum value "account_amendments"
	AccountAmendmentCreateTypeAccountAmendments string = "account_amendments"
)

// prop value enum
func (m *AccountAmendmentCreate) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, accountAmendmentCreateTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *AccountAmendmentCreate) validateType(formats strfmt.Registry) error {

	if err := validate.RequiredString("type", "body", string(m.Type)); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AccountAmendmentCreate) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AccountAmendmentCreate) UnmarshalBinary(b []byte) error {
	var res AccountAmendmentCreate
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
func (m *AccountAmendmentCreate) Json() string {
	json, err := json.MarshalIndent(m, "  ", "  ")
	if err != nil {
		log.Fatal(err)
	}
	return string(json)
}

// AccountAmendmentCreateRelationships account amendment create relationships
// swagger:model AccountAmendmentCreateRelationships
type AccountAmendmentCreateRelationships struct {

	// account
	Account *AccountAmendmentCreateRelationshipsAccount `json:"account,omitempty"`
}

func AccountAmendmentCreateRelationshipsWithDefaults(defaults client.Defaults) *AccountAmendmentCreateRelationships {
	return &AccountAmendmentCreateRelationships{

		Account: AccountAmendmentCreateRelationshipsAccountWithDefaults(defaults),
	}
}

func (m *AccountAmendmentCreateRelationships) WithAccount(account AccountAmendmentCreateRelationshipsAccount) *AccountAmendmentCreateRelationships {

	m.Account = &account

	return m
}

func (m *AccountAmendmentCreateRelationships) WithoutAccount() *AccountAmendmentCreateRelationships {
	m.Account = nil
	return m
}

// Validate validates this account amendment create relationships
func (m *AccountAmendmentCreateRelationships) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccount(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AccountAmendmentCreateRelationships) validateAccount(formats strfmt.Registry) error {

	if swag.IsZero(m.Account) { // not required
		return nil
	}

	if m.Account != nil {
		if err := m.Account.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("relationships" + "." + "account")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AccountAmendmentCreateRelationships) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AccountAmendmentCreateRelationships) UnmarshalBinary(b []byte) error {
	var res AccountAmendmentCreateRelationships
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
func (m *AccountAmendmentCreateRelationships) Json() string {
	json, err := json.MarshalIndent(m, "  ", "  ")
	if err != nil {
		log.Fatal(err)
	}
	return string(json)
}

// AccountAmendmentCreateRelationshipsAccount account amendment create relationships account
// swagger:model AccountAmendmentCreateRelationshipsAccount
type AccountAmendmentCreateRelationshipsAccount struct {

	// data
	// Max Items: 1
	// Min Items: 1
	Data []*AmendmentAccountReference `json:"data"`
}

func AccountAmendmentCreateRelationshipsAccountWithDefaults(defaults client.Defaults) *AccountAmendmentCreateRelationshipsAccount {
	return &AccountAmendmentCreateRelationshipsAccount{

		Data: make([]*AmendmentAccountReference, 0),
	}
}

func (m *AccountAmendmentCreateRelationshipsAccount) WithData(data []*AmendmentAccountReference) *AccountAmendmentCreateRelationshipsAccount {

	m.Data = data

	return m
}

// Validate validates this account amendment create relationships account
func (m *AccountAmendmentCreateRelationshipsAccount) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AccountAmendmentCreateRelationshipsAccount) validateData(formats strfmt.Registry) error {

	if swag.IsZero(m.Data) { // not required
		return nil
	}

	iDataSize := int64(len(m.Data))

	if err := validate.MinItems("relationships"+"."+"account"+"."+"data", "body", iDataSize, 1); err != nil {
		return err
	}

	if err := validate.MaxItems("relationships"+"."+"account"+"."+"data", "body", iDataSize, 1); err != nil {
		return err
	}

	for i := 0; i < len(m.Data); i++ {
		if swag.IsZero(m.Data[i]) { // not required
			continue
		}

		if m.Data[i] != nil {
			if err := m.Data[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("relationships" + "." + "account" + "." + "data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *AccountAmendmentCreateRelationshipsAccount) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AccountAmendmentCreateRelationshipsAccount) UnmarshalBinary(b []byte) error {
	var res AccountAmendmentCreateRelationshipsAccount
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
func (m *AccountAmendmentCreateRelationshipsAccount) Json() string {
	json, err := json.MarshalIndent(m, "  ", "  ")
	if err != nil {
		log.Fatal(err)
	}
	return string(json)
}
